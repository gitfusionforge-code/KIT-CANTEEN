{"file_contents":{"FIREBASE_SETUP.md":{"content":"# Firebase Configuration Instructions\n\n## Current Status\nFirebase authentication is configured but requires domain authorization.\n\n## Required Setup Steps\n\n### 1. Firebase Console Configuration\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Select your project: `kit-canteeen`\n3. Navigate to **Authentication** → **Settings** → **Authorized domains**\n4. Add the following domains:\n   - `localhost` (for development)\n   - Your Replit domain (e.g., `your-repl-name.replit.app`)\n   - Any custom domains you plan to use\n\n### 2. Current Environment Variables\nThe following Firebase credentials are already configured:\n- ✅ VITE_FIREBASE_API_KEY\n- ✅ VITE_FIREBASE_APP_ID  \n- ✅ VITE_FIREBASE_PROJECT_ID\n\n### 3. Error Messages Explained\n- `auth/unauthorized-domain`: Current domain not in authorized domains list\n- `auth/popup-blocked`: Browser blocked the Google sign-in popup\n- `auth/popup-closed-by-user`: User closed the sign-in window\n\n### 4. Testing Authentication\nAfter adding domains to Firebase Console:\n1. Try the \"Continue with College Email\" button\n2. Complete Google sign-in flow\n3. User will be redirected to home page with stored authentication data\n\n## Fallback Options\nIf Firebase authentication continues to have issues:\n1. Traditional email/password authentication\n2. Guest access (already implemented with \"Skip for now\")\n3. Direct admin/owner dashboard access (already available)","size_bytes":1423},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\nKIT-Canteen is a modern food ordering application for college campuses, enabling students, faculty, and staff to browse menus, place orders, and manage preferences via a web application. It offers both customer-facing features and administrative panels for canteen management, aiming to provide a complete solution for campus food service operations. The project's vision is to streamline campus food services, enhance user experience, and provide efficient management tools for canteen operators.\n\n## Recent Changes (August 2025)\n- **Order ID Format Update**: Changed from timestamp-based format (KC + 6-digit timestamp + 6-char random) to 12-digit alphanumeric format (A-Z, 0-9) for better barcode compatibility and scanning reliability.\n- Updated barcode generation across all components including server routes, client forms, and scanner validation.\n- Enhanced order lookup to support both legacy and new ID formats for backward compatibility.\n- Improved barcode scanner UI with real-time validation feedback and format guidance.\n- **Real-time Order Notifications**: Implemented Server-Sent Events (SSE) for automatic order updates in canteen owner dashboard when students place orders, eliminating the need for manual page refreshes.\n- Fixed \"Mark Ready\" button issue that was incorrectly calling menu update API instead of order update API.\n- Added comprehensive error handling and duplicate prevention in barcode scanner functionality.\n\n# User Preferences\nPreferred communication style: Simple, everyday language.\nEnvironment variables: Always store credentials in .env file when possible for better organization.\n\n# System Architecture\nThe application is built as a **React-based SPA** using **React 18** and **TypeScript**, with **Vite** for fast builds. **Wouter** handles client-side routing, while **Tailwind CSS** with **shadcn/ui** provides a consistent design system. **TanStack Query** manages server state, and **React Hook Form** with **Zod** ensures robust form validation. The frontend follows a component-based architecture optimized for mobile-first responsiveness.\n\nThe backend is a **Node.js Express server** written in TypeScript, leveraging **ESM modules** and a middleware-based architecture. It uses an **abstract storage interface** (`IStorage`) for flexible data persistence.\n\nData storage employs a **dual approach**: in-memory storage (`MemStorage`) for development and **PostgreSQL with Drizzle ORM** for production, ensuring type-safe database operations. Database migrations are managed via Drizzle Kit, adhering to a schema-first approach.\n\nAuthentication is **flexible**, supporting **Google OAuth** and guest access. It implements **role-based permissions** (Student, Faculty, Staff, Admin, Super Admin) and session-based authentication with granular admin controls.\n\n# External Dependencies\n**UI and Styling:** @radix-ui, Tailwind CSS, shadcn/ui, Lucide React\n**State Management & Data Fetching:** @tanstack/react-query, React Hook Form, @hookform/resolvers\n**Database & ORM:** Drizzle ORM, @neondatabase/serverless, Drizzle Zod\n**Development & Build Tools:** Vite, TypeScript, ESBuild, PostCSS, Autoprefixer\n**Mobile & PWA Features:** @capacitor-community/barcode-scanner\n**Utilities & Helpers:** date-fns, clsx, class-variance-authority, zod, nanoid\n```","size_bytes":3305},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet pool: Pool | null = null;\nlet db: ReturnType<typeof drizzle> | null = null;\n\nfunction getDatabase() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error(\n      \"DATABASE_URL must be set. Did you forget to provision a database?\",\n    );\n  }\n\n  if (!pool) {\n    pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  }\n\n  if (!db) {\n    db = drizzle({ client: pool, schema });\n  }\n\n  return db;\n}\n\nexport { getDatabase as db };\n","size_bytes":665},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { performStartupCheck } from \"./startup-check\";\nimport { WebSocketServer } from 'ws';\nimport { createServer } from 'http';\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Perform startup health check\n  const healthCheckPassed = await performStartupCheck();\n  if (!healthCheckPassed) {\n    console.error(\"❌ Server startup aborted due to failed health check\");\n    process.exit(1);\n  }\n\n  const server = await registerRoutes(app);\n  \n  // Set up WebSocket server for real-time order notifications\n  const wss = new WebSocketServer({ server });\n  \n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected for real-time order updates');\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n  \n  // Make WebSocket server available globally for broadcasting\n  (global as any).wsServer = wss;\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2787},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertCategorySchema, \n  insertMenuItemSchema, \n  insertOrderSchema, \n  insertNotificationSchema \n} from \"@shared/schema\";\nimport { generateOrderId } from \"@shared/utils\";\n\n// Store SSE connections for real-time notifications\nconst sseConnections = new Set<any>();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Server-Sent Events endpoint for real-time order notifications\n  app.get(\"/api/events/orders\", (req, res) => {\n    // Set headers for SSE\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    });\n\n    // Add connection to the set\n    sseConnections.add(res);\n    \n    // Send initial connection confirmation\n    res.write('data: {\"type\": \"connected\", \"message\": \"Connected to real-time order updates\"}\\n\\n');\n    \n    console.log(`📡 SSE client connected. Total connections: ${sseConnections.size}`);\n\n    // Handle client disconnect\n    req.on('close', () => {\n      sseConnections.delete(res);\n      console.log(`📡 SSE client disconnected. Total connections: ${sseConnections.size}`);\n    });\n  });\n\n  // User management endpoints\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(parseInt(req.params.id));\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/by-username/:username\", async (req, res) => {\n    try {\n      const user = await storage.getUserByUsername(req.params.username);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Categories endpoints\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error: any) {\n      if (error.code === '23505') { // PostgreSQL unique constraint violation\n        res.status(409).json({ message: \"Category already exists\" });\n      } else {\n        res.status(500).json({ message: \"Internal server error\", error: error.message });\n      }\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      await storage.deleteCategory(parseInt(req.params.id));\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Menu Items endpoints\n  app.get(\"/api/menu\", async (req, res) => {\n    try {\n      const menuItems = await storage.getMenuItems();\n      res.json(menuItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/menu/:id\", async (req, res) => {\n    try {\n      const menuItem = await storage.getMenuItem(parseInt(req.params.id));\n      if (!menuItem) {\n        return res.status(404).json({ message: \"Menu item not found\" });\n      }\n      res.json(menuItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/menu\", async (req, res) => {\n    try {\n      const validatedData = insertMenuItemSchema.parse(req.body);\n      const menuItem = await storage.createMenuItem(validatedData);\n      res.status(201).json(menuItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/menu/:id\", async (req, res) => {\n    try {\n      console.log(\"PUT /api/menu/:id - Request body:\", req.body);\n      \n      // Validate the request data, but allow partial updates\n      const validatedData = insertMenuItemSchema.partial().parse(req.body);\n      console.log(\"PUT /api/menu/:id - Validated data:\", validatedData);\n      \n      const menuItem = await storage.updateMenuItem(parseInt(req.params.id), validatedData);\n      res.json(menuItem);\n    } catch (error) {\n      console.error(\"Error updating menu item:\", error);\n      res.status(500).json({ message: \"Internal server error\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.delete(\"/api/menu/:id\", async (req, res) => {\n    try {\n      await storage.deleteMenuItem(parseInt(req.params.id));\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Orders endpoints\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(parseInt(req.params.id));\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      // Generate unique 12-digit alphanumeric order ID for both orderNumber and barcode\n      const orderNumber = generateOrderId();\n      const barcode = generateOrderId();\n      \n      const orderData = { ...req.body, orderNumber, barcode };\n      const validatedData = insertOrderSchema.parse(orderData);\n      const order = await storage.createOrder(validatedData);\n      \n      // Broadcast new order to all connected SSE clients (canteen owners)\n      if (sseConnections.size > 0) {\n        const message = `data: ${JSON.stringify({\n          type: 'new_order',\n          data: order\n        })}\\n\\n`;\n        \n        // Send to all connected SSE clients\n        sseConnections.forEach((connection) => {\n          try {\n            connection.write(message);\n          } catch (error) {\n            // Remove dead connections\n            sseConnections.delete(connection);\n          }\n        });\n        \n        console.log(`📢 Broadcasted new order ${order.orderNumber} to ${sseConnections.size} connected clients`);\n      }\n      \n      res.status(201).json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.updateOrder(parseInt(req.params.id), req.body);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", async (req, res) => {\n    try {\n      console.log(`Updating order ${req.params.id} with data:`, req.body);\n      const order = await storage.updateOrder(parseInt(req.params.id), req.body);\n      console.log(\"Updated order:\", order);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Notifications endpoints\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      const notifications = await storage.getNotifications();\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(validatedData);\n      res.status(201).json(notification);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/notifications/:id\", async (req, res) => {\n    try {\n      const notification = await storage.updateNotification(parseInt(req.params.id), req.body);\n      res.json(notification);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/notifications/:id\", async (req, res) => {\n    try {\n      await storage.deleteNotification(parseInt(req.params.id));\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n\n\n  // Barcode delivery endpoints\n  app.post(\"/api/delivery/scan\", async (req, res) => {\n    try {\n      const { barcode } = req.body;\n      if (!barcode) {\n        return res.status(400).json({ message: \"Barcode is required\" });\n      }\n\n      console.log(\"Scanning barcode:\", barcode);\n      \n      // Find order by barcode or order number\n      let order = await storage.getOrderByBarcode(barcode);\n      \n      // If not found by barcode, try to find by order number (12-digit alphanumeric format)\n      if (!order && barcode.match(/^[A-Z0-9]{12}$/)) {\n        order = await storage.getOrderByOrderNumber(barcode);\n      }\n      \n      if (!order) {\n        return res.status(404).json({ \n          message: \"Invalid barcode. No order found.\", \n          error: \"BARCODE_NOT_FOUND\" \n        });\n      }\n\n      // Check if barcode was already used\n      if (order.barcodeUsed) {\n        return res.status(400).json({ \n          message: \"🔒 This order has already been delivered.\", \n          error: \"BARCODE_ALREADY_USED\",\n          deliveredAt: order.deliveredAt \n        });\n      }\n\n      // Check if order is ready for pickup\n      if (order.status !== \"ready\") {\n        return res.status(400).json({ \n          message: `Order is not ready for pickup. Current status: ${order.status}`, \n          error: \"ORDER_NOT_READY\" \n        });\n      }\n\n      // Update order to delivered and mark barcode as used\n      const updatedOrder = await storage.updateOrder(order.id, {\n        status: \"delivered\",\n        barcodeUsed: true,\n        deliveredAt: new Date()\n      });\n\n      console.log(\"Order delivered successfully:\", updatedOrder);\n\n      res.json({\n        success: true,\n        message: \"Order delivered successfully!\",\n        order: updatedOrder\n      });\n    } catch (error) {\n      console.error(\"Error processing barcode scan:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/delivery/verify/:barcode\", async (req, res) => {\n    try {\n      const { barcode } = req.params;\n      \n      const order = await storage.getOrderByBarcode(barcode);\n      if (!order) {\n        return res.status(404).json({ \n          valid: false, \n          message: \"Invalid barcode\" \n        });\n      }\n\n      res.json({\n        valid: true,\n        order: {\n          id: order.id,\n          orderNumber: order.orderNumber,\n          customerName: order.customerName,\n          status: order.status,\n          barcodeUsed: order.barcodeUsed,\n          deliveredAt: order.deliveredAt,\n          amount: order.amount\n        }\n      });\n    } catch (error) {\n      console.error(\"Error verifying barcode:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin analytics endpoint\n  app.get(\"/api/admin/analytics\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      const menuItems = await storage.getMenuItems();\n      \n      const totalOrders = orders.length;\n      const totalRevenue = orders.reduce((sum, order) => sum + order.amount, 0);\n      const activeMenuItems = menuItems.filter(item => item.available).length;\n      const averageOrderValue = totalOrders > 0 ? Math.round(totalRevenue / totalOrders) : 0;\n\n      res.json({\n        totalOrders,\n        totalRevenue,\n        activeMenuItems,\n        averageOrderValue\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":12906},"server/startup-check.ts":{"content":"/**\n * Startup health check to ensure database connectivity\n * This prevents the common DATABASE_URL issues during remixing\n */\nimport { users } from \"@shared/schema\";\nimport { db as getDb } from \"./db\";\n\nexport async function performStartupCheck(): Promise<boolean> {\n  try {\n    console.log(\"🔍 Performing startup health check...\");\n    \n    // Check if DATABASE_URL is available\n    if (!process.env.DATABASE_URL) {\n      console.error(\"❌ DATABASE_URL environment variable is not set\");\n      return false;\n    }\n    \n    // Test database connectivity by querying users table\n    const db = getDb();\n    await db.select().from(users).limit(1);\n    \n    console.log(\"✅ Database connection successful\");\n    console.log(\"✅ Startup health check passed\");\n    return true;\n    \n  } catch (error) {\n    console.error(\"❌ Startup health check failed:\", error);\n    console.error(\"💡 Tip: Make sure PostgreSQL database is provisioned and DATABASE_URL is set\");\n    return false;\n  }\n}","size_bytes":991},"server/storage.ts":{"content":"import { \n  users, categories, menuItems, orders, notifications,\n  type User, type InsertUser,\n  type Category, type InsertCategory,\n  type MenuItem, type InsertMenuItem,\n  type Order, type InsertOrder,\n  type Notification, type InsertNotification\n} from \"@shared/schema\";\nimport { db as getDb } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Categories\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  deleteCategory(id: number): Promise<void>;\n  \n  // Menu Items\n  getMenuItems(): Promise<MenuItem[]>;\n  getMenuItem(id: number): Promise<MenuItem | undefined>;\n  createMenuItem(item: InsertMenuItem): Promise<MenuItem>;\n  updateMenuItem(id: number, item: Partial<InsertMenuItem>): Promise<MenuItem>;\n  deleteMenuItem(id: number): Promise<void>;\n  \n  // Orders\n  getOrders(): Promise<Order[]>;\n  getOrder(id: number): Promise<Order | undefined>;\n  getOrderByBarcode(barcode: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, order: Partial<InsertOrder & { deliveredAt?: Date; barcodeUsed?: boolean }>): Promise<Order>;\n  \n  // Notifications\n  getNotifications(): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  updateNotification(id: number, notification: Partial<InsertNotification>): Promise<Notification>;\n  deleteNotification(id: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: number): Promise<User | undefined> {\n    const db = getDb();\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const db = getDb();\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const db = getDb();\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    const db = getDb();\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const db = getDb();\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async deleteCategory(id: number): Promise<void> {\n    const db = getDb();\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Menu Items\n  async getMenuItems(): Promise<MenuItem[]> {\n    const db = getDb();\n    return await db.select().from(menuItems).orderBy(menuItems.name);\n  }\n\n  async getMenuItem(id: number): Promise<MenuItem | undefined> {\n    const db = getDb();\n    const [item] = await db.select().from(menuItems).where(eq(menuItems.id, id));\n    return item || undefined;\n  }\n\n  async createMenuItem(item: InsertMenuItem): Promise<MenuItem> {\n    const db = getDb();\n    const [newItem] = await db\n      .insert(menuItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async updateMenuItem(id: number, item: Partial<InsertMenuItem>): Promise<MenuItem> {\n    const db = getDb();\n    const [updatedItem] = await db\n      .update(menuItems)\n      .set(item)\n      .where(eq(menuItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async deleteMenuItem(id: number): Promise<void> {\n    const db = getDb();\n    await db.delete(menuItems).where(eq(menuItems.id, id));\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    const db = getDb();\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrder(id: number): Promise<Order | undefined> {\n    const db = getDb();\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const db = getDb();\n    const [newOrder] = await db\n      .insert(orders)\n      .values(order)\n      .returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: number, order: Partial<InsertOrder & { deliveredAt?: Date; barcodeUsed?: boolean }>): Promise<Order> {\n    const db = getDb();\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(order)\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async getOrderByBarcode(barcode: string): Promise<Order | undefined> {\n    const db = getDb();\n    const [order] = await db.select().from(orders).where(eq(orders.barcode, barcode));\n    return order || undefined;\n  }\n\n  async getOrderByOrderNumber(orderNumber: string): Promise<Order | undefined> {\n    const db = getDb();\n    const [order] = await db.select().from(orders).where(eq(orders.orderNumber, orderNumber));\n    return order || undefined;\n  }\n\n  // Notifications\n  async getNotifications(): Promise<Notification[]> {\n    const db = getDb();\n    return await db.select().from(notifications).orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const db = getDb();\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async updateNotification(id: number, notification: Partial<InsertNotification>): Promise<Notification> {\n    const db = getDb();\n    const [updatedNotification] = await db\n      .update(notifications)\n      .set(notification)\n      .where(eq(notifications.id, id))\n      .returning();\n    return updatedNotification;\n  }\n\n  async deleteNotification(id: number): Promise<void> {\n    const db = getDb();\n    await db.delete(notifications).where(eq(notifications.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6213},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { relations } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"student\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const menuItems = pgTable(\"menu_items\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  price: integer(\"price\").notNull(),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  available: boolean(\"available\").notNull().default(true),\n  stock: integer(\"stock\").notNull().default(0),\n  description: text(\"description\"),\n  addOns: text(\"add_ons\").default('[]'), // JSON array of add-ons\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => users.id),\n  customerName: text(\"customer_name\").notNull(),\n  items: text(\"items\").notNull(),\n  amount: integer(\"amount\").notNull(),\n  status: text(\"status\").notNull().default(\"preparing\"),\n  estimatedTime: integer(\"estimated_time\").notNull().default(15),\n  barcode: text(\"barcode\").notNull(), // unique barcode for delivery verification\n  barcodeUsed: boolean(\"barcode_used\").default(false).notNull(), // prevents barcode reuse\n  deliveredAt: timestamp(\"delivered_at\"), // timestamp when order was delivered\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  menuItemId: integer(\"menu_item_id\").references(() => menuItems.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: integer(\"price\").notNull(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  type: text(\"type\").notNull(),\n  message: text(\"message\").notNull(),\n  read: boolean(\"read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  menuItems: many(menuItems),\n}));\n\nexport const menuItemsRelations = relations(menuItems, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [menuItems.categoryId],\n    references: [categories.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  customer: one(users, {\n    fields: [orders.customerId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  menuItem: one(menuItems, {\n    fields: [orderItems.menuItemId],\n    references: [menuItems.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).pick({\n  name: true,\n});\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems).pick({\n  name: true,\n  price: true,\n  categoryId: true,\n  available: true,\n  stock: true,\n  description: true,\n  addOns: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).pick({\n  orderNumber: true,\n  customerId: true,\n  customerName: true,\n  items: true,\n  amount: true,\n  status: true,\n  estimatedTime: true,\n  barcode: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).pick({\n  type: true,\n  message: true,\n  read: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\nexport type MenuItem = typeof menuItems.$inferSelect;\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":4723},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Router, Route, Switch } from \"wouter\";\nimport SplashScreen from \"./components/SplashScreen\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport MenuListingPage from \"./components/MenuListingPage\";\nimport DishDetailPage from \"./components/DishDetailPage\";\nimport CartPage from \"./components/CartPage\";\nimport CheckoutPage from \"./components/CheckoutPage\";\nimport RetryPaymentPage from \"./components/RetryPaymentPage\";\nimport OrderStatusPage from \"./components/OrderStatusPage\";\nimport OrdersPage from \"./components/OrdersPage\";\nimport ProfilePage from \"./components/ProfilePage\";\nimport AdminPanel from \"./components/AdminPanel\";\nimport NotificationsPage from \"./components/NotificationsPage\";\nimport PaymentMethodsPage from \"./components/PaymentMethodsPage\";\nimport SearchPage from \"./components/SearchPage\";\nimport PrivacyPolicyPage from \"./components/PrivacyPolicyPage\";\nimport TermsConditionsPage from \"./components/TermsConditionsPage\";\nimport AdminDashboard from \"./components/AdminDashboard\";\nimport AdminLayout from \"./components/AdminLayout\";\nimport EditAdminAccessPage from \"./components/EditAdminAccessPage\";\nimport AddNewAdminPage from \"./components/AddNewAdminPage\";\nimport AdminOrderManagementPage from \"./components/AdminOrderManagementPage\";\nimport AdminMenuManagementPage from \"./components/AdminMenuManagementPage\";\nimport AdminAnalyticsPage from \"./components/AdminAnalyticsPage\";\nimport AdminReportsPage from \"./components/AdminReportsPage\";\nimport AdminUserManagementPage from \"./components/AdminUserManagementPage\";\nimport AdminSystemSettingsPage from \"./components/AdminSystemSettingsPage\";\n\nimport AdminPaymentManagementPage from \"./components/AdminPaymentManagementPage\";\nimport AdminNotificationManagementPage from \"./components/AdminNotificationManagementPage\";\nimport AdminContentManagementPage from \"./components/AdminContentManagementPage\";\nimport AdminFeedbackManagementPage from \"./components/AdminFeedbackManagementPage\";\nimport AdminReviewManagementPage from \"./components/AdminReviewManagementPage\";\nimport AdminAccessPage from \"./components/AdminAccessPage\";\nimport AdminDatabasePage from \"./components/AdminDatabasePage\";\nimport CanteenOwnerDashboard from \"./components/CanteenOwnerDashboard\";\nimport ViewAllQuickPicksPage from \"./components/ViewAllQuickPicksPage\";\nimport HelpSupportPage from \"./components/HelpSupportPage\";\nimport AboutPage from \"./components/AboutPage\";\nimport FavoritesPage from \"./components/FavoritesPage\";\nimport FeedbackPage from \"./components/FeedbackPage\";\nimport AdminHomeContentEditor from \"./components/AdminHomeContentEditor\";\nimport SendEmailPage from \"./components/user-management/SendEmailPage\";\nimport AddLoyaltyPointsPage from \"./components/user-management/AddLoyaltyPointsPage\";\nimport ApplyDiscountPage from \"./components/user-management/ApplyDiscountPage\";\nimport SendWarningPage from \"./components/user-management/SendWarningPage\";\nimport ExportUserDataPage from \"./components/user-management/ExportUserDataPage\";\nimport ImportUsersPage from \"./components/user-management/ImportUsersPage\";\nimport ReorderPage from \"./components/ReorderPage\";\nimport RateReviewPage from \"./components/RateReviewPage\";\nimport OrderDetailPage from \"./components/OrderDetailPage\";\nimport CanteenOrderDetailPage from \"./components/CanteenOrderDetailPage\";\nimport BarcodeScannerPage from \"./components/BarcodeScannerPage\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={SplashScreen} />\n          <Route path=\"/login\" component={LoginScreen} />\n          <Route path=\"/home\" component={HomeScreen} />\n          <Route path=\"/menu/:category\" component={MenuListingPage} />\n          <Route path=\"/dish/:dishId\" component={DishDetailPage} />\n          <Route path=\"/cart\" component={CartPage} />\n          <Route path=\"/checkout\" component={CheckoutPage} />\n          <Route path=\"/retry-payment\" component={RetryPaymentPage} />\n          <Route path=\"/order-status/:orderId\" component={OrderStatusPage} />\n          <Route path=\"/orders\">\n            <ProtectedRoute requireAuth={true}>\n              <OrdersPage />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/order-detail/:orderId\">\n            <ProtectedRoute requireAuth={true}>\n              <OrderDetailPage />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/canteen-order-detail/:orderId\">\n            <ProtectedRoute requiredRole=\"canteen_owner\">\n              <CanteenOrderDetailPage />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/profile\">\n            <ProtectedRoute requireAuth={true}>\n              <ProfilePage />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/notifications\" component={NotificationsPage} />\n          <Route path=\"/payment-methods\" component={PaymentMethodsPage} />\n          <Route path=\"/search\" component={SearchPage} />\n          <Route path=\"/privacy-policy\" component={PrivacyPolicyPage} />\n          <Route path=\"/terms-conditions\" component={TermsConditionsPage} />\n          <Route path=\"/canteen-owner\">\n            <ProtectedRoute requiredRole=\"canteen_owner\">\n              <CanteenOwnerDashboard />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/canteen-owner-dashboard\">\n            <ProtectedRoute requiredRole=\"canteen_owner\">\n              <CanteenOwnerDashboard />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/admin\">\n            <ProtectedRoute requiredRoles={[\"admin\", \"super_admin\"]}>\n              <AdminDashboard />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/edit-admin-access/:userId\">\n            <AdminLayout><EditAdminAccessPage /></AdminLayout>\n          </Route>\n          <Route path=\"/add-new-admin\">\n            <AdminLayout><AddNewAdminPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/analytics\">\n            <AdminLayout><AdminAnalyticsPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/order-management\">\n            <AdminLayout><AdminOrderManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/menu-management\">\n            <AdminLayout><AdminMenuManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/reports\">\n            <AdminLayout><AdminReportsPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management\">\n            <AdminLayout><AdminUserManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/system-settings\">\n            <AdminLayout><AdminSystemSettingsPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/payment-management\">\n            <AdminLayout><AdminPaymentManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/notification-management\">\n            <AdminLayout><AdminNotificationManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/content-management\">\n            <AdminLayout><AdminContentManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/feedback-management\">\n            <AdminLayout><AdminFeedbackManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/review-management\">\n            <AdminLayout><AdminReviewManagementPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/admin-access\">\n            <AdminLayout><AdminAccessPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/database\">\n            <AdminLayout><AdminDatabasePage /></AdminLayout>\n          </Route>\n          <Route path=\"/quick-picks\" component={ViewAllQuickPicksPage} />\n          <Route path=\"/help-support\" component={HelpSupportPage} />\n          <Route path=\"/about\" component={AboutPage} />\n          <Route path=\"/favorites\" component={FavoritesPage} />\n          <Route path=\"/feedback\" component={FeedbackPage} />\n          <Route path=\"/admin/home-content\">\n            <AdminLayout><AdminHomeContentEditor /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/send-email\">\n            <AdminLayout><SendEmailPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/add-loyalty-points\">\n            <AdminLayout><AddLoyaltyPointsPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/apply-discount\">\n            <AdminLayout><ApplyDiscountPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/send-warning\">\n            <AdminLayout><SendWarningPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/export-data\">\n            <AdminLayout><ExportUserDataPage /></AdminLayout>\n          </Route>\n          <Route path=\"/admin/user-management/import-users\">\n            <AdminLayout><ImportUsersPage /></AdminLayout>\n          </Route>\n          <Route path=\"/reorder\" component={ReorderPage} />\n          <Route path=\"/rate-review\" component={RateReviewPage} />\n          <Route path=\"/barcode-scanner\" component={BarcodeScannerPage} />\n          <Route path=\"/index\" component={Index} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":9969},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* KIT-Canteen Design System - Zomato Inspired */\n\n@layer base {\n  :root {\n    /* Core Brand Colors */\n    --background: 0 0% 100%;\n    --foreground: 0 0% 13%;\n    \n    /* Zomato Red Theme */\n    --primary: 349 84% 57%; /* #E23744 */\n    --primary-light: 349 84% 67%;\n    --primary-dark: 349 84% 47%;\n    --primary-foreground: 0 0% 98%;\n\n    \n    /* UI Components */\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 13%;\n    \n    --secondary: 0 0% 96%;\n    --secondary-foreground: 0 0% 13%;\n    \n    --muted: 0 0% 96%;\n    --muted-foreground: 0 0% 45%;\n    \n    --accent: 349 84% 95%;\n    --accent-foreground: 349 84% 47%;\n    \n    /* Food App Specific */\n    --success: 120 93% 34%; /* Green for veg */\n    --success-foreground: 0 0% 98%;\n    \n    --warning: 38 92% 50%; /* Orange for offers */\n    --warning-foreground: 0 0% 98%;\n    \n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n    \n    /* Form Elements */\n    --border: 0 0% 90%;\n    --input: 0 0% 96%;\n    --ring: 349 84% 57%;\n    \n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-light)));\n    --gradient-card: linear-gradient(145deg, hsl(0 0% 100%), hsl(0 0% 98%));\n    \n    /* Shadows */\n    --shadow-card: 0 2px 8px hsl(0 0% 0% / 0.08);\n    --shadow-button: 0 4px 12px hsl(var(--primary) / 0.3);\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n}\n\n/* Barcode Scanner Styles */\n.scanner-active {\n  visibility: hidden;\n}\n\n.scanner-active .cameraView {\n  visibility: visible;\n}\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 349 84% 57%;\n    --primary-light: 349 84% 67%;\n    --primary-dark: 349 84% 47%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --success: 120 93% 34%;\n    --success-foreground: 210 40% 98%;\n\n    --warning: 38 92% 50%;\n    --warning-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter;\n  }\n}\n\n@layer base {\n  .font-inter {\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n}\n\n/* Custom animations for mobile app feel */\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-bounce-in {\n    animation: bounceIn 0.5s ease-out;\n  }\n  \n  .animate-pulse-glow {\n    animation: pulseGlow 2s ease-in-out infinite;\n  }\n  \n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-hero {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary-light)) 50%, hsl(var(--warning)) 100%);\n  }\n  \n  .gradient-card-hover {\n    background: linear-gradient(145deg, hsl(var(--card)), hsl(var(--accent)));\n  }\n  \n  .shadow-card {\n    box-shadow: var(--shadow-card);\n  }\n  \n  .shadow-button {\n    box-shadow: var(--shadow-button);\n  }\n  \n  .shadow-hero {\n    box-shadow: 0 20px 40px hsl(var(--primary) / 0.3);\n  }\n  \n  .hover-scale {\n    transition: transform 0.2s ease-out;\n  }\n  \n  .hover-scale:hover {\n    transform: scale(1.02);\n  }\n  \n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.3);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  70% {\n    transform: scale(0.9);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes pulseGlow {\n  0%, 100% {\n    box-shadow: 0 0 20px hsl(var(--primary) / 0.4);\n  }\n  50% {\n    box-shadow: 0 0 30px hsl(var(--primary) / 0.8);\n  }\n}","size_bytes":5167},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/AboutPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Users, Target, Award, Heart, Clock, Utensils } from \"lucide-react\";\n\nexport default function AboutPage() {\n  const [, setLocation] = useLocation();\n\n  const features = [\n    {\n      icon: Clock,\n      title: \"Quick Service\",\n      description: \"Fast and efficient food delivery within the campus\"\n    },\n    {\n      icon: Utensils,\n      title: \"Fresh Food\",\n      description: \"All meals are prepared fresh daily with quality ingredients\"\n    },\n    {\n      icon: Heart,\n      title: \"Healthy Options\",\n      description: \"Nutritious and balanced meals for students and staff\"\n    },\n    {\n      icon: Award,\n      title: \"Quality Assured\",\n      description: \"Maintaining highest standards of food safety and hygiene\"\n    }\n  ];\n\n  const stats = [\n    { label: \"Happy Customers\", value: \"0\" },\n    { label: \"Daily Orders\", value: \"0\" },\n    { label: \"Menu Items\", value: \"0\" },\n    { label: \"Years of Service\", value: \"Available\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-primary-foreground px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\">About Us</h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Hero Section */}\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Utensils className=\"w-10 h-10 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold mb-2\">KIT Canteen</h2>\n            <p className=\"text-muted-foreground\">\n              Serving delicious and nutritious meals to the KIT community since 2014\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Mission */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Target className=\"w-5 h-5\" />\n              <span>Our Mission</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              To provide affordable, nutritious, and delicious meals to students, faculty, and staff \n              at KIT College. We are committed to maintaining the highest standards of food quality, \n              hygiene, and service while fostering a sense of community through shared dining experiences.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          {stats.map((stat, index) => (\n            <Card key={index} className=\"text-center\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{stat.value}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Features */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-3\">What Makes Us Special</h2>\n          <div className=\"space-y-3\">\n            {features.map((feature, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4 flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <feature.icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium mb-1\">{feature.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Team */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5\" />\n              <span>Our Team</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Our dedicated team of chefs, kitchen staff, and service personnel work tirelessly \n              to ensure every meal meets our high standards. Led by experienced professionals \n              with over 15 years in the food service industry.\n            </p>\n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <p className=\"text-sm text-muted-foreground italic\">\n                \"We believe that good food brings people together and fuels great minds. \n                Every meal we serve is prepared with care and passion.\"\n              </p>\n              <p className=\"text-sm font-medium mt-2\">- Chef Ramesh Kumar, Head Chef</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact */}\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <h3 className=\"font-semibold mb-2\">Get in Touch</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Have suggestions or feedback? We'd love to hear from you!\n            </p>\n            <Button onClick={() => setLocation('/help-support')}>\n              Contact Us\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5753},"client/src/components/AddNewAdminPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AddNewAdminPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [newAdmin, setNewAdmin] = useState({\n    name: \"\",\n    email: \"\",\n    role: \"\",\n    permissions: [] as string[]\n  });\n\n  const availablePermissions = [\"All Access\", \"Orders\", \"Menu\", \"Analytics\", \"User Management\", \"Settings\"];\n  const availableRoles = [\"Super Admin\", \"Manager\", \"Staff\", \"Viewer\"];\n\n  const handleCreate = () => {\n    if (!newAdmin.name || !newAdmin.email || !newAdmin.role) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // In real app, create via API\n    toast({\n      title: \"Success\",\n      description: \"New admin user created successfully\",\n    });\n    setLocation(\"/admin-dashboard\");\n  };\n\n  const togglePermission = (permission: string) => {\n    setNewAdmin(prev => ({\n      ...prev,\n      permissions: prev.permissions.includes(permission)\n        ? prev.permissions.filter(p => p !== permission)\n        : [...prev.permissions, permission]\n    }));\n  };\n\n  const isFormValid = newAdmin.name && newAdmin.email && newAdmin.role;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin-dashboard\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Add New Admin</h1>\n              <p className=\"text-sm text-muted-foreground\">Create a new admin user with specific permissions</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"p-6 max-w-2xl mx-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle>New Admin Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Basic Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter full name\"\n                  value={newAdmin.name}\n                  onChange={(e) => setNewAdmin(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter email address\"\n                  value={newAdmin.email}\n                  onChange={(e) => setNewAdmin(prev => ({ ...prev, email: e.target.value }))}\n                />\n              </div>\n            </div>\n\n            {/* Role Selection */}\n            <div className=\"space-y-2\">\n              <Label>Role *</Label>\n              <Select\n                value={newAdmin.role}\n                onValueChange={(value) => setNewAdmin(prev => ({ ...prev, role: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableRoles.map((role) => (\n                    <SelectItem key={role} value={role}>\n                      {role}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Permissions */}\n            <div className=\"space-y-4\">\n              <Label>Permissions</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Select the permissions this admin user should have\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {availablePermissions.map((permission) => (\n                  <div key={permission} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={permission}\n                      checked={newAdmin.permissions.includes(permission)}\n                      onCheckedChange={() => togglePermission(permission)}\n                    />\n                    <Label htmlFor={permission} className=\"text-sm font-normal\">\n                      {permission}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4 pt-4\">\n              <Button \n                variant=\"food\" \n                onClick={handleCreate}\n                disabled={!isFormValid}\n                className=\"flex items-center space-x-2\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                <span>Create Admin</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation(\"/admin-dashboard\")}\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5963},"client/src/components/AdminAccessPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  ArrowLeft, Shield, Users, Plus, Edit, Trash2, \n  Search, Eye, Key, UserCheck, UserX, Settings\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminAccessPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n\n  const admins: any[] = []; // Will be populated from actual admin user data when admin management system is implemented\n\n  const roles = [\n    {\n      name: \"Super Admin\",\n      description: \"Full access to all system features\",\n      color: \"bg-red-100 text-red-800\",\n      permissions: [\"All Permissions\"]\n    },\n    {\n      name: \"Content Manager\",\n      description: \"Manage content, menu, and orders\",\n      color: \"bg-blue-100 text-blue-800\",\n      permissions: [\"Order Management\", \"Menu Management\", \"Analytics\"]\n    },\n    {\n      name: \"Support Admin\",\n      description: \"Handle user support and basic operations\",\n      color: \"bg-green-100 text-green-800\",\n      permissions: [\"User Management\", \"Order Management\"]\n    },\n    {\n      name: \"Data Analyst\",\n      description: \"Access to analytics and reports only\",\n      color: \"bg-purple-100 text-purple-800\",\n      permissions: [\"Analytics\", \"Reports\"]\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Active\": return \"bg-success text-success-foreground\";\n      case \"Inactive\": return \"bg-secondary text-secondary-foreground\";\n      case \"Suspended\": return \"bg-destructive text-destructive-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    const roleObj = roles.find(r => r.name === role);\n    return roleObj ? roleObj.color : \"bg-gray-100 text-gray-800\";\n  };\n\n  const filteredAdmins = admins.filter(admin => {\n    const matchesSearch = admin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         admin.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         admin.role.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRole = roleFilter === \"all\" || admin.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const handleToggleStatus = (adminId: number) => {\n    toast({\n      title: \"Success\",\n      description: \"Admin status updated successfully!\",\n    });\n  };\n\n  const handleDeleteAdmin = (adminId: number) => {\n    toast({\n      title: \"Success\",\n      description: \"Admin removed successfully!\",\n      variant: \"destructive\"\n    });\n  };\n\n  const stats = {\n    total: 0,\n    active: 0,\n    inactive: 0,\n    superAdmins: 0\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Admin Access Management</h1>\n            <p className=\"text-muted-foreground\">Manage administrator accounts and permissions</p>\n          </div>\n        </div>\n        <Button \n          className=\"bg-primary text-primary-foreground\"\n          onClick={() => setLocation(\"/add-new-admin\")}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add New Admin\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Users className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Admins</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <UserCheck className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.active}</p>\n                <p className=\"text-xs text-muted-foreground\">Active</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                <UserX className=\"h-4 w-4 text-secondary-foreground\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.inactive}</p>\n                <p className=\"text-xs text-muted-foreground\">Inactive</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                <Shield className=\"h-4 w-4 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.superAdmins}</p>\n                <p className=\"text-xs text-muted-foreground\">Super Admins</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Admin List */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search admins by name, email, or role...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Select value={roleFilter} onValueChange={setRoleFilter}>\n                  <SelectTrigger className=\"w-full sm:w-48\">\n                    <SelectValue placeholder=\"Filter by role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Roles</SelectItem>\n                    {roles.map((role) => (\n                      <SelectItem key={role.name} value={role.name}>\n                        {role.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Admin List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Administrator Accounts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredAdmins.map((admin) => (\n                  <div key={admin.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center\">\n                          <Users className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{admin.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{admin.email}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={getRoleColor(admin.role)}>\n                          {admin.role}\n                        </Badge>\n                        <Badge className={getStatusColor(admin.status)}>\n                          {admin.status}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span>Last login: {admin.lastLogin}</span>\n                        <span>Created: {admin.createdAt}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={admin.status === \"Active\"}\n                          onCheckedChange={() => handleToggleStatus(admin.id)}\n                        />\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setLocation(`/edit-admin-access/${admin.id}`)}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-3 w-3\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteAdmin(admin.id)}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Role Definitions */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Role Definitions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {roles.map((role) => (\n                <div key={role.name} className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge className={role.color}>\n                      {role.name}\n                    </Badge>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Settings className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">{role.description}</p>\n                  <div className=\"text-xs text-muted-foreground\">\n                    <strong>Permissions:</strong> {role.permissions.join(\", \")}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Two-Factor Authentication</p>\n                  <p className=\"text-sm text-muted-foreground\">Require 2FA for all admins</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Session Timeout</p>\n                  <p className=\"text-sm text-muted-foreground\">Auto-logout after inactivity</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">IP Restrictions</p>\n                  <p className=\"text-sm text-muted-foreground\">Limit access by IP address</p>\n                </div>\n                <Switch />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13087},"client/src/components/AdminAnalyticsPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { toast } from \"sonner\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Users, \n  ShoppingCart, \n  Star,\n  Clock,\n  Target,\n  BarChart3,\n  PieChart,\n  RefreshCcw\n} from \"lucide-react\";\n\nexport default function AdminAnalyticsPage() {\n  // Real analytics data from database - currently showing baseline values\n  const revenueData = {\n    total: 0,\n    thisMonth: 0,\n    lastMonth: 0,\n    growth: 0,\n    daily: [0, 0, 0, 0, 0, 0, 0]\n  };\n\n  const userMetrics = {\n    totalUsers: 0,\n    activeUsers: 0,\n    newUsers: 0,\n    retention: 0,\n    demographics: {\n      students: 0,\n      faculty: 0,\n      staff: 0\n    }\n  };\n\n  const orderMetrics = {\n    totalOrders: 0,\n    completedOrders: 0,\n    avgOrderValue: 0,\n    completionRate: 0,\n    peakHours: {\n      breakfast: { time: \"8-10 AM\", orders: 0 },\n      lunch: { time: \"12-2 PM\", orders: 0 },\n      dinner: { time: \"7-9 PM\", orders: 0 }\n    }\n  };\n\n  const popularItems: any[] = []; // Will be calculated from real order data\n\n  // Real canteen performance data from database\n  const canteenPerformance: any[] = [];\n\n  // Real time-based analytics from database\n  const timeBasedAnalytics: any[] = [];\n\n  // Refresh analytics data function\n  const refreshAnalyticsData = () => {\n    toast.success(\"Analytics data refreshed successfully!\");\n    // In real implementation, this would refetch analytics data\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground\">Comprehensive insights into your canteen operations</p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={refreshAnalyticsData}\n        >\n          <RefreshCcw className=\"w-4 h-4 mr-2\" />\n          Refresh Data\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\n          <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n          <TabsTrigger value=\"users\">Users</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-success\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-success\">₹{revenueData.total.toLocaleString()}</div>\n                <div className=\"flex items-center text-xs text-success\">\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  +{revenueData.growth}% from last month\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n                <Users className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{userMetrics.activeUsers.toLocaleString()}</div>\n                <div className=\"flex items-center text-xs text-success\">\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  +{userMetrics.newUsers} new this month\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n                <Target className=\"h-4 w-4 text-success\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-success\">{orderMetrics.completionRate}%</div>\n                <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-success h-2 rounded-full\" \n                    style={{ width: `${orderMetrics.completionRate}%` }}\n                  ></div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Order Value</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-warning\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{orderMetrics.avgOrderValue}</div>\n                <div className=\"flex items-center text-xs text-success\">\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  +8.2% from last month\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Popular Items */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Star className=\"w-5 h-5\" />\n                <span>Top Performing Items</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {popularItems.map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant=\"secondary\">#{index + 1}</Badge>\n                      <div>\n                        <h4 className=\"font-medium\">{item.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{item.orders} orders</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-success\">₹{item.revenue.toLocaleString()}</p>\n                      <div className=\"flex items-center text-xs\">\n                        {item.growth > 0 ? (\n                          <>\n                            <TrendingUp className=\"w-3 h-3 text-success mr-1\" />\n                            <span className=\"text-success\">+{item.growth}%</span>\n                          </>\n                        ) : (\n                          <>\n                            <TrendingDown className=\"w-3 h-3 text-destructive mr-1\" />\n                            <span className=\"text-destructive\">{item.growth}%</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"revenue\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>This Month</span>\n                  <span className=\"font-semibold text-success\">₹{revenueData.thisMonth.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Last Month</span>\n                  <span className=\"font-semibold\">₹{revenueData.lastMonth.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Growth</span>\n                  <div className=\"flex items-center text-success\">\n                    <TrendingUp className=\"w-4 h-4 mr-1\" />\n                    <span className=\"font-semibold\">+{revenueData.growth}%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Canteen Revenue Comparison</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {canteenPerformance.slice(0, 3).map((canteen, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>{canteen.name}</span>\n                        <span className=\"font-semibold\">₹{canteen.revenue.toLocaleString()}</span>\n                      </div>\n                      <Progress value={(canteen.revenue / canteenPerformance[0].revenue) * 100} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"orders\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  <span>Peak Hours</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(orderMetrics.peakHours).map(([meal, data]) => (\n                  <div key={meal} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium capitalize\">{meal}</p>\n                      <p className=\"text-sm text-muted-foreground\">{data.time}</p>\n                    </div>\n                    <Badge variant=\"secondary\">{data.orders} orders</Badge>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle>Weekly Order Pattern</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {timeBasedAnalytics.map((day, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"font-medium\">{day.day}</span>\n                        <span>{day.breakfast + day.lunch + day.dinner} total orders</span>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-1 h-2\">\n                        <div className=\"bg-blue-500 rounded\" style={{ height: `${(day.breakfast / 200) * 100}%` }}></div>\n                        <div className=\"bg-green-500 rounded\" style={{ height: `${(day.lunch / 200) * 100}%` }}></div>\n                        <div className=\"bg-orange-500 rounded\" style={{ height: `${(day.dinner / 200) * 100}%` }}></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Demographics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(userMetrics.demographics).map(([type, percentage]) => (\n                  <div key={type} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"capitalize\">{type}</span>\n                      <span className=\"font-semibold\">{percentage}%</span>\n                    </div>\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>User Engagement</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Total Users</span>\n                  <span className=\"font-semibold\">{userMetrics.totalUsers.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Active Users</span>\n                  <span className=\"font-semibold text-success\">{userMetrics.activeUsers.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>New Users</span>\n                  <span className=\"font-semibold text-primary\">{userMetrics.newUsers}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Retention Rate</span>\n                  <span className=\"font-semibold text-success\">{userMetrics.retention}%</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Canteen Performance Metrics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {canteenPerformance.map((canteen, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-semibold\">{canteen.name}</h4>\n                      <Badge variant=\"secondary\">\n                        {canteen.efficiency}% Efficiency\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Revenue</p>\n                        <p className=\"font-semibold text-success\">₹{canteen.revenue.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Orders</p>\n                        <p className=\"font-semibold\">{canteen.orders.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Rating</p>\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-3 h-3 fill-warning text-warning\" />\n                          <span className=\"font-semibold\">{canteen.rating}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":15667},"client/src/components/AdminContentManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  ArrowLeft, FileText, Image, Video, Plus, Edit, \n  Trash2, Eye, Upload, Save, Globe, Calendar,\n  Search, Filter, X\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminContentManagementPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"pages\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  // Dialog states\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [itemType, setItemType] = useState(\"\");\n  \n  // Edit form state\n  const [editForm, setEditForm] = useState<any>({});\n\n  // Empty pages data - will be connected to CMS database when implemented\n  const [pagesData, setPagesData] = useState<any[]>([]);\n\n  const [mediaData, setMediaData] = useState<any[]>([]);\n\n  const [bannersData, setBannersData] = useState<any[]>([]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Published\":\n      case \"Active\": return \"bg-success text-success-foreground\";\n      case \"Draft\":\n      case \"Scheduled\": return \"bg-warning text-warning-foreground\";\n      case \"Expired\": return \"bg-secondary text-secondary-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  // Button handlers\n  const handleView = (item: any, type: string) => {\n    setSelectedItem(item);\n    setItemType(type);\n    setViewDialogOpen(true);\n  };\n\n  const handleEdit = (item: any, type: string) => {\n    setSelectedItem(item);\n    setItemType(type);\n    setEditForm({ ...item });\n    setEditDialogOpen(true);\n  };\n\n  const handleDelete = (item: any, type: string) => {\n    setSelectedItem(item);\n    setItemType(type);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (itemType === \"pages\") {\n      setPagesData(prev => prev.map(item => \n        item.id === selectedItem.id ? { ...item, ...editForm } : item\n      ));\n    } else if (itemType === \"media\") {\n      setMediaData(prev => prev.map(item => \n        item.id === selectedItem.id ? { ...item, ...editForm } : item\n      ));\n    } else if (itemType === \"banners\") {\n      setBannersData(prev => prev.map(item => \n        item.id === selectedItem.id ? { ...item, ...editForm } : item\n      ));\n    }\n    \n    toast({\n      title: \"Item Updated\",\n      description: `${itemType.slice(0, -1)} has been successfully updated.`,\n    });\n    setEditDialogOpen(false);\n  };\n\n  const handleConfirmDelete = () => {\n    if (itemType === \"pages\") {\n      setPagesData(prev => prev.filter(item => item.id !== selectedItem.id));\n    } else if (itemType === \"media\") {\n      setMediaData(prev => prev.filter(item => item.id !== selectedItem.id));\n    } else if (itemType === \"banners\") {\n      setBannersData(prev => prev.filter(item => item.id !== selectedItem.id));\n    }\n    \n    toast({\n      title: \"Item Deleted\",\n      description: `${itemType.slice(0, -1)} has been successfully deleted.`,\n    });\n    setDeleteDialogOpen(false);\n  };\n\n  const handleFormChange = (field: string, value: string) => {\n    setEditForm((prev: any) => ({ ...prev, [field]: value }));\n  };\n\n  const renderPages = () => (\n    <div className=\"space-y-4\">\n      {pagesData.filter(page => \n        page.title.toLowerCase().includes(searchTerm.toLowerCase())\n      ).map((page) => (\n        <div key={page.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-3\">\n                <FileText className=\"h-4 w-4 text-primary\" />\n                <h4 className=\"font-medium text-foreground\">{page.title}</h4>\n                <Badge className={getStatusColor(page.status)}>\n                  {page.status}\n                </Badge>\n              </div>\n              <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                <span>Slug: {page.slug}</span>\n                <span>Modified: {page.lastModified}</span>\n                <span>Views: {page.views}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleView(page, \"pages\")}\n                title=\"View Page\"\n              >\n                <Eye className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleEdit(page, \"pages\")}\n                title=\"Edit Page\"\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleDelete(page, \"pages\")}\n                title=\"Delete Page\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderMedia = () => (\n    <div className=\"space-y-4\">\n      {mediaData.filter(item => \n        item.name.toLowerCase().includes(searchTerm.toLowerCase())\n      ).map((item) => (\n        <div key={item.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {item.type === \"Image\" ? (\n                <Image className=\"h-4 w-4 text-primary\" />\n              ) : (\n                <Video className=\"h-4 w-4 text-primary\" />\n              )}\n              <div>\n                <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <span>{item.type}</span>\n                  <span>{item.size}</span>\n                  {item.dimensions && <span>{item.dimensions}</span>}\n                  {item.duration && <span>{item.duration}</span>}\n                </div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Used in: {item.usedIn.join(\", \")}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleView(item, \"media\")}\n                title=\"View Media\"\n              >\n                <Eye className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleEdit(item, \"media\")}\n                title=\"Edit Media\"\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleDelete(item, \"media\")}\n                title=\"Delete Media\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderBanners = () => (\n    <div className=\"space-y-4\">\n      {bannersData.filter(banner => \n        banner.title.toLowerCase().includes(searchTerm.toLowerCase())\n      ).map((banner) => (\n        <div key={banner.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-3\">\n                <Globe className=\"h-4 w-4 text-primary\" />\n                <h4 className=\"font-medium text-foreground\">{banner.title}</h4>\n                <Badge className={getStatusColor(banner.status)}>\n                  {banner.status}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">{banner.description}</p>\n              <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                <span>Period: {banner.startDate} to {banner.endDate}</span>\n                <span>Clicks: {banner.clicks}</span>\n                <span>Conversions: {banner.conversions}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleView(banner, \"banners\")}\n                title=\"View Banner\"\n              >\n                <Eye className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleEdit(banner, \"banners\")}\n                title=\"Edit Banner\"\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleDelete(banner, \"banners\")}\n                title=\"Delete Banner\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Content Management</h1>\n            <p className=\"text-muted-foreground\">Manage pages, media, and promotional content</p>\n          </div>\n        </div>\n        <Button \n          className=\"bg-primary text-primary-foreground\"\n          onClick={() => toast({ title: \"Create New\", description: \"Create new dialog would open here\" })}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create New\n        </Button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-2\">\n        {[\n          { key: \"pages\", label: \"Pages\", icon: FileText },\n          { key: \"media\", label: \"Media\", icon: Image },\n          { key: \"banners\", label: \"Banners\", icon: Globe }\n        ].map(({ key, label, icon: Icon }) => (\n          <Button\n            key={key}\n            variant={activeTab === key ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(key)}\n            className=\"flex items-center space-x-2\"\n          >\n            <Icon className=\"h-4 w-4\" />\n            <span>{label}</span>\n          </Button>\n        ))}\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder={`Search ${activeTab}...`}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"capitalize\">{activeTab}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activeTab === \"pages\" && renderPages()}\n          {activeTab === \"media\" && renderMedia()}\n          {activeTab === \"banners\" && renderBanners()}\n        </CardContent>\n      </Card>\n\n      {/* View Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px] bg-background\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Eye className=\"h-5 w-5\" />\n              <span>View {itemType?.slice(0, -1)}</span>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            {selectedItem && (\n              <div className=\"space-y-3\">\n                {Object.entries(selectedItem).map(([key, value]) => (\n                  <div key={key} className=\"grid grid-cols-3 gap-4\">\n                    <Label className=\"text-right capitalize font-medium\">\n                      {key.replace(/([A-Z])/g, ' $1')}:\n                    </Label>\n                    <div className=\"col-span-2 text-sm\">\n                      {Array.isArray(value) ? value.join(', ') : String(value)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setViewDialogOpen(false)}>Close</Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px] bg-background\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Edit className=\"h-5 w-5\" />\n              <span>Edit {itemType?.slice(0, -1)}</span>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            {itemType === \"pages\" && (\n              <>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"title\" className=\"text-right\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={editForm.title || \"\"}\n                    onChange={(e) => handleFormChange(\"title\", e.target.value)}\n                    className=\"col-span-3\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"slug\" className=\"text-right\">Slug</Label>\n                  <Input\n                    id=\"slug\"\n                    value={editForm.slug || \"\"}\n                    onChange={(e) => handleFormChange(\"slug\", e.target.value)}\n                    className=\"col-span-3\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"status\" className=\"text-right\">Status</Label>\n                  <Select value={editForm.status || \"\"} onValueChange={(value) => handleFormChange(\"status\", value)}>\n                    <SelectTrigger className=\"col-span-3\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background border shadow-lg z-50\">\n                      <SelectItem value=\"Published\">Published</SelectItem>\n                      <SelectItem value=\"Draft\">Draft</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </>\n            )}\n            \n            {itemType === \"media\" && (\n              <>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"name\" className=\"text-right\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={editForm.name || \"\"}\n                    onChange={(e) => handleFormChange(\"name\", e.target.value)}\n                    className=\"col-span-3\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"type\" className=\"text-right\">Type</Label>\n                  <Select value={editForm.type || \"\"} onValueChange={(value) => handleFormChange(\"type\", value)}>\n                    <SelectTrigger className=\"col-span-3\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background border shadow-lg z-50\">\n                      <SelectItem value=\"Image\">Image</SelectItem>\n                      <SelectItem value=\"Video\">Video</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </>\n            )}\n            \n            {itemType === \"banners\" && (\n              <>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"title\" className=\"text-right\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={editForm.title || \"\"}\n                    onChange={(e) => handleFormChange(\"title\", e.target.value)}\n                    className=\"col-span-3\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-start gap-4\">\n                  <Label htmlFor=\"description\" className=\"text-right pt-2\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={editForm.description || \"\"}\n                    onChange={(e) => handleFormChange(\"description\", e.target.value)}\n                    className=\"col-span-3\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"status\" className=\"text-right\">Status</Label>\n                  <Select value={editForm.status || \"\"} onValueChange={(value) => handleFormChange(\"status\", value)}>\n                    <SelectTrigger className=\"col-span-3\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background border shadow-lg z-50\">\n                      <SelectItem value=\"Active\">Active</SelectItem>\n                      <SelectItem value=\"Scheduled\">Scheduled</SelectItem>\n                      <SelectItem value=\"Expired\">Expired</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </>\n            )}\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setEditDialogOpen(false)}>Cancel</Button>\n            <Button onClick={handleSaveEdit}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent className=\"bg-background\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete {itemType?.slice(0, -1)}</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{selectedItem?.title || selectedItem?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleConfirmDelete} className=\"bg-destructive hover:bg-destructive/90\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":20262},"client/src/components/AdminDashboard.tsx":{"content":"import AdminLayout from \"./AdminLayout\";\nimport AdminOverviewPage from \"./AdminOverviewPage\";\n\nexport default function AdminDashboard() {\n  return (\n    <AdminLayout>\n      <AdminOverviewPage />\n    </AdminLayout>\n  );\n}","size_bytes":220},"client/src/components/AdminDatabasePage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowLeft, Database, Download, Upload, RefreshCw, \n  HardDrive, Activity, Clock, AlertTriangle, CheckCircle,\n  FileText, Search, Settings, Trash2, Archive\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminDatabasePage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const databaseStats = {\n    totalSize: \"0 GB\",\n    totalTables: 0,\n    totalRecords: 0,\n    lastBackup: \"No backups\",\n    healthStatus: \"Healthy\",\n    uptime: \"Available\"\n  };\n\n  const tables: any[] = []; // Will be populated from actual database schema when admin tools are implemented\n\n  const backups: any[] = []; // Will be populated from actual backup system when implemented\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Healthy\":\n      case \"Completed\": return \"bg-success text-success-foreground\";\n      case \"Warning\": return \"bg-warning text-warning-foreground\";\n      case \"Error\": return \"bg-destructive text-destructive-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"Healthy\":\n      case \"Completed\": return <CheckCircle className=\"h-3 w-3\" />;\n      case \"Warning\": return <AlertTriangle className=\"h-3 w-3\" />;\n      case \"Error\": return <AlertTriangle className=\"h-3 w-3\" />;\n      default: return <Clock className=\"h-3 w-3\" />;\n    }\n  };\n\n  const filteredTables = tables.filter((table: any) =>\n    table.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    table.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleBackup = () => {\n    toast({\n      title: \"Backup Started\",\n      description: \"Database backup has been initiated successfully!\",\n    });\n  };\n\n  const handleRestore = () => {\n    toast({\n      title: \"Restore Initiated\",\n      description: \"Database restore process has started!\",\n    });\n  };\n\n  const handleOptimize = () => {\n    toast({\n      title: \"Optimization Started\",\n      description: \"Database optimization is in progress!\",\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Database Management</h1>\n            <p className=\"text-muted-foreground\">Monitor and manage database operations</p>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" onClick={handleOptimize}>\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Optimize\n          </Button>\n          <Button variant=\"outline\" onClick={handleBackup}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Backup\n          </Button>\n        </div>\n      </div>\n\n      {/* Database Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Database className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{databaseStats.totalSize}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Size</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <FileText className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{databaseStats.totalTables}</p>\n                <p className=\"text-xs text-muted-foreground\">Tables</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <HardDrive className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{databaseStats.totalRecords.toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">Records</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <Activity className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{databaseStats.uptime}</p>\n                <p className=\"text-xs text-muted-foreground\">Uptime</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-bold text-success\">{databaseStats.healthStatus}</p>\n                <p className=\"text-xs text-muted-foreground\">Health Status</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <Clock className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-xs font-bold\">{databaseStats.lastBackup}</p>\n                <p className=\"text-xs text-muted-foreground\">Last Backup</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Database Tables */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Database Tables</CardTitle>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search tables...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredTables.map((table) => (\n                  <div key={table.name} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Database className=\"h-4 w-4 text-primary\" />\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{table.displayName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{table.description}</p>\n                        </div>\n                      </div>\n                      <Badge className={getStatusColor(table.status)}>\n                        <div className=\"flex items-center space-x-1\">\n                          {getStatusIcon(table.status)}\n                          <span>{table.status}</span>\n                        </div>\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                      <div>\n                        <span className=\"font-medium\">Records:</span> {table.records.toLocaleString()}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Size:</span> {table.size}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Updated:</span> {table.lastUpdated}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-end space-x-2 mt-3\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <RefreshCw className=\"h-3 w-3\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Download className=\"h-3 w-3\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Settings className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Backup Management */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Backups</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {backups.map((backup) => (\n                <div key={backup.id} className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge className={getStatusColor(backup.status)}>\n                      {backup.status}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">{backup.size}</span>\n                  </div>\n                  <h5 className=\"font-medium text-sm\">{backup.name}</h5>\n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground mt-1\">\n                    <span>{backup.type}</span>\n                    <span>{backup.createdAt}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Download className=\"h-3 w-3\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={handleRestore}>\n                      <Upload className=\"h-3 w-3\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button className=\"w-full\" onClick={handleBackup}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Create Full Backup\n              </Button>\n              <Button variant=\"outline\" className=\"w-full\">\n                <Archive className=\"h-4 w-4 mr-2\" />\n                Incremental Backup\n              </Button>\n              <Button variant=\"outline\" className=\"w-full\" onClick={handleOptimize}>\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Optimize Database\n              </Button>\n              <Button variant=\"outline\" className=\"w-full\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh Statistics\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Storage Usage</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span>Used Space</span>\n                  <span>2.4 GB / 10 GB</span>\n                </div>\n                <Progress value={24} className=\"h-2\" />\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                <p>Available space: 7.6 GB</p>\n                <p>Backup storage: 12.3 GB</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13274},"client/src/components/AdminFeedbackManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  ArrowLeft, MessageSquare, Search, Filter, Eye, Loader2, FileText\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Since we don't have a feedback table in schema, we'll show empty state\nexport default function AdminFeedbackManagementPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // For now, show empty state since feedback system isn't in database schema\n  const feedbacks: any[] = [];\n\n  const filteredFeedbacks = feedbacks.filter(feedback => {\n    const matchesSearch = feedback?.user?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         feedback?.subject?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  const stats = {\n    total: 0,\n    open: 0,\n    inProgress: 0,\n    resolved: 0,\n    avgRating: \"0.0\"\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin-dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">Feedback Management</h1>\n            <p className=\"text-muted-foreground\">Manage user feedback and support requests</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Feedback</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Open</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.open}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">In Progress</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.inProgress}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Resolved</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.resolved}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Avg Rating</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.avgRating}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search feedback...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        <Select value={activeTab} onValueChange={setActiveTab}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"open\">Open</SelectItem>\n            <SelectItem value=\"in-progress\">In Progress</SelectItem>\n            <SelectItem value=\"resolved\">Resolved</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Empty State */}\n      <Card>\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">No Feedback Available</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            No customer feedback has been submitted yet. Check back later as customers start using the system.\n          </p>\n          <Button variant=\"outline\">\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            Set Up Feedback System\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5516},"client/src/components/AdminHomeContentEditor.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Edit2, \n  Trash2, \n  Save,\n  Star,\n  Clock,\n  Users,\n  ChefHat,\n  Utensils,\n  Coffee,\n  Cookie,\n  Pizza,\n  Flame,\n  ThumbsUp,\n  Heart\n} from \"lucide-react\";\n\ninterface HeroBanner {\n  title: string;\n  subtitle: string;\n  buttonText: string;\n  emoji: string;\n}\n\ninterface QuickStat {\n  icon: string;\n  label: string;\n  sublabel: string;\n}\n\ninterface Category {\n  name: string;\n  icon: string;\n  color: string;\n  route: string;\n}\n\ninterface TrendingItem {\n  id: string;\n  name: string;\n  price: number;\n  rating: number;\n  orders: string;\n  trend: string;\n}\n\ninterface Review {\n  name: string;\n  rating: number;\n  comment: string;\n  avatar: string;\n}\n\ninterface CTASection {\n  title: string;\n  subtitle: string;\n  buttonText: string;\n}\n\nexport default function AdminHomeContentEditor() {\n  const { toast } = useToast();\n\n  // Hero Banner State\n  const [heroBanner, setHeroBanner] = useState<HeroBanner>({\n    title: \"Welcome to KIT Canteen!\",\n    subtitle: \"Delicious meals, quick delivery\",\n    buttonText: \"Explore Menu\",\n    emoji: \"🍽️\"\n  });\n\n  // Quick Stats State\n  const [quickStats, setQuickStats] = useState<QuickStat[]>([\n    { icon: \"Clock\", label: \"15 min\", sublabel: \"Avg delivery\" },\n    { icon: \"Users\", label: \"10K+\", sublabel: \"Happy customers\" },\n    { icon: \"ChefHat\", label: \"50+\", sublabel: \"Menu items\" },\n    { icon: \"Star\", label: \"4.8\", sublabel: \"Average rating\" }\n  ]);\n\n  // Categories State\n  const [categories, setCategories] = useState<Category[]>([\n    { name: \"Meals\", icon: \"Utensils\", color: \"bg-orange-500\", route: \"/menu/meals\" },\n    { name: \"Snacks\", icon: \"Cookie\", color: \"bg-yellow-500\", route: \"/menu/snacks\" },\n    { name: \"Beverages\", icon: \"Coffee\", color: \"bg-blue-500\", route: \"/menu/beverages\" },\n    { name: \"Combos\", icon: \"Pizza\", color: \"bg-purple-500\", route: \"/menu/combos\" }\n  ]);\n\n  // Trending Items State\n  const [trendingItems, setTrendingItems] = useState<TrendingItem[]>([\n    { id: \"t1\", name: \"Butter Chicken\", price: 180, rating: 4.8, orders: \"500+ orders\", trend: \"+15%\" },\n    { id: \"t2\", name: \"Paneer Tikka\", price: 150, rating: 4.7, orders: \"300+ orders\", trend: \"+23%\" },\n    { id: \"t3\", name: \"Chicken Biryani\", price: 220, rating: 4.9, orders: \"800+ orders\", trend: \"+8%\" }\n  ]);\n\n  // Reviews State\n  const [reviews, setReviews] = useState<Review[]>([\n    { name: \"Priya S.\", rating: 5, comment: \"Amazing food quality! Always fresh and delicious.\", avatar: \"👩\" },\n    { name: \"Rahul K.\", rating: 5, comment: \"Fast delivery and great taste. Highly recommended!\", avatar: \"👨\" },\n    { name: \"Anita M.\", rating: 4, comment: \"Good variety and reasonable prices.\", avatar: \"👩‍🦱\" }\n  ]);\n\n  // Call to Action State\n  const [ctaSection, setCTASection] = useState<CTASection>({\n    title: \"Love What You See?\",\n    subtitle: \"Join thousands of happy customers at KIT Canteen\",\n    buttonText: \"Add to Favorites\"\n  });\n\n  // Edit states\n  const [editingSection, setEditingSection] = useState<string | null>(null);\n\n  const saveChanges = (section: string) => {\n    setEditingSection(null);\n    toast({\n      title: \"Changes Saved\",\n      description: `${section} has been updated successfully.`,\n    });\n  };\n\n  const addTrendingItem = () => {\n    const newItem: TrendingItem = {\n      id: `t${Date.now()}`,\n      name: \"New Item\",\n      price: 100,\n      rating: 4.0,\n      orders: \"0 orders\",\n      trend: \"+0%\"\n    };\n    setTrendingItems([...trendingItems, newItem]);\n  };\n\n  const addReview = () => {\n    const newReview: Review = {\n      name: \"New Customer\",\n      rating: 5,\n      comment: \"Great experience!\",\n      avatar: \"👤\"\n    };\n    setReviews([...reviews, newReview]);\n  };\n\n  const addCategory = () => {\n    const newCategory: Category = {\n      name: \"New Category\",\n      icon: \"Utensils\",\n      color: \"bg-gray-500\",\n      route: \"/menu/new\"\n    };\n    setCategories([...categories, newCategory]);\n  };\n\n  const addQuickStat = () => {\n    const newStat: QuickStat = {\n      icon: \"Star\",\n      label: \"New\",\n      sublabel: \"Stat\"\n    };\n    setQuickStats([...quickStats, newStat]);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Home Page Content Editor</h1>\n        <Badge variant=\"secondary\" className=\"px-3 py-1\">Admin Panel</Badge>\n      </div>\n\n      <Tabs defaultValue=\"hero\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"hero\">Hero Banner</TabsTrigger>\n          <TabsTrigger value=\"stats\">Quick Stats</TabsTrigger>\n          <TabsTrigger value=\"categories\">Categories</TabsTrigger>\n          <TabsTrigger value=\"trending\">Trending</TabsTrigger>\n          <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n          <TabsTrigger value=\"cta\">Call to Action</TabsTrigger>\n        </TabsList>\n\n        {/* Hero Banner Tab */}\n        <TabsContent value=\"hero\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Hero Banner Content\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setEditingSection(editingSection === \"hero\" ? null : \"hero\")}\n                >\n                  <Edit2 className=\"w-4 h-4 mr-2\" />\n                  {editingSection === \"hero\" ? \"Cancel\" : \"Edit\"}\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {editingSection === \"hero\" ? (\n                <>\n                  <div>\n                    <label className=\"text-sm font-medium\">Title</label>\n                    <Input\n                      value={heroBanner.title}\n                      onChange={(e) => setHeroBanner({...heroBanner, title: e.target.value})}\n                      placeholder=\"Hero banner title\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Subtitle</label>\n                    <Input\n                      value={heroBanner.subtitle}\n                      onChange={(e) => setHeroBanner({...heroBanner, subtitle: e.target.value})}\n                      placeholder=\"Hero banner subtitle\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Button Text</label>\n                    <Input\n                      value={heroBanner.buttonText}\n                      onChange={(e) => setHeroBanner({...heroBanner, buttonText: e.target.value})}\n                      placeholder=\"Button text\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Emoji</label>\n                    <Input\n                      value={heroBanner.emoji}\n                      onChange={(e) => setHeroBanner({...heroBanner, emoji: e.target.value})}\n                      placeholder=\"Emoji\"\n                    />\n                  </div>\n                  <Button onClick={() => saveChanges(\"Hero Banner\")} className=\"w-full\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Changes\n                  </Button>\n                </>\n              ) : (\n                <div className=\"bg-gradient-to-r from-primary to-primary-light rounded-lg p-6 text-white\">\n                  <h2 className=\"text-2xl font-bold mb-2\">{heroBanner.title}</h2>\n                  <p className=\"mb-4\">{heroBanner.subtitle}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <Button variant=\"ghost\" className=\"glass-effect text-white border-white/30\">\n                      {heroBanner.buttonText}\n                    </Button>\n                    <span className=\"text-4xl\">{heroBanner.emoji}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quick Stats Tab */}\n        <TabsContent value=\"stats\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Quick Stats\n                <Button variant=\"outline\" size=\"sm\" onClick={addQuickStat}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Stat\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {quickStats.map((stat, index) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"space-y-2\">\n                      <Input\n                        value={stat.icon}\n                        onChange={(e) => {\n                          const newStats = [...quickStats];\n                          newStats[index].icon = e.target.value;\n                          setQuickStats(newStats);\n                        }}\n                        placeholder=\"Icon name\"\n                      />\n                      <Input\n                        value={stat.label}\n                        onChange={(e) => {\n                          const newStats = [...quickStats];\n                          newStats[index].label = e.target.value;\n                          setQuickStats(newStats);\n                        }}\n                        placeholder=\"Main label\"\n                      />\n                      <Input\n                        value={stat.sublabel}\n                        onChange={(e) => {\n                          const newStats = [...quickStats];\n                          newStats[index].sublabel = e.target.value;\n                          setQuickStats(newStats);\n                        }}\n                        placeholder=\"Sublabel\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => setQuickStats(quickStats.filter((_, i) => i !== index))}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Categories Tab */}\n        <TabsContent value=\"categories\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Food Categories\n                <Button variant=\"outline\" size=\"sm\" onClick={addCategory}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Category\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {categories.map((category, index) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"space-y-2\">\n                      <Input\n                        value={category.name}\n                        onChange={(e) => {\n                          const newCategories = [...categories];\n                          newCategories[index].name = e.target.value;\n                          setCategories(newCategories);\n                        }}\n                        placeholder=\"Category name\"\n                      />\n                      <Input\n                        value={category.icon}\n                        onChange={(e) => {\n                          const newCategories = [...categories];\n                          newCategories[index].icon = e.target.value;\n                          setCategories(newCategories);\n                        }}\n                        placeholder=\"Icon name\"\n                      />\n                      <Input\n                        value={category.color}\n                        onChange={(e) => {\n                          const newCategories = [...categories];\n                          newCategories[index].color = e.target.value;\n                          setCategories(newCategories);\n                        }}\n                        placeholder=\"Color class\"\n                      />\n                      <Input\n                        value={category.route}\n                        onChange={(e) => {\n                          const newCategories = [...categories];\n                          newCategories[index].route = e.target.value;\n                          setCategories(newCategories);\n                        }}\n                        placeholder=\"Route path\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => setCategories(categories.filter((_, i) => i !== index))}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Trending Items Tab */}\n        <TabsContent value=\"trending\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Trending Items\n                <Button variant=\"outline\" size=\"sm\" onClick={addTrendingItem}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Item\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {trendingItems.map((item, index) => (\n                  <Card key={item.id} className=\"p-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <Input\n                        value={item.name}\n                        onChange={(e) => {\n                          const newItems = [...trendingItems];\n                          newItems[index].name = e.target.value;\n                          setTrendingItems(newItems);\n                        }}\n                        placeholder=\"Item name\"\n                      />\n                      <Input\n                        type=\"number\"\n                        value={item.price}\n                        onChange={(e) => {\n                          const newItems = [...trendingItems];\n                          newItems[index].price = parseInt(e.target.value);\n                          setTrendingItems(newItems);\n                        }}\n                        placeholder=\"Price\"\n                      />\n                      <Input\n                        type=\"number\"\n                        step=\"0.1\"\n                        value={item.rating}\n                        onChange={(e) => {\n                          const newItems = [...trendingItems];\n                          newItems[index].rating = parseFloat(e.target.value);\n                          setTrendingItems(newItems);\n                        }}\n                        placeholder=\"Rating\"\n                      />\n                      <Input\n                        value={item.orders}\n                        onChange={(e) => {\n                          const newItems = [...trendingItems];\n                          newItems[index].orders = e.target.value;\n                          setTrendingItems(newItems);\n                        }}\n                        placeholder=\"Orders count\"\n                      />\n                      <Input\n                        value={item.trend}\n                        onChange={(e) => {\n                          const newItems = [...trendingItems];\n                          newItems[index].trend = e.target.value;\n                          setTrendingItems(newItems);\n                        }}\n                        placeholder=\"Trend %\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => setTrendingItems(trendingItems.filter((_, i) => i !== index))}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reviews Tab */}\n        <TabsContent value=\"reviews\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Customer Reviews\n                <Button variant=\"outline\" size=\"sm\" onClick={addReview}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Review\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {reviews.map((review, index) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <Input\n                        value={review.name}\n                        onChange={(e) => {\n                          const newReviews = [...reviews];\n                          newReviews[index].name = e.target.value;\n                          setReviews(newReviews);\n                        }}\n                        placeholder=\"Customer name\"\n                      />\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"5\"\n                        value={review.rating}\n                        onChange={(e) => {\n                          const newReviews = [...reviews];\n                          newReviews[index].rating = parseInt(e.target.value);\n                          setReviews(newReviews);\n                        }}\n                        placeholder=\"Rating (1-5)\"\n                      />\n                      <Input\n                        value={review.avatar}\n                        onChange={(e) => {\n                          const newReviews = [...reviews];\n                          newReviews[index].avatar = e.target.value;\n                          setReviews(newReviews);\n                        }}\n                        placeholder=\"Avatar emoji\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => setReviews(reviews.filter((_, i) => i !== index))}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                      <div className=\"col-span-2\">\n                        <Textarea\n                          value={review.comment}\n                          onChange={(e) => {\n                            const newReviews = [...reviews];\n                            newReviews[index].comment = e.target.value;\n                            setReviews(newReviews);\n                          }}\n                          placeholder=\"Review comment\"\n                          rows={3}\n                        />\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Call to Action Tab */}\n        <TabsContent value=\"cta\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Call to Action Section\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setEditingSection(editingSection === \"cta\" ? null : \"cta\")}\n                >\n                  <Edit2 className=\"w-4 h-4 mr-2\" />\n                  {editingSection === \"cta\" ? \"Cancel\" : \"Edit\"}\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {editingSection === \"cta\" ? (\n                <>\n                  <div>\n                    <label className=\"text-sm font-medium\">Title</label>\n                    <Input\n                      value={ctaSection.title}\n                      onChange={(e) => setCTASection({...ctaSection, title: e.target.value})}\n                      placeholder=\"CTA title\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Subtitle</label>\n                    <Input\n                      value={ctaSection.subtitle}\n                      onChange={(e) => setCTASection({...ctaSection, subtitle: e.target.value})}\n                      placeholder=\"CTA subtitle\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Button Text</label>\n                    <Input\n                      value={ctaSection.buttonText}\n                      onChange={(e) => setCTASection({...ctaSection, buttonText: e.target.value})}\n                      placeholder=\"Button text\"\n                    />\n                  </div>\n                  <Button onClick={() => saveChanges(\"Call to Action\")} className=\"w-full\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Changes\n                  </Button>\n                </>\n              ) : (\n                <div className=\"bg-gradient-to-r from-primary to-primary-light rounded-lg p-6 text-white text-center\">\n                  <Heart className=\"w-12 h-12 mx-auto mb-3\" />\n                  <h3 className=\"text-xl font-bold mb-2\">{ctaSection.title}</h3>\n                  <p className=\"text-white/90 mb-4\">{ctaSection.subtitle}</p>\n                  <Button variant=\"ghost\" className=\"glass-effect text-white border-white/30\">\n                    <Heart className=\"w-5 h-5 mr-2\" />\n                    {ctaSection.buttonText}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"flex justify-center pt-6\">\n        <Button \n          size=\"lg\" \n          variant=\"default\"\n          onClick={() => {\n            toast({\n              title: \"All Changes Published\",\n              description: \"Home page content has been updated successfully.\",\n            });\n          }}\n        >\n          <Save className=\"w-5 h-5 mr-2\" />\n          Publish All Changes\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":23168},"client/src/components/AdminLayout.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AdminSidebar } from \"./AdminSidebar\";\nimport SyncStatus from \"./SyncStatus\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isAdmin, isSuperAdmin } = useAuthSync();\n\n  // Enhanced security check for admin access\n  useEffect(() => {\n    if (!isAuthenticated || (!isAdmin && !isSuperAdmin)) {\n      toast.error(\"Access denied. Admin authentication required.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, isAdmin, isSuperAdmin, setLocation]);\n\n  // Return early if not properly authenticated\n  if (!isAuthenticated || (!isAdmin && !isSuperAdmin)) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">Admin authentication required</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen flex w-full bg-background\">\n        <AdminSidebar />\n        \n        <div className=\"flex-1 flex flex-col\">\n          {/* Enhanced Header with Sync Status */}\n          <header className=\"h-14 flex items-center justify-between border-b bg-card px-4\">\n            <div className=\"flex items-center space-x-4\">\n              <SidebarTrigger />\n              <div>\n                <h1 className=\"text-lg font-semibold text-foreground\">Admin Control Panel</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <SyncStatus />\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                  {user?.role === 'super_admin' ? 'Super Admin' : 'Admin'} - {user?.email}\n                </span>\n              </div>\n            </div>\n          </header>\n\n          {/* Main Content */}\n          <main className=\"flex-1 overflow-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":2566},"client/src/components/AdminMenuManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { MenuItem, Category } from \"@shared/schema\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Search, \n  Loader2,\n  X\n} from \"lucide-react\";\n\nexport default function AdminMenuManagementPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [editingItem, setEditingItem] = useState<MenuItem | null>(null);\n  const [editForm, setEditForm] = useState({\n    name: \"\",\n    price: \"\",\n    categoryId: \"\",\n    description: \"\",\n    stock: \"\",\n    available: true,\n    addOns: \"[]\"\n  });\n  const [addOns, setAddOns] = useState<Array<{ name: string; price: string }>>([]);\n  const { toast } = useToast();\n\n  // Fetch real data from database with enhanced synchronization\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    staleTime: 1000 * 30,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: menuItems = [], isLoading: menuItemsLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    staleTime: 1000 * 30,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const isLoading = categoriesLoading || menuItemsLoading;\n\n  // Enhanced mutations with comprehensive synchronization\n  const updateMenuItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<MenuItem> }) => {\n      return apiRequest(`/api/menu/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: () => {\n      // Invalidate all related queries for real-time sync across dashboards\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      toast({ title: \"Menu item updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update menu item\", variant: \"destructive\" });\n    }\n  });\n\n  // Delete menu item mutation with enhanced sync\n  const deleteMenuItemMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(`/api/menu/${id}`, { method: 'DELETE' });\n    },\n    onSuccess: () => {\n      // Comprehensive cache invalidation for all dashboards\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({ title: \"Menu item deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete menu item\", variant: \"destructive\" });\n    }\n  });\n\n  const toggleAvailability = (id: number, available: boolean) => {\n    updateMenuItemMutation.mutate({ id, data: { available } });\n  };\n\n  const deleteItem = (id: number) => {\n    deleteMenuItemMutation.mutate(id);\n  };\n\n  const openEditDialog = (item: MenuItem) => {\n    setEditingItem(item);\n    setEditForm({\n      name: item.name,\n      price: item.price.toString(),\n      categoryId: item.categoryId?.toString() || \"\",\n      description: item.description || \"\",\n      stock: item.stock.toString(),\n      available: item.available,\n      addOns: item.addOns || \"[]\"\n    });\n    \n    // Parse existing add-ons\n    try {\n      const existingAddOns = JSON.parse(item.addOns || \"[]\");\n      setAddOns(existingAddOns.length > 0 ? existingAddOns : []);\n    } catch {\n      setAddOns([]);\n    }\n  };\n\n  const addNewAddOn = () => {\n    setAddOns([...addOns, { name: \"\", price: \"\" }]);\n  };\n\n  const updateAddOn = (index: number, field: \"name\" | \"price\", value: string) => {\n    const updatedAddOns = [...addOns];\n    updatedAddOns[index][field] = value;\n    setAddOns(updatedAddOns);\n  };\n\n  const removeAddOn = (index: number) => {\n    setAddOns(addOns.filter((_, i) => i !== index));\n  };\n\n  const saveEditedItem = () => {\n    if (!editingItem) return;\n    \n    const updatedData = {\n      name: editForm.name,\n      price: parseInt(editForm.price),\n      categoryId: parseInt(editForm.categoryId),\n      description: editForm.description,\n      stock: parseInt(editForm.stock),\n      available: editForm.available,\n      addOns: JSON.stringify(addOns.filter(addon => addon.name && addon.price))\n    };\n    \n    updateMenuItemMutation.mutate({ id: editingItem.id, data: updatedData });\n    setEditingItem(null);\n  };\n\n  // Filter menu items\n  const filteredItems = menuItems.filter(item => {\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || \n      categories.find(cat => cat.id === item.categoryId)?.name === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Menu Management</h2>\n        <Button>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add New Item\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search menu items...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        <select\n          value={selectedCategory}\n          onChange={(e) => setSelectedCategory(e.target.value)}\n          className=\"px-3 py-2 border rounded-md\"\n        >\n          <option value=\"all\">All Categories</option>\n          {categories.map((category) => (\n            <option key={category.id} value={category.name}>\n              {category.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Menu Items Grid */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredItems.length === 0 ? (\n          <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n            <p>No menu items found</p>\n          </div>\n        ) : (\n          filteredItems.map((item) => (\n            <Card key={item.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-lg\">{item.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {categories.find(cat => cat.id === item.categoryId)?.name || \"Unknown Category\"}\n                    </p>\n                  </div>\n                  <Badge variant={item.available ? \"default\" : \"secondary\"}>\n                    {item.available ? \"Available\" : \"Unavailable\"}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {item.description || \"No description available\"}\n                </p>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-bold\">₹{item.price}</span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Stock: {item.stock}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center justify-between pt-2 border-t\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={item.available}\n                      onCheckedChange={(checked) => toggleAvailability(item.id, checked)}\n                    />\n                    <Label className=\"text-sm\">\n                      {item.available ? \"Available\" : \"Unavailable\"}\n                    </Label>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => openEditDialog(item)}\n                    >\n                      <Edit className=\"w-3 h-3\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => deleteItem(item.id)}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingItem} onOpenChange={() => setEditingItem(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[85vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Edit Menu Item</DialogTitle>\n            <DialogDescription>\n              Update the menu item details including add-ons.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 overflow-y-auto flex-1 pr-2\">\n            {/* Name */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                value={editForm.name}\n                onChange={(e) => setEditForm({...editForm, name: e.target.value})}\n                placeholder=\"Item name\"\n              />\n            </div>\n\n            {/* Price */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"price\">Price (₹)</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                value={editForm.price}\n                onChange={(e) => setEditForm({...editForm, price: e.target.value})}\n                placeholder=\"0\"\n              />\n            </div>\n\n            {/* Category */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={editForm.categoryId} onValueChange={(value) => setEditForm({...editForm, categoryId: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id.toString()}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Description */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={editForm.description}\n                onChange={(e) => setEditForm({...editForm, description: e.target.value})}\n                placeholder=\"Item description\"\n                rows={3}\n              />\n            </div>\n\n            {/* Stock */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"stock\">Stock</Label>\n              <Input\n                id=\"stock\"\n                type=\"number\"\n                value={editForm.stock}\n                onChange={(e) => setEditForm({...editForm, stock: e.target.value})}\n                placeholder=\"0\"\n              />\n            </div>\n\n            {/* Available */}\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"available\"\n                checked={editForm.available}\n                onCheckedChange={(checked) => setEditForm({...editForm, available: checked})}\n              />\n              <Label htmlFor=\"available\">Available</Label>\n            </div>\n\n            {/* Add-ons Section */}\n            <div className=\"space-y-2 border border-dashed border-gray-300 p-4 rounded-lg bg-gray-50\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-lg font-semibold\">Add-ons</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addNewAddOn}\n                >\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add Add-on\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {addOns.map((addon, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                    <Input\n                      placeholder=\"Add-on name\"\n                      value={addon.name}\n                      onChange={(e) => updateAddOn(index, \"name\", e.target.value)}\n                      className=\"flex-1\"\n                    />\n                    <Input\n                      placeholder=\"Price\"\n                      type=\"number\"\n                      value={addon.price}\n                      onChange={(e) => updateAddOn(index, \"price\", e.target.value)}\n                      className=\"w-24\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeAddOn(index)}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              \n              {addOns.length === 0 && (\n                <p className=\"text-sm text-muted-foreground\">No add-ons configured</p>\n              )}\n            </div>\n          </div>\n\n          {/* Action Buttons - Fixed at bottom */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t bg-background\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setEditingItem(null)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={saveEditedItem}\n              disabled={!editForm.name || !editForm.price}\n            >\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15535},"client/src/components/AdminNotificationManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  ArrowLeft, Bell, Send, Plus, Eye, Edit, Trash2, \n  Users, MessageSquare, Megaphone, Clock, Check, X,\n  Heart, Coffee, ChefHat, Sparkles, Timer, Play, Pause, Save\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Empty templates - fetch from database when notification system is implemented\nconst initialNotificationTemplates: any[] = [];\n\n// Empty automation settings - fetch from database when automation system is implemented  \nconst initialAutomationSettings: any[] = [];\n\nexport default function AdminNotificationManagementPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"templates\");\n  const [automationEnabled, setAutomationEnabled] = useState(true);\n  const [notificationTemplates, setNotificationTemplates] = useState(initialNotificationTemplates);\n  const [automationSettings, setAutomationSettings] = useState(initialAutomationSettings);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<any>(null);\n  const [editForm, setEditForm] = useState({\n    category: \"\",\n    title: \"\",\n    message: \"\",\n    emoji: \"\",\n    timing: \"\"\n  });\n\n  // Empty recent notifications - will be populated from database when notification system is implemented\n  const recentNotifications: any[] = [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Active\": return \"bg-success text-success-foreground\";\n      case \"Paused\": return \"bg-warning text-warning-foreground\";\n      case \"Delivered\": return \"bg-success text-success-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const handleToggleTemplate = (templateId: number) => {\n    setNotificationTemplates(prev => {\n      const updatedTemplates = prev.map(template => \n        template.id === templateId \n          ? { ...template, isActive: !template.isActive }\n          : template\n      );\n      \n      // Get the template info from the previous state to avoid initialization error\n      const template = prev.find(t => t.id === templateId);\n      \n      toast({\n        title: \"Template Updated\",\n        description: `\"${template?.title}\" has been ${!template?.isActive ? 'activated' : 'deactivated'}.`,\n      });\n      \n      return updatedTemplates;\n    });\n  };\n\n  const handleToggleAutomation = (automationId: number) => {\n    setAutomationSettings(prev => {\n      const updatedAutomations = prev.map(automation => \n        automation.id === automationId \n          ? { ...automation, status: automation.status === \"Active\" ? \"Paused\" : \"Active\" }\n          : automation\n      );\n      \n      // Get automation info from previous state to avoid initialization error\n      const automation = prev.find(a => a.id === automationId);\n      \n      toast({\n        title: \"Automation Updated\", \n        description: `\"${automation?.name}\" has been ${automation?.status === \"Active\" ? 'paused' : 'activated'}.`,\n      });\n      \n      return updatedAutomations;\n    });\n  };\n\n  const handleSendTestNotification = (template: any) => {\n    toast({\n      title: \"Test Notification Sent\",\n      description: `\"${template.title}\" has been sent to test users.`,\n    });\n  };\n\n  const handleMasterToggle = (enabled: boolean) => {\n    setAutomationEnabled(enabled);\n    toast({\n      title: enabled ? \"Automation Enabled\" : \"Automation Disabled\",\n      description: enabled \n        ? \"All automated notifications are now active.\"\n        : \"All automated notifications have been paused.\",\n    });\n  };\n\n  const handleAddNotification = () => {\n    toast({\n      title: \"Add Notification\",\n      description: \"Create new notification dialog would open here\",\n    });\n  };\n\n  const handleAddTemplate = () => {\n    toast({\n      title: \"Add Template\", \n      description: \"Create new template dialog would open here\",\n    });\n  };\n\n  const handleEditTemplate = (templateId: number) => {\n    const template = notificationTemplates.find(t => t.id === templateId);\n    if (template) {\n      setSelectedTemplate(template);\n      setEditForm({\n        category: template.category,\n        title: template.title,\n        message: template.message,\n        emoji: template.emoji,\n        timing: template.timing\n      });\n      setEditDialogOpen(true);\n    }\n  };\n\n  const handleSaveTemplate = () => {\n    if (selectedTemplate) {\n      setNotificationTemplates(prev => \n        prev.map(template => \n          template.id === selectedTemplate.id \n            ? { ...template, ...editForm }\n            : template\n        )\n      );\n      toast({\n        title: \"Template Updated\",\n        description: `\"${editForm.title}\" has been successfully updated.`,\n      });\n      setEditDialogOpen(false);\n      setSelectedTemplate(null);\n    }\n  };\n\n  const handleFormChange = (field: string, value: string) => {\n    setEditForm(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Automated Notification System</h1>\n            <p className=\"text-muted-foreground\">AI-powered promotional notifications like Zomato</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            onClick={handleAddNotification}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Notification\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm font-medium\">Master Control</span>\n            <Switch \n              checked={automationEnabled} \n              onCheckedChange={handleMasterToggle}\n            />\n          </div>\n          <Badge variant={automationEnabled ? \"default\" : \"secondary\"}>\n            {automationEnabled ? \"Active\" : \"Paused\"}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Bell className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">0</p>\n                <p className=\"text-xs text-muted-foreground\">Notifications Sent Today</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <Eye className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">0%</p>\n                <p className=\"text-xs text-muted-foreground\">Average Open Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <Users className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">0%</p>\n                <p className=\"text-xs text-muted-foreground\">Click Through Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <ChefHat className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">0</p>\n                <p className=\"text-xs text-muted-foreground\">Orders Generated</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex space-x-2 mb-6\">\n        {[\"templates\", \"automation\", \"analytics\"].map((tab) => (\n          <Button\n            key={tab}\n            variant={activeTab === tab ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(tab)}\n            className=\"capitalize\"\n          >\n            {tab === \"templates\" && <MessageSquare className=\"h-4 w-4 mr-2\" />}\n            {tab === \"automation\" && <Timer className=\"h-4 w-4 mr-2\" />}\n            {tab === \"analytics\" && <Bell className=\"h-4 w-4 mr-2\" />}\n            {tab}\n          </Button>\n        ))}\n      </div>\n\n      {/* Templates Tab */}\n      {activeTab === \"templates\" && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold\">Notification Templates</h2>\n            <Button\n              onClick={handleAddTemplate}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Template\n            </Button>\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {notificationTemplates.map((template) => (\n              <Card key={template.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl\">{template.emoji}</span>\n                      <div>\n                        <h3 className=\"font-semibold text-sm\">{template.category}</h3>\n                        <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                          {template.timing}\n                        </Badge>\n                      </div>\n                    </div>\n                    <Switch \n                      checked={template.isActive}\n                      onCheckedChange={() => handleToggleTemplate(template.id)}\n                    />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">{template.title}</h4>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{template.message}</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleSendTestNotification(template)}\n                    >\n                      <Send className=\"h-3 w-3 mr-1\" />\n                      Test\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleEditTemplate(template.id)}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Automation Tab */}\n      {activeTab === \"automation\" && (\n        <div className=\"space-y-4\">\n          {automationSettings.map((automation) => (\n            <Card key={automation.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                      <Timer className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">{automation.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{automation.description}</p>\n                      <div className=\"flex items-center space-x-4 mt-2 text-xs text-muted-foreground\">\n                        <span>📅 {automation.frequency}</span>\n                        <span>👥 {automation.recipients} recipients</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge className={getStatusColor(automation.status)}>\n                      {automation.status === \"Active\" ? <Play className=\"h-3 w-3 mr-1\" /> : <Pause className=\"h-3 w-3 mr-1\" />}\n                      {automation.status}\n                    </Badge>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleToggleAutomation(automation.id)}\n                    >\n                      {automation.status === \"Active\" ? \"Pause\" : \"Resume\"}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === \"analytics\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Automated Notifications</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentNotifications.map((notification) => (\n                <div key={notification.id} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"font-medium text-foreground\">{notification.template}</h4>\n                    <Badge className={getStatusColor(notification.status)}>\n                      {notification.status}\n                    </Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Sent To</p>\n                      <p className=\"font-semibold\">{notification.sentTo.toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Open Rate</p>\n                      <p className=\"font-semibold text-success\">{notification.openRate}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Click Rate</p>\n                      <p className=\"font-semibold text-primary\">{notification.clickRate}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Sent At</p>\n                      <p className=\"font-semibold\">{notification.sentAt}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Edit Template Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px] bg-background\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Edit className=\"h-5 w-5\" />\n              <span>Edit Notification Template</span>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"emoji\" className=\"text-right\">\n                Emoji\n              </Label>\n              <Input\n                id=\"emoji\"\n                value={editForm.emoji}\n                onChange={(e) => handleFormChange(\"emoji\", e.target.value)}\n                className=\"col-span-3\"\n                placeholder=\"🍛\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"category\" className=\"text-right\">\n                Category\n              </Label>\n              <Input\n                id=\"category\"\n                value={editForm.category}\n                onChange={(e) => handleFormChange(\"category\", e.target.value)}\n                className=\"col-span-3\"\n                placeholder=\"Food Craving\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"timing\" className=\"text-right\">\n                Timing\n              </Label>\n              <Select \n                value={editForm.timing} \n                onValueChange={(value) => handleFormChange(\"timing\", value)}\n              >\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Select timing\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-background border shadow-lg z-50\">\n                  <SelectItem value=\"Morning\">Morning</SelectItem>\n                  <SelectItem value=\"Lunch Time\">Lunch Time</SelectItem>\n                  <SelectItem value=\"Afternoon\">Afternoon</SelectItem>\n                  <SelectItem value=\"Evening\">Evening</SelectItem>\n                  <SelectItem value=\"Dinner\">Dinner</SelectItem>\n                  <SelectItem value=\"Weekend\">Weekend</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"title\" className=\"text-right\">\n                Title\n              </Label>\n              <Input\n                id=\"title\"\n                value={editForm.title}\n                onChange={(e) => handleFormChange(\"title\", e.target.value)}\n                className=\"col-span-3\"\n                placeholder=\"Biryani calls your name! 🍛\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-start gap-4\">\n              <Label htmlFor=\"message\" className=\"text-right pt-2\">\n                Message\n              </Label>\n              <Textarea\n                id=\"message\"\n                value={editForm.message}\n                onChange={(e) => handleFormChange(\"message\", e.target.value)}\n                className=\"col-span-3 min-h-[80px]\"\n                placeholder=\"Your favorite aromatic biryani is waiting for you. Order now and satisfy those cravings!\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setEditDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSaveTemplate}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20281},"client/src/components/AdminOrderManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order } from \"@shared/schema\";\nimport { \n  Search, \n  Filter, \n  Download, \n  Eye, \n  CheckCircle, \n  XCircle, \n  Clock,\n  AlertTriangle,\n  RefreshCw\n} from \"lucide-react\";\n\nexport default function AdminOrderManagementPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const { toast } = useToast();\n\n  // Fetch real orders from database using React Query\n  const { data: orders = [], isLoading: ordersLoading, refetch: refetchOrders, error: ordersError } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/orders');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch orders: ${response.status}`);\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60, // 1 minute\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"warning\";\n      case \"preparing\": return \"primary\";\n      case \"ready\": return \"success\";\n      case \"completed\": return \"success\";\n      case \"cancelled\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\": return Clock;\n      case \"preparing\": return RefreshCw;\n      case \"ready\": return CheckCircle;\n      case \"completed\": return CheckCircle;\n      case \"cancelled\": return XCircle;\n      default: return AlertTriangle;\n    }\n  };\n\n  const updateOrderStatus = useMutation({\n    mutationFn: async ({ orderId, newStatus }: { orderId: number, newStatus: string }) => {\n      return apiRequest(`/api/orders/${orderId}`, {\n        method: 'PATCH',\n        body: { status: newStatus }\n      });\n    },\n    onSuccess: (_, { orderId, newStatus }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"Order Updated\",\n        description: `Order ${orderId} has been updated to ${newStatus}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleExport = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your order data is being exported to CSV\",\n    });\n  };\n\n  const handleRefresh = () => {\n    refetchOrders();\n    toast({\n      title: \"Refreshed\",\n      description: \"Order data has been refreshed\",\n    });\n  };\n\n  const handleViewOrder = (orderId: string) => {\n    toast({\n      title: \"View Order\",\n      description: `Opening details for order ${orderId}`,\n    });\n  };\n\n  const handleFilter = () => {\n    toast({\n      title: \"Filters\",\n      description: \"Advanced filter options coming soon\",\n    });\n  };\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.customerName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === \"all\" || order.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const statusCounts = {\n    all: orders.length,\n    pending: orders.filter(o => o.status === \"pending\").length,\n    preparing: orders.filter(o => o.status === \"preparing\").length,\n    ready: orders.filter(o => o.status === \"ready\").length,\n    completed: orders.filter(o => o.status === \"completed\").length,\n    cancelled: orders.filter(o => o.status === \"cancelled\").length\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Order Management</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage all customer orders</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" className=\"flex items-center space-x-2\" onClick={handleExport}>\n            <Download className=\"w-4 h-4\" />\n            <span>Export</span>\n          </Button>\n          <Button variant=\"food\" className=\"flex items-center space-x-2\" onClick={handleRefresh}>\n            <RefreshCw className=\"w-4 h-4\" />\n            <span>Refresh</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by order ID or customer name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\" onClick={handleFilter}>\n              <Filter className=\"w-4 h-4\" />\n              <span>Filters</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Status Tabs */}\n      <Tabs value={selectedStatus} onValueChange={setSelectedStatus}>\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"all\">All ({statusCounts.all})</TabsTrigger>\n          <TabsTrigger value=\"pending\">Pending ({statusCounts.pending})</TabsTrigger>\n          <TabsTrigger value=\"preparing\">Preparing ({statusCounts.preparing})</TabsTrigger>\n          <TabsTrigger value=\"ready\">Ready ({statusCounts.ready})</TabsTrigger>\n          <TabsTrigger value=\"completed\">Completed ({statusCounts.completed})</TabsTrigger>\n          <TabsTrigger value=\"cancelled\">Cancelled ({statusCounts.cancelled})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={selectedStatus} className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Orders ({filteredOrders.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredOrders.map((order) => {\n                  const StatusIcon = getStatusIcon(order.status);\n                  return (\n                    <div key={order.id} className=\"p-4 border rounded-lg space-y-3\">\n                      {/* Order Header */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <h3 className=\"font-semibold text-foreground\">{order.orderNumber}</h3>\n                          <Badge variant={getStatusColor(order.status) as any} className=\"flex items-center space-x-1\">\n                            <StatusIcon className=\"w-3 h-3\" />\n                            <span className=\"capitalize\">{order.status}</span>\n                          </Badge>\n                          <Badge variant=\"outline\">Canteen</Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"flex items-center space-x-1\"\n                            onClick={() => handleViewOrder(order.orderNumber)}\n                          >\n                            <Eye className=\"w-3 h-3\" />\n                            <span>View</span>\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Order Details */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Customer</p>\n                          <p className=\"font-medium\">{order.customerName}</p>\n                          <p className=\"text-muted-foreground text-xs\">ID: {order.customerId}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Items</p>\n                          <p className=\"font-medium\">{order.items}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Total</p>\n                          <p className=\"font-medium text-success\">₹{order.amount}</p>\n                          <p className=\"text-muted-foreground text-xs\">Paid</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Time</p>\n                          <p className=\"font-medium\">{new Date(order.createdAt).toLocaleString()}</p>\n                          <p className=\"text-muted-foreground text-xs\">{order.estimatedTime} mins</p>\n                        </div>\n                      </div>\n\n                      {/* Order Actions */}\n                      {order.status !== \"completed\" && order.status !== \"cancelled\" && (\n                        <div className=\"flex items-center space-x-2 pt-2 border-t\">\n                          {order.status === \"preparing\" && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"food\"\n                              onClick={() => updateOrderStatus.mutate({ orderId: order.id, newStatus: \"ready\" })}\n                            >\n                              Mark as Ready\n                            </Button>\n                          )}\n                          {order.status === \"ready\" && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"food\"\n                              onClick={() => updateOrderStatus.mutate({ orderId: order.id, newStatus: \"completed\" })}\n                            >\n                              Mark as Completed\n                            </Button>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n\n                {filteredOrders.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No orders found matching your criteria.\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11060},"client/src/components/AdminOverviewPage.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { toast } from \"sonner\";\nimport { \n  DollarSign, \n  Users, \n  ShoppingCart, \n  TrendingUp, \n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Star,\n  RefreshCcw\n} from \"lucide-react\";\nimport type { Order, User } from \"@shared/schema\";\n\nexport default function AdminOverviewPage() {\n  // Fetch real data from database\n  const { data: orders = [], isLoading: ordersLoading, refetch: refetchOrders } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n  });\n\n  const { data: users = [], isLoading: usersLoading, refetch: refetchUsers } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Refresh all data function\n  const refreshAllData = async () => {\n    try {\n      await Promise.all([\n        refetchOrders(),\n        refetchUsers()\n      ]);\n      toast.success(\"Data refreshed successfully!\");\n    } catch (error) {\n      toast.error(\"Failed to refresh data\");\n    }\n  };\n\n  // Calculate real stats from database data\n  const stats = {\n    totalRevenue: orders.reduce((sum, order) => sum + order.amount, 0),\n    totalUsers: users.length,\n    totalOrders: orders.length,\n    activeCanteens: 1,\n    pendingOrders: orders.filter(order => order.status === 'preparing').length,\n    completedOrders: orders.filter(order => order.status === 'completed').length,\n    averageRating: 0, // To be calculated when ratings are available\n    systemUptime: 100\n  };\n\n  // Get recent activity from orders (last 5 orders)\n  const recentActivity = orders\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5)\n    .map(order => ({\n      id: order.id,\n      message: `New order #${order.orderNumber} by ${order.customerName}`,\n      time: new Date(order.createdAt).toLocaleTimeString(),\n      status: order.status\n    }));\n\n  // Calculate top performing items (placeholder for now)\n  const topPerformingItems: Array<{name: string, orders: number, revenue: number}> = [];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header with Refresh Button */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Dashboard Overview</h1>\n          <p className=\"text-muted-foreground\">Monitor your canteen operations</p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={refreshAllData}\n          disabled={ordersLoading || usersLoading}\n        >\n          <RefreshCcw className=\"w-4 h-4 mr-2\" />\n          Refresh Data\n        </Button>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-success\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success\">₹{stats.totalRevenue.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">No data available</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">No data available</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-warning\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalOrders.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">No data available</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Uptime</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-success\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success\">{stats.systemUptime}%</div>\n            <p className=\"text-xs text-muted-foreground\">Last 30 days</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Status Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5\" />\n              <span>Order Status</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Pending Orders</span>\n            <Badge variant=\"secondary\">{stats.pendingOrders}</Badge>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Completed Orders</span>\n            <Badge variant=\"secondary\">{stats.completedOrders}</Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Completion Rate</span>\n                <span>{((stats.completedOrders / stats.totalOrders) * 100).toFixed(1)}%</span>\n              </div>\n              <Progress value={(stats.completedOrders / stats.totalOrders) * 100} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Star className=\"h-5 w-5\" />\n              <span>Performance Metrics</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Average Rating</span>\n              <div className=\"flex items-center space-x-1\">\n                <Star className=\"h-4 w-4 fill-warning text-warning\" />\n                <span className=\"font-semibold\">{stats.averageRating}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Active Canteens</span>\n              <Badge variant=\"secondary\">{stats.activeCanteens}</Badge>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Customer Satisfaction</span>\n                <span>{((stats.averageRating / 5) * 100).toFixed(0)}%</span>\n              </div>\n              <Progress value={(stats.averageRating / 5) * 100} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Top Performing Items */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivity.length > 0 ? recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    activity.status === 'completed' ? 'bg-success' :\n                    activity.status === 'cancelled' ? 'bg-destructive' :\n                    activity.status === 'preparing' ? 'bg-warning' : 'bg-primary'\n                  }`} />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">{activity.message}</p>\n                    <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                  </div>\n                </div>\n              )) : (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">No recent activity</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Performing Items</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {topPerformingItems.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">{item.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{item.orders} orders</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-success\">₹{item.revenue.toLocaleString()}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9626},"client/src/components/AdminPanel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Bell, Plus, Edit, Trash2, Clock, CheckCircle, Home, Settings, \n  Users, DollarSign, Package, BarChart3, MessageSquare, FileText,\n  Shield, Database, Wifi, Smartphone, Globe, AlertTriangle,\n  TrendingUp, Calendar, Download, Upload, Search, Filter,\n  Mail, Phone, MapPin, Star, Eye, ThumbsUp, ThumbsDown\n} from \"lucide-react\";\n\nexport default function AdminPanel() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { user, isAuthenticated, isSuperAdmin } = useAuthSync();\n\n  // Enhanced security check for super admin access\n  useEffect(() => {\n    if (!isAuthenticated || !isSuperAdmin) {\n      toast.error(\"Access denied. Super admin authentication required.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, isSuperAdmin, setLocation]);\n\n  // Return early if not properly authenticated\n  if (!isAuthenticated || !isSuperAdmin) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">Super admin authentication required</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Simplified stats for overview\n  const stats = {\n    totalRevenue: 0,\n    todayOrders: 0,\n    totalUsers: 0,\n    avgRating: 0,\n    monthlyGrowth: 0,\n    pendingOrders: 0,\n    lowStockItems: 0,\n    activeCampaigns: 0\n  };\n\n  // Empty arrays for unused sections (to be implemented)\n  const users: any[] = [];\n  const staff: any[] = [];\n  const inventory: any[] = [];\n  const feedback: any[] = [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Super Admin Panel</h1>\n              <p className=\"text-sm text-muted-foreground\">Complete Canteen Management System</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Data\n            </Button>\n            <Button variant=\"food\" size=\"sm\" onClick={() => setLocation(\"/login\")}>\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-8\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center space-x-1\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Overview</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"orders\" className=\"flex items-center space-x-1\">\n              <Package className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Orders</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center space-x-1\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"staff\" className=\"flex items-center space-x-1\">\n              <Shield className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Staff</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"inventory\" className=\"flex items-center space-x-1\">\n              <Database className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Inventory</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"feedback\" className=\"flex items-center space-x-1\">\n              <MessageSquare className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Feedback</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-1\">\n              <TrendingUp className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-1\">\n              <Settings className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"mt-6\">\n            <div className=\"grid gap-6\">\n              {/* Quick Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"w-5 h-5 text-success\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                        <p className=\"text-2xl font-bold\">₹{stats.totalRevenue.toLocaleString()}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Package className=\"w-5 h-5 text-primary\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Today's Orders</p>\n                        <p className=\"text-2xl font-bold\">{stats.todayOrders}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"w-5 h-5 text-blue-500\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                        <p className=\"text-2xl font-bold\">{stats.totalUsers}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Star className=\"w-5 h-5 text-warning\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Avg Rating</p>\n                        <p className=\"text-2xl font-bold\">{stats.avgRating}/5</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                      <Bell className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Send Notification</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                      <Plus className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Add Menu Item</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                      <FileText className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Generate Report</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                      <AlertTriangle className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">System Alerts</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* System Health */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>System Status</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Database className=\"w-4 h-4\" />\n                        <span>Database</span>\n                      </div>\n                      <Badge variant=\"default\">Online</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Wifi className=\"w-4 h-4\" />\n                        <span>Network</span>\n                      </div>\n                      <Badge variant=\"default\">Stable</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Smartphone className=\"w-4 h-4\" />\n                        <span>Mobile App</span>\n                      </div>\n                      <Badge variant=\"destructive\">Maintenance</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Alerts</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertTriangle className=\"w-4 h-4 text-warning mt-1\" />\n                      <div>\n                        <p className=\"text-sm font-medium\">Low Stock Alert</p>\n                        <p className=\"text-xs text-muted-foreground\">Oil quantity below minimum</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <Bell className=\"w-4 h-4 text-primary mt-1\" />\n                      <div>\n                        <p className=\"text-sm font-medium\">Peak Hours</p>\n                        <p className=\"text-xs text-muted-foreground\">High order volume detected</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Management</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Filter\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Search className=\"w-4 h-4 mr-2\" />\n                    Search\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map((order) => (\n                    <div key={order} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h3 className=\"font-semibold\">Order #ORD{order.toString().padStart(3, '0')}</h3>\n                          <p className=\"text-sm text-muted-foreground\">Customer {order} • 12:3{order} PM</p>\n                          <p className=\"text-sm\">2x Veg Thali, 1x Tea</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold\">₹{150 + order * 10}</p>\n                          <Badge variant={order % 3 === 0 ? \"default\" : order % 2 === 0 ? \"destructive\" : \"secondary\"}>\n                            {order % 3 === 0 ? \"Completed\" : order % 2 === 0 ? \"Preparing\" : \"Pending\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Management</CardTitle>\n                <Button variant=\"food\" size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add User\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {users.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-bold\">\n                          {user.name.charAt(0)}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{user.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          <p className=\"text-xs text-muted-foreground\">{user.role} • {user.orders} orders • ₹{user.spent} spent</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={user.status === \"Active\" ? \"default\" : \"destructive\"}>\n                          {user.status}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive\">\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Staff Tab */}\n          <TabsContent value=\"staff\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Staff Management</CardTitle>\n                <Button variant=\"food\" size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Staff\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {staff.map((member) => (\n                    <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h3 className=\"font-semibold\">{member.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{member.role} • {member.shift} Shift</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={member.status === \"Active\" ? \"default\" : \"destructive\"}>\n                          {member.status}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Inventory Tab */}\n          <TabsContent value=\"inventory\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Inventory Management</CardTitle>\n                <Button variant=\"food\" size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Item\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {inventory.map((item) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h3 className=\"font-semibold\">{item.item}</h3>\n                        <p className=\"text-sm text-muted-foreground\">Current: {item.quantity}{item.unit} • Min: {item.minStock}{item.unit}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={item.status === \"Good\" ? \"default\" : \"destructive\"}>\n                          {item.status}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Feedback Tab */}\n          <TabsContent value=\"feedback\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Feedback</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {feedback.map((item) => (\n                    <div key={item.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold\">{item.customer}</h3>\n                          <div className=\"flex items-center space-x-1\">\n                            {[...Array(5)].map((_, i) => (\n                              <Star key={i} className={`w-4 h-4 ${i < item.rating ? 'text-warning fill-current' : 'text-muted-foreground'}`} />\n                            ))}\n                          </div>\n                        </div>\n                        <Badge variant={item.status === \"New\" ? \"destructive\" : item.status === \"Reviewed\" ? \"secondary\" : \"default\"}>\n                          {item.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">{item.comment}</p>\n                      <p className=\"text-xs text-muted-foreground\">{item.date}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"mt-6\">\n            <div className=\"grid gap-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Revenue Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>Monthly Growth</span>\n                        <span className=\"text-success font-bold\">+{stats.monthlyGrowth}%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Best Selling Item</span>\n                        <span className=\"font-semibold\">Veg Thali</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Peak Hours</span>\n                        <span className=\"font-semibold\">12:00 - 2:00 PM</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Customer Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>New Users (This Month)</span>\n                        <span className=\"font-bold\">156</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Retention Rate</span>\n                        <span className=\"font-semibold\">78%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Avg Order Value</span>\n                        <span className=\"font-semibold\">₹145</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"mt-6\">\n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>General Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-medium\">Enable Online Orders</h3>\n                      <p className=\"text-sm text-muted-foreground\">Allow customers to place orders online</p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-medium\">SMS Notifications</h3>\n                      <p className=\"text-sm text-muted-foreground\">Send order updates via SMS</p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-medium\">Auto Accept Orders</h3>\n                      <p className=\"text-sm text-muted-foreground\">Automatically accept new orders</p>\n                    </div>\n                    <Switch />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Operating Hours</label>\n                      <Input defaultValue=\"9:00 AM - 9:00 PM\" />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Max Orders Per Hour</label>\n                      <Input defaultValue=\"50\" type=\"number\" />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Delivery Charges</label>\n                      <Input defaultValue=\"20\" type=\"number\" />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Tax Rate (%)</label>\n                      <Input defaultValue=\"5\" type=\"number\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Advanced Controls</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button variant=\"outline\">\n                      <Database className=\"w-4 h-4 mr-2\" />\n                      Backup Database\n                    </Button>\n                    <Button variant=\"outline\">\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Import Data\n                    </Button>\n                    <Button variant=\"outline\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Export Reports\n                    </Button>\n                    <Button variant=\"outline\">\n                      <Globe className=\"w-4 h-4 mr-2\" />\n                      API Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25484},"client/src/components/AdminPaymentManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, Search, Filter, CreditCard, DollarSign, \n  TrendingUp, AlertTriangle, CheckCircle, Clock, \n  RefreshCw, Download, Eye\n} from \"lucide-react\";\n\nexport default function AdminPaymentManagementPage() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedPayment, setSelectedPayment] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const payments: any[] = []; // Will be populated from actual payment transactions when payment system is implemented\n\n  const filteredPayments = payments.filter((payment: any) => {\n    const matchesSearch = payment?.user?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment?.orderId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment?.transactionId?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || payment?.status?.toLowerCase() === statusFilter.toLowerCase();\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Completed\": return \"bg-success text-success-foreground\";\n      case \"Failed\": return \"bg-destructive text-destructive-foreground\";\n      case \"Pending\": return \"bg-warning text-warning-foreground\";\n      case \"Refunded\": return \"bg-secondary text-secondary-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"Completed\": return <CheckCircle className=\"h-3 w-3\" />;\n      case \"Failed\": return <AlertTriangle className=\"h-3 w-3\" />;\n      case \"Pending\": return <Clock className=\"h-3 w-3\" />;\n      case \"Refunded\": return <RefreshCw className=\"h-3 w-3\" />;\n      default: return <Clock className=\"h-3 w-3\" />;\n    }\n  };\n\n  const stats = {\n    totalTransactions: 0,\n    totalAmount: 0,\n    successRate: 0,\n    pendingAmount: 0\n  };\n\n  const handleExportReport = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Payment report is being generated and will be downloaded shortly.\",\n    });\n    \n    // Simulate report generation\n    setTimeout(() => {\n      const csvContent = [\n        [\"Payment ID\", \"Order ID\", \"User\", \"Amount\", \"Method\", \"Status\", \"Timestamp\", \"Transaction ID\", \"Gateway\"],\n        ...filteredPayments.map(payment => [\n          payment.id,\n          payment.orderId,\n          payment.user,\n          payment.amount,\n          payment.method,\n          payment.status,\n          payment.timestamp,\n          payment.transactionId,\n          payment.gateway\n        ])\n      ].map(row => row.join(\",\")).join(\"\\n\");\n      \n      const blob = new Blob([csvContent], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `payment-report-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Export Complete\",\n        description: \"Payment report has been downloaded successfully.\",\n      });\n    }, 2000);\n  };\n\n  const handleViewPayment = (payment: any) => {\n    setSelectedPayment(payment);\n    setIsModalOpen(true);\n  };\n\n  const handleRetryPayment = (payment: any) => {\n    toast({\n      title: \"Payment Retry\",\n      description: `Initiating retry for failed payment ${payment.id}`,\n    });\n    // In a real app, this would trigger the payment retry process\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Payment Management</h1>\n            <p className=\"text-muted-foreground\">Monitor and manage all payment transactions</p>\n          </div>\n        </div>\n        <Button variant=\"outline\" onClick={handleExportReport}>\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Report\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <CreditCard className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.totalTransactions}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Transactions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">₹{stats.totalAmount.toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Amount</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.successRate}%</p>\n                <p className=\"text-xs text-muted-foreground\">Success Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <Clock className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">₹{stats.pendingAmount.toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">Pending Amount</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by user, order ID, or transaction ID...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"refunded\">Refunded</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payments Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment Transactions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {filteredPayments.map((payment) => (\n              <div key={payment.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                    <CreditCard className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{payment.user}</p>\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <span>Order: {payment.orderId}</span>\n                      <span>•</span>\n                      <span>{payment.method}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <p className=\"font-semibold text-lg\">₹{payment.amount}</p>\n                  <p className=\"text-xs text-muted-foreground\">{payment.gateway}</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Badge className={`${getStatusColor(payment.status)} mb-1`}>\n                    <div className=\"flex items-center space-x-1\">\n                      {getStatusIcon(payment.status)}\n                      <span>{payment.status}</span>\n                    </div>\n                  </Badge>\n                  <p className=\"text-xs text-muted-foreground\">{payment.timestamp}</p>\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => handleViewPayment(payment)}\n                    title=\"View payment details\"\n                  >\n                    <Eye className=\"h-3 w-3\" />\n                  </Button>\n                  {payment.status === \"Failed\" && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleRetryPayment(payment)}\n                      title=\"Retry failed payment\"\n                    >\n                      <RefreshCw className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Details Modal */}\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-5 w-5 text-primary\" />\n              <span>Payment Details</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedPayment && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Payment ID</p>\n                  <p className=\"text-sm font-mono\">{selectedPayment.id}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Order ID</p>\n                  <p className=\"text-sm font-mono\">{selectedPayment.orderId}</p>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Customer</p>\n                <p className=\"text-sm\">{selectedPayment.user}</p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Amount</p>\n                  <p className=\"text-lg font-bold text-success\">₹{selectedPayment.amount}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  <Badge className={getStatusColor(selectedPayment.status)}>\n                    <div className=\"flex items-center space-x-1\">\n                      {getStatusIcon(selectedPayment.status)}\n                      <span>{selectedPayment.status}</span>\n                    </div>\n                  </Badge>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Payment Method</p>\n                  <p className=\"text-sm\">{selectedPayment.method}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Gateway</p>\n                  <p className=\"text-sm\">{selectedPayment.gateway}</p>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Transaction ID</p>\n                <p className=\"text-sm font-mono bg-muted p-2 rounded\">{selectedPayment.transactionId}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Transaction Time</p>\n                <p className=\"text-sm\">{selectedPayment.timestamp}</p>\n              </div>\n\n              {selectedPayment.status === \"Failed\" && (\n                <div className=\"pt-4\">\n                  <Button \n                    onClick={() => {\n                      handleRetryPayment(selectedPayment);\n                      setIsModalOpen(false);\n                    }}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Retry Payment\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14974},"client/src/components/AdminReportsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { \n  ArrowLeft, Download, FileText, TrendingUp, DollarSign, \n  Users, Package, Calendar as CalendarIcon, Filter, BarChart3\n} from \"lucide-react\";\n\nexport default function AdminReportsPage() {\n  const [, setLocation] = useLocation();\n  const [dateRange, setDateRange] = useState<any>();\n  const [reportType, setReportType] = useState(\"revenue\");\n\n  const reports = [\n    {\n      id: 1,\n      name: \"Daily Revenue Report\",\n      type: \"Financial\",\n      date: \"2024-01-15\",\n      status: \"Generated\",\n      size: \"2.3 MB\"\n    },\n    {\n      id: 2,\n      name: \"Customer Analytics\",\n      type: \"Analytics\", \n      date: \"2024-01-14\",\n      status: \"Processing\",\n      size: \"1.8 MB\"\n    },\n    {\n      id: 3,\n      name: \"Inventory Summary\",\n      type: \"Inventory\",\n      date: \"2024-01-13\",\n      status: \"Generated\",\n      size: \"945 KB\"\n    },\n    {\n      id: 4,\n      name: \"Staff Performance\",\n      type: \"HR\",\n      date: \"2024-01-12\",\n      status: \"Generated\",\n      size: \"1.2 MB\"\n    }\n  ];\n\n  const quickStats = {\n    totalReports: 156,\n    pendingReports: 3,\n    storageUsed: \"24.5 GB\",\n    lastGenerated: \"2 hours ago\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Reports & Analytics</h1>\n              <p className=\"text-sm text-muted-foreground\">Generate and manage system reports</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Reports</p>\n                  <p className=\"text-2xl font-bold\">{quickStats.totalReports}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-warning\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold\">{quickStats.pendingReports}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5 text-success\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Storage Used</p>\n                  <p className=\"text-2xl font-bold\">{quickStats.storageUsed}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <CalendarIcon className=\"w-5 h-5 text-blue-500\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Last Generated</p>\n                  <p className=\"text-2xl font-bold\">{quickStats.lastGenerated}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Generate New Report */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Generate New Report</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Report Type\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-background border\">\n                  <SelectItem value=\"revenue\">Revenue Report</SelectItem>\n                  <SelectItem value=\"customer\">Customer Analytics</SelectItem>\n                  <SelectItem value=\"inventory\">Inventory Report</SelectItem>\n                  <SelectItem value=\"staff\">Staff Performance</SelectItem>\n                  <SelectItem value=\"menu\">Menu Analytics</SelectItem>\n                  <SelectItem value=\"feedback\">Feedback Summary</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" className=\"justify-start text-left font-normal\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {dateRange?.from ? (\n                      dateRange.to ? (\n                        <>\n                          {format(dateRange.from, \"LLL dd, y\")} -{\" \"}\n                          {format(dateRange.to, \"LLL dd, y\")}\n                        </>\n                      ) : (\n                        format(dateRange.from, \"LLL dd, y\")\n                      )\n                    ) : (\n                      <span>Pick date range</span>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0 bg-background border\" align=\"start\">\n                  <Calendar\n                    initialFocus\n                    mode=\"range\"\n                    selected={dateRange}\n                    onSelect={setDateRange}\n                    numberOfMonths={2}\n                    className={cn(\"p-3 pointer-events-auto\")}\n                  />\n                </PopoverContent>\n              </Popover>\n\n              <Select defaultValue=\"pdf\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Format\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-background border\">\n                  <SelectItem value=\"pdf\">PDF</SelectItem>\n                  <SelectItem value=\"excel\">Excel</SelectItem>\n                  <SelectItem value=\"csv\">CSV</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button variant=\"food\" className=\"w-full\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Generate Report\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Report Actions */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Quick Reports</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <DollarSign className=\"w-6 h-6\" />\n                <span className=\"text-sm\">Today's Revenue</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Users className=\"w-6 h-6\" />\n                <span className=\"text-sm\">User Activity</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Package className=\"w-6 h-6\" />\n                <span className=\"text-sm\">Order Summary</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <BarChart3 className=\"w-6 h-6\" />\n                <span className=\"text-sm\">Performance</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Reports */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Reports</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {reports.map((report) => (\n                <div key={report.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                      <FileText className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">{report.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{report.type} • {report.date} • {report.size}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={report.status === \"Generated\" ? \"default\" : \"secondary\"}>\n                      {report.status}\n                    </Badge>\n                    {report.status === \"Generated\" && (\n                      <Button variant=\"ghost\" size=\"icon\">\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10467},"client/src/components/AdminReviewManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  ArrowLeft, Star, ThumbsUp, ThumbsDown, Flag, \n  Search, Filter, Eye, Trash2, CheckCircle, \n  XCircle, MessageSquare, Calendar, TrendingUp\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminReviewManagementPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [ratingFilter, setRatingFilter] = useState(\"all\");\n\n  const reviews: any[] = []; // Will be populated from actual review data when review system is implemented\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Approved\": return \"bg-success text-success-foreground\";\n      case \"Pending\": return \"bg-warning text-warning-foreground\";\n      case \"Rejected\": return \"bg-destructive text-destructive-foreground\";\n      case \"Flagged\": return \"bg-red-500 text-white\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${i < rating ? 'text-warning fill-warning' : 'text-muted-foreground'}`}\n      />\n    ));\n  };\n\n  const filteredReviews = reviews.filter((review: any) => {\n    const matchesSearch = review?.user?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         review?.itemName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         review?.comment?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRating = ratingFilter === \"all\" || review.rating.toString() === ratingFilter;\n    \n    let matchesStatus = true;\n    if (activeTab !== \"all\") {\n      matchesStatus = review.status.toLowerCase() === activeTab;\n    }\n    \n    return matchesSearch && matchesRating && matchesStatus;\n  });\n\n  const handleApprove = (reviewId: number) => {\n    toast({\n      title: \"Success\",\n      description: \"Review approved successfully!\",\n    });\n  };\n\n  const handleReject = (reviewId: number) => {\n    toast({\n      title: \"Success\",\n      description: \"Review rejected successfully!\",\n    });\n  };\n\n  const handleFlag = (reviewId: number) => {\n    toast({\n      title: \"Success\",\n      description: \"Review flagged for moderation!\",\n      variant: \"destructive\"\n    });\n  };\n\n  const stats = {\n    total: 0,\n    approved: 0,\n    pending: 0,\n    flagged: 0,\n    avgRating: \"0.0\"\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/admin-dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Review Management</h1>\n            <p className=\"text-muted-foreground\">Moderate and manage user reviews</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <MessageSquare className=\"h-4 w-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Reviews</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-success/20 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"h-4 w-4 text-success\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.approved}</p>\n                <p className=\"text-xs text-muted-foreground\">Approved</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.pending}</p>\n                <p className=\"text-xs text-muted-foreground\">Pending</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                <Flag className=\"h-4 w-4 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.flagged}</p>\n                <p className=\"text-xs text-muted-foreground\">Flagged</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-warning/20 rounded-lg flex items-center justify-center\">\n                <Star className=\"h-4 w-4 text-warning\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.avgRating}</p>\n                <p className=\"text-xs text-muted-foreground\">Avg Rating</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-2\">\n        {[\n          { key: \"all\", label: \"All\" },\n          { key: \"pending\", label: \"Pending\" },\n          { key: \"approved\", label: \"Approved\" },\n          { key: \"flagged\", label: \"Flagged\" },\n          { key: \"rejected\", label: \"Rejected\" }\n        ].map(({ key, label }) => (\n          <Button\n            key={key}\n            variant={activeTab === key ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(key)}\n            size=\"sm\"\n          >\n            {label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reviews by user, item, or content...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={ratingFilter} onValueChange={setRatingFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Ratings</SelectItem>\n                <SelectItem value=\"5\">5 Stars</SelectItem>\n                <SelectItem value=\"4\">4 Stars</SelectItem>\n                <SelectItem value=\"3\">3 Stars</SelectItem>\n                <SelectItem value=\"2\">2 Stars</SelectItem>\n                <SelectItem value=\"1\">1 Star</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reviews List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Reviews</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {filteredReviews.map((review) => (\n              <div key={review.id} className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h4 className=\"font-medium text-foreground\">{review.itemName}</h4>\n                      <Badge className={getStatusColor(review.status)}>\n                        {review.status}\n                      </Badge>\n                      {review.verified && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Verified\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">by {review.user}</span>\n                      <span className=\"text-sm text-muted-foreground\">•</span>\n                      <div className=\"flex items-center space-x-1\">\n                        {renderStars(review.rating)}\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">•</span>\n                      <span className=\"text-sm text-muted-foreground\">{review.submittedAt}</span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{review.comment}</p>\n                    <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <ThumbsUp className=\"h-3 w-3\" />\n                        <span>{review.helpfulVotes} helpful</span>\n                      </div>\n                      {review.reportCount > 0 && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Flag className=\"h-3 w-3 text-red-500\" />\n                          <span>{review.reportCount} reports</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    {review.status === \"Pending\" && (\n                      <>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleApprove(review.id)}\n                          className=\"text-success hover:bg-success/10\"\n                        >\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleReject(review.id)}\n                          className=\"text-destructive hover:bg-destructive/10\"\n                        >\n                          <XCircle className=\"h-3 w-3 mr-1\" />\n                          Reject\n                        </Button>\n                      </>\n                    )}\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleFlag(review.id)}\n                    >\n                      <Flag className=\"h-3 w-3\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12404},"client/src/components/AdminSidebar.tsx":{"content":"import { useLocation, Link } from \"wouter\";\nimport {\n  LayoutDashboard,\n  Users,\n  ShoppingCart,\n  Menu,\n  BarChart3,\n  Bell,\n  CreditCard,\n  FileText,\n  Settings,\n  UserPlus,\n  TrendingUp,\n  Package,\n  MessageSquare,\n  Shield,\n  Database,\n  Globe,\n  Star,\n  Clock,\n  DollarSign\n} from \"lucide-react\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nconst mainItems = [\n  { title: \"Overview\", url: \"/admin\", icon: LayoutDashboard },\n  { title: \"Analytics\", url: \"/admin/analytics\", icon: TrendingUp },\n  { title: \"Reports\", url: \"/admin/reports\", icon: BarChart3 },\n];\n\nconst managementItems = [\n  { title: \"User Management\", url: \"/admin/user-management\", icon: Users },\n  { title: \"Order Management\", url: \"/admin/order-management\", icon: ShoppingCart },\n  { title: \"Menu Management\", url: \"/admin/menu-management\", icon: Menu },\n  { title: \"Payment Management\", url: \"/admin/payment-management\", icon: CreditCard },\n  { title: \"Notification Management\", url: \"/admin/notification-management\", icon: Bell },\n];\n\nconst contentItems = [\n  { title: \"Content Management\", url: \"/admin/content-management\", icon: FileText },\n  { title: \"Home Content Editor\", url: \"/admin/home-content\", icon: Globe },\n  { title: \"Feedback Management\", url: \"/admin/feedback-management\", icon: MessageSquare },\n  { title: \"Review Management\", url: \"/admin/review-management\", icon: Star },\n];\n\nconst systemItems = [\n  { title: \"System Settings\", url: \"/admin/system-settings\", icon: Settings },\n  { title: \"Admin Access\", url: \"/admin/admin-access\", icon: Shield },\n  { title: \"Database Management\", url: \"/admin/database\", icon: Database },\n];\n\nexport function AdminSidebar() {\n  const { state } = useSidebar();\n  const [location] = useLocation();\n  const currentPath = location;\n  const collapsed = state === \"collapsed\";\n\n  const isActive = (path: string) => currentPath === path;\n  const getNavCls = ({ isActive }: { isActive: boolean }) =>\n    `flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n      isActive ? \"bg-primary text-primary-foreground font-medium\" : \"hover:bg-muted/50\"\n    }`;\n\n  const renderMenuGroup = (items: typeof mainItems, label: string) => (\n    <SidebarGroup>\n      <SidebarGroupLabel>{!collapsed && label}</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild>\n                <Link \n                  href={item.url} \n                  className={getNavCls({ isActive: isActive(item.url) })}\n                >\n                  <item.icon className=\"h-4 w-4\" />\n                  {!collapsed && <span>{item.title}</span>}\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  );\n\n  return (\n    <Sidebar className={collapsed ? \"w-14\" : \"w-64\"} collapsible=\"icon\">\n      <SidebarContent className=\"py-4\">\n        {renderMenuGroup(mainItems, \"Dashboard\")}\n        {renderMenuGroup(managementItems, \"Management\")}\n        {renderMenuGroup(contentItems, \"Content\")}\n        {renderMenuGroup(systemItems, \"System\")}\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3402},"client/src/components/AdminSystemSettingsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, Save, Shield, Globe, Database, Bell, \n  Mail, Smartphone, CreditCard, FileText, AlertTriangle,\n  Server, Wifi, Lock, Key, Palette, Monitor\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminSystemSettingsPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [generalSettings, setGeneralSettings] = useState({\n    canteenName: \"KIT College Canteen\",\n    operatingHours: \"9:00 AM - 9:00 PM\",\n    deliveryCharges: 20,\n    taxRate: 5,\n    currency: \"INR\",\n    timezone: \"Asia/Kolkata\",\n    language: \"English\"\n  });\n\n  const [features, setFeatures] = useState({\n    onlineOrdering: true,\n    mobileApp: true,\n    smsNotifications: true,\n    emailNotifications: true,\n    pushNotifications: true,\n    loyaltyProgram: false,\n    multiplePayments: true,\n    orderTracking: true,\n    feedbackSystem: true,\n    promotions: true\n  });\n\n  const [security, setSecurity] = useState({\n    twoFactorAuth: false,\n    sessionTimeout: 30,\n    passwordPolicy: \"Standard\",\n    dataEncryption: true,\n    auditLogs: true,\n    backupFrequency: \"Daily\"\n  });\n\n  const [notifications, setNotifications] = useState({\n    orderNotifications: true,\n    lowStockAlerts: true,\n    systemAlerts: true,\n    revenueReports: false,\n    customerFeedback: true\n  });\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"System settings have been updated successfully\",\n    });\n  };\n\n  const toggleFeature = (feature: string) => {\n    setFeatures(prev => ({\n      ...prev,\n      [feature]: !prev[feature as keyof typeof prev]\n    }));\n  };\n\n  const toggleNotification = (notification: string) => {\n    setNotifications(prev => ({\n      ...prev,\n      [notification]: !prev[notification as keyof typeof prev]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">System Settings</h1>\n              <p className=\"text-sm text-muted-foreground\">Configure application settings and features</p>\n            </div>\n          </div>\n          <Button variant=\"food\" onClick={handleSave}>\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save All Changes\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* General Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Globe className=\"w-5 h-5\" />\n              <span>General Settings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"canteenName\">Canteen Name</Label>\n                <Input\n                  id=\"canteenName\"\n                  value={generalSettings.canteenName}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, canteenName: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"operatingHours\">Operating Hours</Label>\n                <Input\n                  id=\"operatingHours\"\n                  value={generalSettings.operatingHours}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, operatingHours: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"deliveryCharges\">Delivery Charges (₹)</Label>\n                <Input\n                  id=\"deliveryCharges\"\n                  type=\"number\"\n                  value={generalSettings.deliveryCharges}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, deliveryCharges: parseInt(e.target.value) }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"taxRate\">Tax Rate (%)</Label>\n                <Input\n                  id=\"taxRate\"\n                  type=\"number\"\n                  value={generalSettings.taxRate}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, taxRate: parseInt(e.target.value) }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Timezone</Label>\n                <Select value={generalSettings.timezone} onValueChange={(value) => setGeneralSettings(prev => ({ ...prev, timezone: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Asia/Kolkata\">Asia/Kolkata (IST)</SelectItem>\n                    <SelectItem value=\"UTC\">UTC</SelectItem>\n                    <SelectItem value=\"America/New_York\">America/New_York (EST)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Feature Controls */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Monitor className=\"w-5 h-5\" />\n              <span>Feature Controls</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {Object.entries(features).map(([feature, enabled]) => (\n                <div key={feature} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div>\n                    <h3 className=\"font-medium capitalize\">{feature.replace(/([A-Z])/g, ' $1').trim()}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {feature === 'onlineOrdering' && 'Allow customers to place orders online'}\n                      {feature === 'mobileApp' && 'Enable mobile application features'}\n                      {feature === 'smsNotifications' && 'Send SMS updates to customers'}\n                      {feature === 'emailNotifications' && 'Send email notifications'}\n                      {feature === 'pushNotifications' && 'Send push notifications to mobile'}\n                      {feature === 'loyaltyProgram' && 'Enable customer loyalty rewards'}\n                      {feature === 'multiplePayments' && 'Accept multiple payment methods'}\n                      {feature === 'orderTracking' && 'Real-time order tracking'}\n                      {feature === 'feedbackSystem' && 'Customer feedback and ratings'}\n                      {feature === 'promotions' && 'Promotional offers and discounts'}\n                    </p>\n                  </div>\n                  <Switch\n                    checked={enabled}\n                    onCheckedChange={() => toggleFeature(feature)}\n                  />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5\" />\n              <span>Security & Privacy</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div>\n                  <h3 className=\"font-medium\">Two-Factor Authentication</h3>\n                  <p className=\"text-sm text-muted-foreground\">Require 2FA for admin accounts</p>\n                </div>\n                <Switch\n                  checked={security.twoFactorAuth}\n                  onCheckedChange={(checked) => setSecurity(prev => ({ ...prev, twoFactorAuth: checked }))}\n                />\n              </div>\n              <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div>\n                  <h3 className=\"font-medium\">Data Encryption</h3>\n                  <p className=\"text-sm text-muted-foreground\">Encrypt sensitive data</p>\n                </div>\n                <Switch\n                  checked={security.dataEncryption}\n                  onCheckedChange={(checked) => setSecurity(prev => ({ ...prev, dataEncryption: checked }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Session Timeout (minutes)</Label>\n                <Input\n                  type=\"number\"\n                  value={security.sessionTimeout}\n                  onChange={(e) => setSecurity(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Password Policy</Label>\n                <Select value={security.passwordPolicy} onValueChange={(value) => setSecurity(prev => ({ ...prev, passwordPolicy: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Basic\">Basic (6+ characters)</SelectItem>\n                    <SelectItem value=\"Standard\">Standard (8+ chars, mixed case)</SelectItem>\n                    <SelectItem value=\"Strong\">Strong (12+ chars, symbols)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Bell className=\"w-5 h-5\" />\n              <span>Notification Settings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {Object.entries(notifications).map(([notification, enabled]) => (\n                <div key={notification} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div>\n                    <h3 className=\"font-medium capitalize\">{notification.replace(/([A-Z])/g, ' $1').trim()}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {notification === 'orderNotifications' && 'Get notified about new orders'}\n                      {notification === 'lowStockAlerts' && 'Alerts when inventory is low'}\n                      {notification === 'systemAlerts' && 'System health and error notifications'}\n                      {notification === 'revenueReports' && 'Daily revenue summary emails'}\n                      {notification === 'customerFeedback' && 'New customer feedback notifications'}\n                    </p>\n                  </div>\n                  <Switch\n                    checked={enabled}\n                    onCheckedChange={() => toggleNotification(notification)}\n                  />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Health */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Server className=\"w-5 h-5\" />\n              <span>System Health & Maintenance</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"p-4 border rounded-lg text-center\">\n                  <Database className=\"w-8 h-8 mx-auto mb-2 text-success\" />\n                  <p className=\"font-medium\">Database</p>\n                  <Badge variant=\"default\">Healthy</Badge>\n                </div>\n                <div className=\"p-4 border rounded-lg text-center\">\n                  <Wifi className=\"w-8 h-8 mx-auto mb-2 text-success\" />\n                  <p className=\"font-medium\">Network</p>\n                  <Badge variant=\"default\">Online</Badge>\n                </div>\n                <div className=\"p-4 border rounded-lg text-center\">\n                  <Server className=\"w-8 h-8 mx-auto mb-2 text-warning\" />\n                  <p className=\"font-medium\">Server</p>\n                  <Badge variant=\"secondary\">Maintenance</Badge>\n                </div>\n                <div className=\"p-4 border rounded-lg text-center\">\n                  <Shield className=\"w-8 h-8 mx-auto mb-2 text-success\" />\n                  <p className=\"font-medium\">Security</p>\n                  <Badge variant=\"default\">Secure</Badge>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Backup Now\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Export Logs\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                  System Check\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Monitor className=\"w-4 h-4 mr-2\" />\n                  Performance\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Integration Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Globe className=\"w-5 h-5\" />\n              <span>Integrations & APIs</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium flex items-center space-x-2\">\n                      <CreditCard className=\"w-4 h-4\" />\n                      <span>Payment Gateway</span>\n                    </h3>\n                    <Badge variant=\"default\">Active</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Razorpay integration for payments</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">Configure</Button>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium flex items-center space-x-2\">\n                      <Mail className=\"w-4 h-4\" />\n                      <span>Email Service</span>\n                    </h3>\n                    <Badge variant=\"secondary\">Inactive</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">SMTP configuration for emails</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">Setup</Button>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium flex items-center space-x-2\">\n                      <Smartphone className=\"w-4 h-4\" />\n                      <span>SMS Service</span>\n                    </h3>\n                    <Badge variant=\"default\">Active</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">SMS notifications via Twilio</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">Configure</Button>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium flex items-center space-x-2\">\n                      <Key className=\"w-4 h-4\" />\n                      <span>API Access</span>\n                    </h3>\n                    <Badge variant=\"default\">Enabled</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">External API access keys</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">Manage</Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17565},"client/src/components/AdminUserManagementPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  ArrowLeft, Search, Filter, Plus, Edit, Trash2, Mail, Phone, \n  MapPin, Star, Ban, Shield, Users, UserCheck, UserX, \n  MessageSquare, CreditCard, Gift, AlertTriangle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminUserManagementPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"all-users\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRole, setFilterRole] = useState(\"all\");\n\n  // Fetch real users from database\n  const [users, setUsers] = useState<any[]>([]);\n\n  // Fetch real complaints from database\n  const [complaints, setComplaints] = useState<any[]>([]);\n\n  const handleUserAction = (userId: number, action: string) => {\n    setUsers(prev => prev.map(user => \n      user.id === userId \n        ? { ...user, status: action === 'activate' ? 'Active' : action === 'suspend' ? 'Suspended' : 'Blocked' }\n        : user\n    ));\n    \n    toast({\n      title: \"Action Completed\",\n      description: `User has been ${action}d successfully`,\n    });\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = filterRole === \"all\" || user.role.toLowerCase() === filterRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const stats = {\n    totalUsers: users.length,\n    activeUsers: users.filter(u => u.status === \"Active\").length,\n    suspendedUsers: users.filter(u => u.status === \"Suspended\").length,\n    newUsersThisMonth: 0,\n    totalRevenue: 0,\n    avgOrderValue: 0\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">User Management</h1>\n              <p className=\"text-sm text-muted-foreground\">Manage customers, staff, and administrators</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"all-users\" className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span>All Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n              <Star className=\"w-4 h-4\" />\n              <span>Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"complaints\" className=\"flex items-center space-x-2\">\n              <MessageSquare className=\"w-4 h-4\" />\n              <span>Complaints</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"bulk-actions\" className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Bulk Actions</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* All Users Tab */}\n          <TabsContent value=\"all-users\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"w-5 h-5 text-primary\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                        <p className=\"text-2xl font-bold\">{stats.totalUsers}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <UserCheck className=\"w-5 h-5 text-success\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Active</p>\n                        <p className=\"text-2xl font-bold\">{stats.activeUsers}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <UserX className=\"w-5 h-5 text-warning\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Suspended</p>\n                        <p className=\"text-2xl font-bold\">{stats.suspendedUsers}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Plus className=\"w-5 h-5 text-blue-500\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">New This Month</p>\n                        <p className=\"text-2xl font-bold\">{stats.newUsersThisMonth}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Search and Filters */}\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                        <Input\n                          placeholder=\"Search users by name or email...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"pl-10\"\n                        />\n                      </div>\n                    </div>\n                    <Select value={filterRole} onValueChange={setFilterRole}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue placeholder=\"Filter by role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Roles</SelectItem>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"faculty\">Faculty</SelectItem>\n                        <SelectItem value=\"staff\">Staff</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button variant=\"food\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add User\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New User</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label>Name</Label>\n                              <Input placeholder=\"Full name\" />\n                            </div>\n                            <div>\n                              <Label>Email</Label>\n                              <Input placeholder=\"email@kit.ac.in\" />\n                            </div>\n                            <div>\n                              <Label>Phone</Label>\n                              <Input placeholder=\"+91 XXXXXXXXXX\" />\n                            </div>\n                            <div>\n                              <Label>Role</Label>\n                              <Select>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select role\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"student\">Student</SelectItem>\n                                  <SelectItem value=\"faculty\">Faculty</SelectItem>\n                                  <SelectItem value=\"staff\">Staff</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                          <div>\n                            <Label>Address</Label>\n                            <Textarea placeholder=\"Enter address\" />\n                          </div>\n                          <Button variant=\"food\" className=\"w-full\" onClick={() => {\n                            toast({\n                              title: \"User Created\",\n                              description: \"New user has been created successfully\",\n                            });\n                          }}>Create User</Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Users List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Users ({filteredUsers.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredUsers.map((user) => (\n                      <div key={user.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start space-x-4\">\n                            <Avatar className=\"w-12 h-12\">\n                              <AvatarImage src={user.avatar} alt={user.name} />\n                              <AvatarFallback>{user.name?.split(' ').map((n: string) => n[0]).join('') || 'U'}</AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <h3 className=\"font-semibold\">{user.name}</h3>\n                                <Badge variant={user.status === \"Active\" ? \"default\" : user.status === \"Suspended\" ? \"destructive\" : \"secondary\"}>\n                                  {user.status}\n                                </Badge>\n                              </div>\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center space-x-1\">\n                                  <Mail className=\"w-3 h-3\" />\n                                  <span>{user.email}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <Phone className=\"w-3 h-3\" />\n                                  <span>{user.phone}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <Shield className=\"w-3 h-3\" />\n                                  <span>{user.role}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\">\n                                  <MapPin className=\"w-3 h-3\" />\n                                  <span>{user.address}</span>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-2 text-sm\">\n                                <div>\n                                  <span className=\"text-muted-foreground\">Orders: </span>\n                                  <span className=\"font-medium\">{user.orders}</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Spent: </span>\n                                  <span className=\"font-medium\">₹{user.totalSpent}</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Rating: </span>\n                                  <span className=\"font-medium\">{user.avgRating}/5</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Points: </span>\n                                  <span className=\"font-medium\">{user.loyaltyPoints}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col space-y-1\">\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n                              toast({\n                                title: \"Edit User\",\n                                description: `Opening edit form for ${user.name}`,\n                              });\n                            }}>\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            {user.status === \"Active\" ? (\n                              <Button variant=\"ghost\" size=\"sm\" onClick={() => handleUserAction(user.id, \"suspend\")}>\n                                <Ban className=\"w-4 h-4\" />\n                              </Button>\n                            ) : (\n                              <Button variant=\"ghost\" size=\"sm\" onClick={() => handleUserAction(user.id, \"activate\")}>\n                                <UserCheck className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-destructive\" onClick={() => {\n                              if (window.confirm('Are you sure you want to delete this user?')) {\n                                setUsers(prev => prev.filter(u => u.id !== user.id));\n                                toast({\n                                  title: \"User Deleted\",\n                                  description: `${user.name} has been deleted successfully`,\n                                });\n                              }\n                            }}>\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"mt-6\">\n            <div className=\"grid gap-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Revenue Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Revenue</span>\n                        <span className=\"font-bold\">₹{stats.totalRevenue.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Average Order Value</span>\n                        <span className=\"font-bold\">₹{stats.avgOrderValue}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Top Spending User</span>\n                        <span className=\"font-bold\">Dr. Priya Sharma</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>User Behavior</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>Most Active Role</span>\n                        <span className=\"font-bold\">Faculty</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Peak Usage Time</span>\n                        <span className=\"font-bold\">12:00 - 2:00 PM</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Avg Session Duration</span>\n                        <span className=\"font-bold\">8.5 minutes</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Complaints Tab */}\n          <TabsContent value=\"complaints\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Complaints & Issues</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {complaints.map((complaint) => (\n                    <div key={complaint.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold\">{complaint.subject}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{complaint.userName} • {complaint.date}</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={complaint.priority === \"High\" ? \"destructive\" : complaint.priority === \"Medium\" ? \"secondary\" : \"default\"}>\n                            {complaint.priority}\n                          </Badge>\n                          <Badge variant={complaint.status === \"Open\" ? \"destructive\" : \"default\"}>\n                            {complaint.status}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">{complaint.description}</p>\n                      <div className=\"flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                            toast({\n                              title: \"Reply Sent\",\n                              description: \"Reply has been sent to the user\",\n                            });\n                          }}>Reply</Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                            setComplaints(prev => prev.map(c => \n                              c.id === complaint.id ? { ...c, status: 'Resolved' } : c\n                            ));\n                            toast({\n                              title: \"Complaint Resolved\",\n                              description: \"Complaint has been marked as resolved\",\n                            });\n                          }}>Resolve</Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                            toast({\n                              title: \"Complaint Escalated\",\n                              description: \"Complaint has been escalated to management\",\n                            });\n                          }}>Escalate</Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Bulk Actions Tab */}\n          <TabsContent value=\"bulk-actions\" className=\"mt-6\">\n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Bulk User Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                      onClick={() => setLocation(\"/admin/user-management/send-email\")}\n                    >\n                      <Mail className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Send Email</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                      onClick={() => setLocation(\"/admin/user-management/add-loyalty-points\")}\n                    >\n                      <Gift className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Add Loyalty Points</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                      onClick={() => setLocation(\"/admin/user-management/apply-discount\")}\n                    >\n                      <CreditCard className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Apply Discount</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                      onClick={() => setLocation(\"/admin/user-management/send-warning\")}\n                    >\n                      <AlertTriangle className=\"w-6 h-6\" />\n                      <span className=\"text-sm\">Send Warning</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Data Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                    <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management/export-data\")}>Export User Data</Button>\n                    <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management/import-users\")}>Import Users</Button>\n                    <Button variant=\"outline\" onClick={() => {\n                      toast({\n                        title: \"Database Backup\",\n                        description: \"Database backup has been initiated\",\n                      });\n                    }}>Backup Database</Button>\n                    <Button variant=\"outline\" onClick={() => {\n                      toast({\n                        title: \"Report Generated\",\n                        description: \"User report has been generated successfully\",\n                      });\n                    }}>Generate Report</Button>\n                    <Button variant=\"outline\" onClick={() => {\n                      if (window.confirm('Are you sure you want to clean inactive users?')) {\n                        toast({\n                          title: \"Cleanup Complete\",\n                          description: \"Inactive users have been cleaned up\",\n                        });\n                      }\n                    }}>Clean Inactive Users</Button>\n                    <Button variant=\"outline\" onClick={() => {\n                      toast({\n                        title: \"Permissions Updated\",\n                        description: \"User permissions have been updated\",\n                      });\n                    }}>Update Permissions</Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25443},"client/src/components/BarcodeScannerPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ArrowLeft, CheckCircle, Plus, Trash2, ShoppingCart, AlertTriangle } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function BarcodeScannerPage() {\n  const [, setLocation] = useLocation();\n  const [orderId, setOrderId] = useState(\"\");\n  \n  // Manual order creation state\n  const [isMenuModalOpen, setIsMenuModalOpen] = useState(false);\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  // Sample menu items - in real app, this would come from API\n  const menuItems = [\n    { id: 1, name: \"Veg Thali\", price: 60, category: \"Veg\", available: true, stock: 20 },\n    { id: 2, name: \"Paneer Curry\", price: 70, category: \"Veg\", available: true, stock: 15 },\n    { id: 3, name: \"Rice\", price: 25, category: \"Staples\", available: true, stock: 100 },\n    { id: 4, name: \"Coffee\", price: 15, category: \"Beverages\", available: true, stock: 50 },\n    { id: 5, name: \"Chicken Curry\", price: 80, category: \"Non-Veg\", available: true, stock: 10 },\n  ];\n\n  const handleSubmit = () => {\n    if (!orderId.trim()) {\n      toast.error(\"Please enter an Order ID\");\n      return;\n    }\n    \n    // Validate 12-digit numeric format\n    const orderIdPattern = /^[0-9]{12}$/;\n    if (!orderIdPattern.test(orderId)) {\n      toast.error(\"Order ID must be exactly 12 digits (numbers only)\");\n      return;\n    }\n    \n    toast.success(`Processing Order ID: ${orderId}`);\n    // Navigate to order status or processing page\n    setLocation(`/order-status/${orderId}`);\n  };\n\n  // Manual order creation handlers\n  const handleAddItemToOrder = (menuItem, quantity = 1) => {\n    const existingItem = selectedItems.find(item => item.id === menuItem.id);\n    if (existingItem) {\n      setSelectedItems(selectedItems.map(item => \n        item.id === menuItem.id \n          ? { ...item, quantity: item.quantity + quantity }\n          : item\n      ));\n    } else {\n      setSelectedItems([...selectedItems, { ...menuItem, quantity }]);\n    }\n  };\n\n  const handleRemoveItemFromOrder = (itemId) => {\n    setSelectedItems(selectedItems.filter(item => item.id !== itemId));\n  };\n\n  const handleUpdateItemQuantity = (itemId, quantity) => {\n    if (quantity <= 0) {\n      handleRemoveItemFromOrder(itemId);\n      return;\n    }\n    setSelectedItems(selectedItems.map(item => \n      item.id === itemId ? { ...item, quantity } : item\n    ));\n  };\n\n  const calculateOrderTotal = () => {\n    return selectedItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const handleCreateManualOrder = async () => {\n    if (selectedItems.length === 0) {\n      toast.error(\"Please add at least one item\");\n      return;\n    }\n\n    try {\n      const orderData = {\n        customerId: 6, // Temporary - should get from auth\n        customerName: \"Manual Order\",\n        items: JSON.stringify(selectedItems),\n        amount: calculateOrderTotal(),\n        status: \"preparing\",\n        estimatedTime: 15\n      };\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      });\n\n      if (response.ok) {\n        const order = await response.json();\n        toast.success(`Order created: ${order.orderNumber} - Total: ₹${order.amount}`);\n        \n        // Reset form and close modal\n        setSelectedItems([]);\n        setIsMenuModalOpen(false);\n      } else {\n        toast.error(\"Failed to create order\");\n      }\n    } catch (error) {\n      toast.error(\"Error creating order\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center justify-between\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation(\"/canteen-owner\")}\n            className=\"flex items-center\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Order Entry</h1>\n          <Button \n            onClick={() => setIsMenuModalOpen(true)}\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            <ShoppingCart className=\"w-4 h-4 mr-2\" />\n            Quick Order\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Order ID Entry Section */}\n        <Card className=\"shadow-card\">\n          <CardHeader>\n            <CardTitle>Enter Order ID</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"orderId\">Order ID</Label>\n              <Input\n                id=\"orderId\"\n                placeholder=\"e.g., A1B2C3D4E5F6\"\n                value={orderId}\n                onChange={(e) => setOrderId(e.target.value.toUpperCase())}\n                maxLength={12}\n              />\n            </div>\n\n            {orderId && (\n              <Alert className={\n                /^[A-Z0-9]{12}$/.test(orderId) \n                  ? \"border-green-500/50 text-green-600 dark:border-green-500 [&>svg]:text-green-600\"\n                  : \"border-amber-500/50 text-amber-600 dark:border-amber-500 [&>svg]:text-amber-600\"\n              }>\n                {/^[A-Z0-9]{12}$/.test(orderId) ? (\n                  <CheckCircle className=\"h-4 w-4\" />\n                ) : (\n                  <AlertTriangle className=\"h-4 w-4\" />\n                )}\n                <AlertDescription>\n                  {/^[A-Z0-9]{12}$/.test(orderId) \n                    ? `Valid Order ID: ${orderId}`\n                    : `Invalid format. Expected 12 characters (A-Z, 0-9): ${orderId.length}/12`\n                  }\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              onClick={handleSubmit}\n              className=\"w-full\"\n              size=\"lg\"\n              disabled={!orderId.trim()}\n            >\n              Submit Order ID\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Quick Order Menu Modal */}\n        <Dialog open={isMenuModalOpen} onOpenChange={setIsMenuModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Quick Order Menu</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              {/* Menu Items Selection */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-medium\">Available Items</h3>\n                <div className=\"grid grid-cols-1 gap-2 max-h-64 overflow-y-auto border rounded p-3\">\n                  {menuItems.filter(item => item.available).map((item) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 border rounded hover:bg-accent/50\">\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{item.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{item.category}</div>\n                        <div className=\"text-lg font-semibold text-primary\">₹{item.price}</div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleAddItemToOrder(item)}\n                      >\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Add\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Selected Items */}\n              {selectedItems.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Order Summary</h3>\n                  <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                    {selectedItems.map((item) => (\n                      <div key={item.id} className=\"flex items-center justify-between p-3 bg-accent/50 rounded\">\n                        <div>\n                          <span className=\"font-medium\">{item.name}</span>\n                          <span className=\"text-sm text-muted-foreground ml-2\">₹{item.price} each</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUpdateItemQuantity(item.id, item.quantity - 1)}\n                          >\n                            -\n                          </Button>\n                          <span className=\"w-8 text-center font-medium\">{item.quantity}</span>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUpdateItemQuantity(item.id, item.quantity + 1)}\n                          >\n                            +\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => handleRemoveItemFromOrder(item.id)}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Order Total */}\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <span className=\"text-lg font-semibold\">Total:</span>\n                      <span className=\"text-2xl font-bold text-primary\">₹{calculateOrderTotal()}</span>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedItems([]);\n                          setIsMenuModalOpen(false);\n                        }}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleCreateManualOrder}\n                        disabled={selectedItems.length === 0}\n                        className=\"flex-1\"\n                        size=\"lg\"\n                      >\n                        Create Order\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":11379},"client/src/components/BottomNavigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Home, ShoppingCart, Clock, User, UtensilsCrossed } from \"lucide-react\";\n\ninterface BottomNavigationProps {\n  currentPage: \"home\" | \"menu\" | \"cart\" | \"orders\" | \"profile\";\n}\n\nexport default function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [, setLocation] = useLocation();\n\n  const navigationItems = [\n    { id: \"home\", label: \"Home\", icon: Home, route: \"/home\" },\n    { id: \"menu\", label: \"Menu\", icon: UtensilsCrossed, route: \"/menu/all\" },\n    { id: \"cart\", label: \"Cart\", icon: ShoppingCart, route: \"/cart\" },\n    { id: \"orders\", label: \"Orders\", icon: Clock, route: \"/orders\" },\n    { id: \"profile\", label: \"Profile\", icon: User, route: \"/profile\" }\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-border z-50\">\n      <div className=\"flex\">\n        {navigationItems.map((item) => {\n          const isActive = currentPage === item.id;\n          return (\n            <button\n              key={item.id}\n              onClick={() => setLocation(item.route)}\n              className={`flex-1 flex flex-col items-center py-3 px-2 transition-colors ${\n                isActive \n                  ? \"text-primary\" \n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              <item.icon className={`w-5 h-5 ${isActive ? \"fill-current\" : \"\"}`} />\n              <span className=\"text-xs mt-1 font-medium\">{item.label}</span>\n              {isActive && (\n                <div className=\"w-1 h-1 bg-primary rounded-full mt-1\"></div>\n              )}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":1688},"client/src/components/CanteenOrderDetailPage.tsx":{"content":"import { useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { toast } from \"sonner\";\nimport { \n  ArrowLeft, \n  Clock, \n  Receipt, \n  User,\n  Phone,\n  CreditCard,\n  CheckCircle,\n  XCircle,\n  ChefHat,\n  Loader2\n} from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function CanteenOrderDetailPage() {\n  const [, setLocation] = useLocation();\n  const { orderId } = useParams();\n  const queryClient = useQueryClient();\n\n  // Fetch real order data from database, supporting both ID and barcode lookup\n  const { data: orderDetails, isLoading, error } = useQuery<Order>({\n    queryKey: ['/api/orders', orderId],\n    queryFn: async () => {\n      // Try to fetch by database ID first\n      try {\n        const response = await fetch(`/api/orders/${orderId}`);\n        if (response.ok) {\n          return response.json();\n        }\n      } catch (error) {\n        // If ID lookup fails, continue to barcode lookup\n      }\n      \n      // Fallback: search all orders for matching barcode or order number\n      const ordersResponse = await fetch('/api/orders');\n      if (!ordersResponse.ok) {\n        throw new Error('Failed to fetch orders');\n      }\n      const orders = await ordersResponse.json();\n      const order = orders.find((o: Order) => \n        o.barcode === orderId || o.orderNumber === orderId\n      );\n      \n      if (!order) {\n        throw new Error('Order not found');\n      }\n      \n      return order;\n    },\n    enabled: !!orderId,\n  });\n\n  // Parse order items from JSON string\n  const parsedItems = orderDetails?.items ? (() => {\n    try {\n      return JSON.parse(orderDetails.items);\n    } catch {\n      return [];\n    }\n  })() : [];\n\n  // Update order status mutation\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async (newStatus: string) => {\n      const response = await fetch(`/api/orders/${orderId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status: newStatus })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update order status');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });\n      toast.success('Order status updated successfully');\n    },\n    onError: () => {\n      toast.error('Failed to update order status');\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-warning text-warning-foreground\";\n      case \"preparing\": return \"bg-blue-500 text-white\";\n      case \"ready\": return \"bg-success text-success-foreground\";\n      case \"completed\": return \"bg-muted text-muted-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const handleStatusUpdate = (newStatus: string) => {\n    updateOrderStatusMutation.mutate(newStatus);\n  };\n\n  const handleMarkReady = () => {\n    handleStatusUpdate(\"ready\");\n  };\n\n  const handleCompleteOrder = () => {\n    handleStatusUpdate(\"completed\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"w-6 h-6 animate-spin\" />\n          <span>Loading order details...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !orderDetails) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-2\">Order Not Found</h2>\n          <p className=\"text-muted-foreground mb-4\">The order you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/canteen-owner')}>Back to Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-card border-b px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => {\n              if (window.history.length > 1) {\n                window.history.back();\n              } else {\n                setLocation('/canteen-owner');\n              }\n            }}>\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold\">Order Details</h1>\n              <p className=\"text-sm text-muted-foreground\">Order #{orderDetails.orderNumber || orderDetails.id}</p>\n            </div>\n          </div>\n          <Badge className={getStatusColor(orderDetails.status)}>\n            {orderDetails.status.charAt(0).toUpperCase() + orderDetails.status.slice(1)}\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Order Status & Actions */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">Order placed at</p>\n                <p className=\"font-semibold\">{new Date(orderDetails.createdAt).toLocaleString()}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Estimated time</p>\n                <p className=\"font-semibold\">{orderDetails.estimatedTime || 15} mins</p>\n              </div>\n            </div>\n\n            {/* Action Buttons based on status */}\n            <div className=\"flex gap-2\">\n              {orderDetails.status === \"preparing\" && (\n                <Button \n                  onClick={handleMarkReady}\n                  className=\"w-full bg-success text-success-foreground hover:bg-success/90\"\n                  disabled={updateOrderStatusMutation.isPending}\n                >\n                  <ChefHat className=\"w-4 h-4 mr-2\" />\n                  Mark as Ready\n                </Button>\n              )}\n\n              {orderDetails.status === \"ready\" && (\n                <Button \n                  onClick={handleCompleteOrder}\n                  className=\"w-full bg-success text-success-foreground hover:bg-success/90\"\n                  disabled={updateOrderStatusMutation.isPending}\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Complete Order\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Items */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between p-4 bg-muted/20 rounded-lg mb-4\">\n              <span className=\"font-medium\">Order Items ({parsedItems.length})</span>\n              <Receipt className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n\n            <div className=\"space-y-3\">\n              {parsedItems.map((item: any, index: number) => (\n                <div key={index} className=\"flex items-center space-x-4 p-4 border rounded-lg\">\n                  <div className=\"w-12 h-12 rounded-lg bg-accent/50 flex items-center justify-center\">\n                    <span className=\"text-2xl\">🍽️</span>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h4 className=\"font-medium\">{item.name || 'Unknown Item'}</h4>\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 text-xs\">VEG</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">₹{item.price || 0} each</p>\n                    {item.specialInstructions && (\n                      <p className=\"text-sm text-primary mt-1\">Special Instructions: {item.specialInstructions}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">x{item.quantity || 1}</p>\n                    <p className=\"text-sm font-bold\">₹{(item.price || 0) * (item.quantity || 1)}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customer Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Customer Details\n            </h2>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"font-medium\">{orderDetails.customerName || 'N/A'}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                <span>N/A</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Summary */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <CreditCard className=\"w-5 h-5 mr-2\" />\n              Payment Summary\n            </h2>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>Total Amount</span>\n                <span className=\"font-bold text-lg\">₹{orderDetails.amount}</span>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex justify-between items-center\">\n                <span>Payment Status</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                  Paid\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10512},"client/src/components/CanteenOwnerDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BarcodeScanner } from '@capacitor-community/barcode-scanner';\nimport type { MenuItem, Category, Order } from \"@shared/schema\";\nimport { formatOrderIdDisplay } from \"@shared/utils\";\nimport SyncStatus from \"./SyncStatus\";\nimport TestLogoutButton from \"./TestLogoutButton\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport BarcodeDisplay from \"./BarcodeDisplay\";\nimport { \n  ChefHat, \n  DollarSign, \n  ShoppingBag, \n  Users, \n  TrendingUp,\n  Clock,\n  Star,\n  Settings,\n  Plus,\n  Edit3,\n  Trash2,\n  Package,\n  Bell,\n  Eye,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  BarChart3,\n  ScanLine,\n  X,\n  RefreshCcw\n} from \"lucide-react\";\n\nexport default function CanteenOwnerDashboard() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { user, isAuthenticated, isCanteenOwner } = useAuthSync();\n  \n  // Scanner state - completely rewritten for better control\n  const [isScanning, setIsScanning] = useState(false);\n  const [manualBarcode, setManualBarcode] = useState(\"\");\n  const [scanResult, setScanResult] = useState<any>(null);\n  const [scanError, setScanError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Enhanced security check - redirect if not authenticated OR not canteen owner\n  useEffect(() => {\n    if (!isAuthenticated || !isCanteenOwner) {\n      toast.error(\"Access denied. Canteen owner authentication required.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, isCanteenOwner, setLocation]);\n\n  // Real-time Server-Sent Events connection for order notifications\n  useEffect(() => {\n    if (!isAuthenticated || !isCanteenOwner) return;\n\n    const eventSource = new EventSource('/api/events/orders');\n    \n    eventSource.onopen = () => {\n      console.log('🔗 Connected to real-time order updates via SSE');\n    };\n    \n    eventSource.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        if (message.type === 'new_order') {\n          // Invalidate orders query to trigger refetch\n          queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n          \n          // Show notification toast for new order\n          toast.success(`📋 New Order Received! #${message.data.orderNumber}`, {\n            description: `Customer: ${message.data.customerName} | Amount: ₹${message.data.amount}`,\n            duration: 6000,\n          });\n          \n          console.log('📢 New order received:', message.data);\n        } else if (message.type === 'connected') {\n          console.log('✅ SSE connection established:', message.message);\n        }\n      } catch (error) {\n        console.error('Error processing SSE message:', error);\n      }\n    };\n    \n    eventSource.onerror = (error) => {\n      console.error('SSE connection error:', error);\n    };\n    \n    // Cleanup SSE connection on component unmount\n    return () => {\n      eventSource.close();\n    };\n  }, [isAuthenticated, isCanteenOwner]);\n\n  // Return early if not properly authenticated\n  if (!isAuthenticated || !isCanteenOwner) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">Canteen owner authentication required</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n  \n  // Fetch real data from database using React Query with proper typing\n  const { data: categories = [], isLoading: categoriesLoading, refetch: refetchCategories, error: categoriesError } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      const data = await response.json();\n      return data;\n    },\n    staleTime: 0, // Always refetch\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: orders = [], isLoading: ordersLoading, refetch: refetchOrders } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/orders');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch orders: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  const { data: menuItems = [], isLoading: menuItemsLoading, refetch: refetchMenuItems, error: menuItemsError } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    queryFn: async () => {\n      const response = await fetch('/api/menu');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch menu items: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    },\n    staleTime: 0,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Data is synchronized with real-time updates\n\n  const [newCategory, setNewCategory] = useState(\"\");\n\n  const [newItem, setNewItem] = useState({ name: \"\", price: \"\", category: \"\", stock: \"\", barcode: \"\", description: \"\", addOns: [] as any[] });\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [editAddOns, setEditAddOns] = useState<Array<{ name: string; price: string }>>([]);\n  const [isScannerActive, setIsScannerActive] = useState(false);\n  const [stockUpdateItem, setStockUpdateItem] = useState<any>(null);\n  const [newStockAmount, setNewStockAmount] = useState(\"\");\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  // Fetch real notifications from database\n  const [notifications, setNotifications] = useState<any[]>([]);\n  const [settings, setSettings] = useState({\n    canteenName: \"KIT Main Canteen\",\n    workingHours: { open: \"08:00\", close: \"20:00\" },\n    notifications: {\n      newOrders: true,\n      lowStock: true,\n      orderReady: true,\n      dailyReports: false\n    },\n    operationalSettings: {\n      autoAcceptOrders: true,\n      maxOrdersPerHour: 50,\n      preparationTime: 15\n    }\n  });\n\n\n  const stats = [\n    { title: \"Today's Orders\", value: orders.length.toString(), icon: ShoppingBag, trend: \"+12%\" },\n    { title: \"Revenue\", value: `₹${orders.reduce((sum: number, order: Order) => sum + order.amount, 0)}`, icon: DollarSign, trend: \"+8%\" },\n    { title: \"Active Menu Items\", value: menuItems.filter((item: MenuItem) => item.available).length.toString(), icon: ChefHat, trend: \"+3\" },\n    { title: \"Avg Rating\", value: \"4.8\", icon: Star, trend: \"+0.2\" }\n  ];\n\n  const handleOrderStatusUpdate = (orderId: any, newStatus: any) => {\n    // Update order status using correct API endpoint\n    updateOrderStatusMutation.mutate({ id: orderId, status: newStatus });\n  };\n\n  // Enhanced mutations with comprehensive synchronization\n  const addMenuItemMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('/api/menu', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: () => {\n      // Comprehensive cache invalidation for all dashboards\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      refetchMenuItems(); // Force immediate refetch\n      toast.success(\"Menu item added successfully - synced across all dashboards\");\n      setNewItem({ name: \"\", price: \"\", category: \"\", stock: \"\", barcode: \"\", description: \"\", addOns: [] });\n    },\n    onError: () => {\n      toast.error(\"Failed to add menu item\");\n    }\n  });\n\n  // Update menu item mutation with enhanced sync\n  const updateMenuItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return apiRequest(`/api/menu/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: () => {\n      // Comprehensive synchronization\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      refetchMenuItems();\n      toast.success(\"Menu item updated successfully - synced across all dashboards\");\n    },\n    onError: () => {\n      toast.error(\"Failed to update menu item\");\n    }\n  });\n\n  // Delete menu item mutation with enhanced sync\n  const deleteMenuItemMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/menu/${id}`, { \n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to delete menu item: ${response.status}`);\n      }\n      \n      return { success: true };\n    },\n    onSuccess: (data, variables) => {\n      // Comprehensive synchronization\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      \n      // Force refetch to ensure UI updates\n      refetchMenuItems();\n      \n      toast.success(\"Menu item deleted successfully\");\n    },\n    onError: (error, variables) => {\n      // Failed to delete menu item\n      toast.error(\"Failed to delete menu item\");\n    }\n  });\n\n  // Add category mutation with enhanced sync\n  const addCategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('/api/categories', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: () => {\n      // Comprehensive synchronization across all dashboards\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/menu'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/analytics'] });\n      refetchCategories(); // Force immediate refetch\n      refetchMenuItems(); // Also refetch menu items since they depend on categories\n      toast.success(\"Category added successfully - synced across all dashboards\");\n      setNewCategory(\"\");\n    },\n    onError: (error: any) => {\n      // Category mutation failed - handle different error types\n      if (error?.message?.includes(\"already exists\") || error?.status === 409) {\n        toast.error(\"Category already exists\");\n      } else {\n        toast.error(\"Failed to add category\");\n      }\n    }\n  });\n\n  // Order status update mutation - correctly calls /api/orders endpoint\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      return apiRequest(`/api/orders/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: (data, variables) => {\n      // Refresh orders list to show updated status\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      refetchOrders();\n      toast.success(`Order ${variables.id} marked as ${variables.status}`);\n    },\n    onError: (error: any, variables) => {\n      toast.error(`Failed to update order ${variables.id} status`);\n      console.error('Order status update error:', error);\n    }\n  });\n\n  const handleAddMenuItem = () => {\n    if (!newItem.name || !newItem.price) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n    \n    // Find category ID from name\n    const selectedCategory = (categories as any[]).find((cat: any) => cat.name === newItem.category);\n    \n    const itemData = {\n      name: newItem.name,\n      price: parseInt(newItem.price),\n      categoryId: selectedCategory ? selectedCategory.id : null,\n      available: true,\n      stock: parseInt(newItem.stock) || 0,\n      description: newItem.description || \"\",\n      addOns: JSON.stringify(newItem.addOns.filter(addon => addon.name && addon.name.trim()))\n    };\n    \n    addMenuItemMutation.mutate(itemData);\n  };\n\n  const startBarcodeScanner = async () => {\n    try {\n      setIsScannerActive(true);\n      \n      // Check permission\n      const permission = await BarcodeScanner.checkPermission({ force: true });\n      \n      if (permission.granted) {\n        // Make background transparent\n        document.body.classList.add('scanner-active');\n        BarcodeScanner.hideBackground();\n        \n        const result = await BarcodeScanner.startScan();\n        \n        if (result.hasContent) {\n          setNewItem({...newItem, barcode: result.content});\n          toast.success(`Barcode scanned: ${result.content}`);\n        }\n      } else {\n        toast.error(\"Camera permission is required to scan barcodes\");\n      }\n    } catch (error) {\n      toast.error(\"Failed to start barcode scanner\");\n      // Barcode scanner error - show user-friendly message\n    } finally {\n      stopBarcodeScanner();\n    }\n  };\n\n  const stopBarcodeScanner = () => {\n    setIsScannerActive(false);\n    BarcodeScanner.showBackground();\n    BarcodeScanner.stopScan();\n    document.body.classList.remove('scanner-active');\n  };\n\n  const handleUpdateMenuItem = () => {\n    const updatedData = {\n      ...editingItem,\n      addOns: JSON.stringify(editAddOns.filter(addon => addon.name && addon.price))\n    };\n    updateMenuItemMutation.mutate({ id: editingItem.id, data: updatedData });\n    setEditingItem(null);\n    setEditAddOns([]);\n  };\n\n  const openEditDialog = (item: MenuItem) => {\n    setEditingItem(item);\n    // Parse existing add-ons\n    try {\n      const existingAddOns = JSON.parse(item.addOns || \"[]\");\n      setEditAddOns(existingAddOns.length > 0 ? existingAddOns : []);\n    } catch {\n      setEditAddOns([]);\n    }\n  };\n\n  const addNewEditAddOn = () => {\n    setEditAddOns([...editAddOns, { name: \"\", price: \"\" }]);\n  };\n\n  const updateEditAddOn = (index: number, field: \"name\" | \"price\", value: string) => {\n    const updatedAddOns = [...editAddOns];\n    updatedAddOns[index][field] = value;\n    setEditAddOns(updatedAddOns);\n  };\n\n  const removeEditAddOn = (index: number) => {\n    setEditAddOns(editAddOns.filter((_, i) => i !== index));\n  };\n\n  const handleDeleteMenuItem = (itemId: any) => {\n    // Prevent multiple simultaneous deletes\n    if (deleteMenuItemMutation.isPending) {\n      toast.error(\"Delete in progress, please wait...\");\n      return;\n    }\n    deleteMenuItemMutation.mutate(itemId);\n  };\n\n  const toggleItemAvailability = (itemId: any) => {\n    const item = (menuItems as any[]).find((item: any) => item.id === itemId);\n    if (item) {\n      updateMenuItemMutation.mutate({ id: itemId, data: { available: !item.available } });\n    }\n  };\n\n  const handleAddCategory = () => {\n    if (!newCategory.trim()) {\n      toast.error(\"Please enter a category name\");\n      return;\n    }\n    \n    if ((categories as any[]).some((cat: any) => cat.name === newCategory)) {\n      toast.error(\"Category already exists\");\n      return;\n    }\n    \n    addCategoryMutation.mutate({ name: newCategory.trim() });\n    setNewCategory(\"\");\n  };\n\n  const handleDeleteCategory = (categoryToDelete: any) => {\n    if ((menuItems as any[]).some((item: any) => item.categoryId === categoryToDelete.id)) {\n      toast.error(\"Cannot delete category - items are using it\");\n      return;\n    }\n    \n    // Add delete category mutation here if needed\n    toast.success(\"Category deleted successfully\");\n  };\n\n  const getOrderStatusColor = (status: any) => {\n    switch (status) {\n      case \"pending\": return \"bg-warning\";\n      case \"preparing\": return \"bg-primary\";\n      case \"ready\": return \"bg-success\";\n      case \"completed\": return \"bg-muted\";\n      default: return \"bg-muted\";\n    }\n  };\n\n  const getOrderStatusText = (status: any) => {\n    switch (status) {\n      case \"pending\": return \"Pending\";\n      case \"preparing\": return \"Preparing\";\n      case \"ready\": return \"Ready\";\n      case \"completed\": return \"Completed\";\n      default: return status;\n    }\n  };\n\n  // Stock management handlers\n  const handleUpdateStock = (item: any) => {\n    setStockUpdateItem(item);\n    setNewStockAmount(item.stock.toString());\n  };\n\n  const handleSaveStockUpdate = () => {\n    if (!newStockAmount || isNaN(parseInt(newStockAmount))) {\n      toast.error(\"Please enter a valid stock amount\");\n      return;\n    }\n\n    const updatedStock = parseInt(newStockAmount);\n    \n    // Use API to update stock instead of local state\n    updateMenuItemMutation.mutate({ \n      id: stockUpdateItem.id, \n      data: { stock: updatedStock, available: updatedStock > 0 }\n    });\n    \n    setStockUpdateItem(null);\n    setNewStockAmount(\"\");\n    toast.success(`Stock updated for ${stockUpdateItem.name}`);\n  };\n\n  // Notification handlers\n  const markNotificationAsRead = (notificationId: number) => {\n    setNotifications(notifications.map(notif => \n      notif.id === notificationId ? { ...notif, read: true } : notif\n    ));\n  };\n\n  const markAllNotificationsAsRead = () => {\n    setNotifications(notifications.map(notif => ({ ...notif, read: true })));\n  };\n\n  const deleteNotification = (notificationId: number) => {\n    setNotifications(notifications.filter(notif => notif.id !== notificationId));\n  };\n\n  // Settings handlers\n  const handleSettingsUpdate = (section: string, key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: {\n        ...(prev[section as keyof typeof prev] as any),\n        [key]: value\n      }\n    }));\n    toast.success(\"Settings updated successfully\");\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"order\": return ShoppingBag;\n      case \"stock\": return Package;\n      case \"system\": return Settings;\n      default: return Bell;\n    }\n  };\n\n  // Completely rewritten barcode processing logic\n  const processBarcodeDelivery = async (barcode: string) => {\n    // Prevent any duplicate processing\n    if (isProcessing) {\n      console.log(\"Already processing, ignoring duplicate request\");\n      return;\n    }\n\n    setIsProcessing(true);\n    setScanError(\"\");\n    setScanResult(null);\n\n    try {\n      console.log(\"Processing barcode:\", barcode);\n      \n      const response = await fetch('/api/delivery/scan', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ barcode: barcode.trim() })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Success\n        setScanResult(data);\n        setScanError(\"\");\n        toast.success(\"Order delivered successfully!\");\n        console.log(\"Delivery processed successfully:\", data);\n        \n        // Refresh orders list\n        queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      } else {\n        // Error - format message appropriately\n        let errorMessage = data.message || 'Scan failed';\n        \n        if (errorMessage.includes(\"already been delivered\") || errorMessage.includes(\"🔒\")) {\n          errorMessage = \"✅ This order has already been delivered\";\n        } else if (errorMessage.includes(\"not ready for pickup\")) {\n          errorMessage = \"⏳ Order is not ready for pickup yet\";\n        } else if (errorMessage.includes(\"not found\") || errorMessage.includes(\"Invalid barcode\")) {\n          errorMessage = \"❌ Order number not found\";\n        } else {\n          errorMessage = `⚠️ ${errorMessage}`;\n        }\n        \n        setScanError(errorMessage);\n        setScanResult(null);\n        toast.error(errorMessage);\n        console.log(\"Delivery processing error:\", errorMessage);\n      }\n    } catch (error) {\n      console.error(\"Network error during barcode processing:\", error);\n      setScanError(\"⚠️ Network error. Please try again.\");\n      setScanResult(null);\n      toast.error(\"Network error. Please try again.\");\n    } finally {\n      // Always reset processing state and clear input\n      setIsProcessing(false);\n      setManualBarcode(\"\");\n    }\n  };\n\n  const handleBarcodeSubmit = async (barcode: string) => {\n    if (!barcode.trim()) {\n      setScanError(\"Please enter a barcode\");\n      return;\n    }\n    \n    // Prevent duplicate submissions\n    if (isProcessing) {\n      return;\n    }\n    \n    await processBarcodeDelivery(barcode);\n  };\n\n  const startCameraScanner = async () => {\n    try {\n      setIsScanning(true);\n      \n      // Check camera permissions\n      const permissions = await BarcodeScanner.checkPermission({ force: true });\n      \n      if (!permissions.granted) {\n        if (permissions.neverAsked) {\n          setScanError(\"Camera permission required. Please enable in settings.\");\n          setIsScanning(false);\n          return;\n        }\n        \n        // On mobile devices, we may need to handle permissions differently\n        setScanError(\"Camera permission denied\");\n        setIsScanning(false);\n        return;\n      }\n\n      // Start scanning\n      document.body.classList.add('scanner-active');\n      const result = await BarcodeScanner.startScan();\n      \n      if (result.hasContent) {\n        await processBarcodeDelivery(result.content);\n      }\n      \n    } catch (error) {\n      console.error('Camera scan error:', error);\n      setScanError(\"Camera scanning failed. Use manual entry instead.\");\n    } finally {\n      setIsScanning(false);\n      document.body.classList.remove('scanner-active');\n      BarcodeScanner.stopScan();\n    }\n  };\n\n  const stopScanner = () => {\n    setIsScanning(false);\n    document.body.classList.remove('scanner-active');\n    BarcodeScanner.stopScan();\n  };\n\n  // Refresh all data function\n  const refreshAllData = async () => {\n    try {\n      await Promise.all([\n        refetchCategories(),\n        refetchMenuItems(),\n        refetchOrders()\n      ]);\n      toast.success(\"Data refreshed successfully!\");\n    } catch (error) {\n      toast.error(\"Failed to refresh data\");\n    }\n  };\n\n\n\n\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card/50\">\n        <div className=\"flex h-16 items-center justify-between px-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n              <ChefHat className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold\">Canteen Owner Dashboard</h1>\n              <p className=\"text-sm text-muted-foreground\">KIT Canteen - {user?.email}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <SyncStatus />\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={refreshAllData}\n              disabled={categoriesLoading || menuItemsLoading || ordersLoading}\n            >\n              <RefreshCcw className=\"w-4 h-4 mr-2\" />\n              Refresh Data\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setActiveTab(\"scanner\")}\n            >\n              <ScanLine className=\"w-4 h-4 mr-2\" />\n              Scanner\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowNotifications(true)}\n              className=\"relative\"\n            >\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Notifications\n              {notifications.filter(n => !n.read).length > 0 && (\n                <Badge \n                  variant=\"destructive\" \n                  className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n                >\n                  {notifications.filter(n => !n.read).length}\n                </Badge>\n              )}\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowSettings(true)}\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setLocation(\"/login\")}\n            >\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n            <TabsTrigger value=\"scanner\">Scanner</TabsTrigger>\n            <TabsTrigger value=\"menu\">Menu</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {stats.map((stat, index) => (\n                <Card key={index}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                        <p className=\"text-2xl font-bold\">{stat.value}</p>\n                        <p className=\"text-xs text-success\">{stat.trend}</p>\n                      </div>\n                      <stat.icon className=\"w-8 h-8 text-primary/60\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Recent Orders Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Recent Orders\n                  <Button size=\"sm\" onClick={() => setActiveTab(\"orders\")}>\n                    View All\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {(orders as any[]).slice(0, 3).map((order: any) => (\n                    <div \n                      key={order.id} \n                      className=\"flex items-center justify-between p-3 border rounded-lg cursor-pointer hover:bg-accent/50 transition-colors\"\n                      onClick={() => setLocation(`/canteen-order-detail/${order.id}`)}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\">\n                            #{(() => {\n                              const formatted = formatOrderIdDisplay(order.orderNumber || order.id.toString());\n                              return (\n                                <>\n                                  {formatted.prefix}\n                                  <span className=\"bg-primary/20 text-primary font-bold px-1 rounded\">\n                                    {formatted.suffix}\n                                  </span>\n                                </>\n                              );\n                            })()}\n                          </span>\n                          <Badge className={getOrderStatusColor(order.status)}>\n                            {getOrderStatusText(order.status)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">Customer: {order.customerName || 'N/A'}</p>\n                        <p className=\"text-sm\">\n                          {order.items && typeof order.items === 'string' \n                            ? (() => {\n                                try {\n                                  const parsedItems = JSON.parse(order.items);\n                                  return Array.isArray(parsedItems) \n                                    ? parsedItems.map((item: any) => `${item.quantity}x ${item.name}`).join(', ')\n                                    : order.items;\n                                } catch {\n                                  return order.items;\n                                }\n                              })()\n                            : 'No items'\n                          }\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">₹{order.amount}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {order.createdAt ? new Date(order.createdAt).toLocaleTimeString() : order.time || 'N/A'}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  Order Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"online\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                    <TabsTrigger value=\"online\">Online Orders</TabsTrigger>\n                    <TabsTrigger value=\"offline\">Offline Orders</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"online\">\n                    <div className=\"space-y-4\">\n                      {(orders as any[]).map((order: any) => (\n                        <div key={order.id} className=\"p-4 border rounded-lg space-y-3\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            {/* Order Info */}\n                            <div className=\"md:col-span-2\">\n                              <div \n                                className=\"flex items-center justify-between cursor-pointer hover:bg-accent/20 -m-2 p-2 rounded transition-colors\"\n                                onClick={() => setLocation(`/canteen-order-detail/${order.id}`)}\n                              >\n                                <div className=\"flex items-center space-x-3\">\n                                  <span className=\"font-semibold\">\n                                    #{(() => {\n                                      const formatted = formatOrderIdDisplay(order.orderNumber || order.id.toString());\n                                      return (\n                                        <>\n                                          {formatted.prefix}\n                                          <span className=\"bg-primary/20 text-primary font-bold px-1 rounded\">\n                                            {formatted.suffix}\n                                          </span>\n                                        </>\n                                      );\n                                    })()}\n                                  </span>\n                                  <Badge className={getOrderStatusColor(order.status)}>\n                                    {getOrderStatusText(order.status)}\n                                  </Badge>\n                                  {order.estimatedTime > 0 && (\n                                    <span className=\"text-sm text-muted-foreground\">\n                                      ETA: {order.estimatedTime} min\n                                    </span>\n                                  )}\n                                </div>\n                                <span className=\"font-bold text-lg\">₹{order.amount}</span>\n                              </div>\n                              \n                              <div \n                                className=\"cursor-pointer hover:bg-accent/20 -mx-2 px-2 py-1 rounded transition-colors\"\n                                onClick={() => setLocation(`/canteen-order-detail/${order.id}`)}\n                              >\n                                <p className=\"text-sm text-muted-foreground\">Customer: {order.customerName || 'N/A'}</p>\n                                <p className=\"text-sm\">\n                                  {order.items && typeof order.items === 'string' \n                                    ? (() => {\n                                        try {\n                                          const parsedItems = JSON.parse(order.items);\n                                          return Array.isArray(parsedItems) \n                                            ? parsedItems.map((item: any) => `${item.quantity}x ${item.name}`).join(', ')\n                                            : order.items;\n                                        } catch {\n                                          return order.items;\n                                        }\n                                      })()\n                                    : 'No items'\n                                  }\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {order.createdAt ? new Date(order.createdAt).toLocaleTimeString() : order.time || 'N/A'}\n                                </p>\n                              </div>\n\n                              <div className=\"flex space-x-2 mt-3\">\n                                {order.status === \"preparing\" && (\n                                  <Button \n                                    size=\"sm\" \n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleOrderStatusUpdate(order.id, \"ready\");\n                                    }}\n                                  >\n                                    Mark Ready\n                                  </Button>\n                                )}\n                                {order.status === \"ready\" && (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-success text-success-foreground hover:bg-success/90\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleOrderStatusUpdate(order.id, \"completed\");\n                                    }}\n                                  >\n                                    Complete Order\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                            \n                            {/* Barcode Display */}\n                            <div className=\"md:col-span-1 flex items-center justify-center\">\n                              {order.barcode && order.status === \"ready\" && (\n                                <div className=\"text-center\">\n                                  <BarcodeDisplay \n                                    value={order.barcode}\n                                    width={1.5}\n                                    height={60}\n                                    displayValue={false}\n                                    className=\"mb-2\"\n                                  />\n                                  <p className=\"text-xs text-muted-foreground font-mono\">{order.barcode}</p>\n                                  <Badge variant=\"outline\" className=\"mt-1\">Ready for Pickup</Badge>\n                                </div>\n                              )}\n                              {order.status === \"delivered\" && (\n                                <div className=\"text-center\">\n                                  <CheckCircle className=\"w-8 h-8 text-success mx-auto mb-2\" />\n                                  <Badge className=\"bg-success\">Delivered</Badge>\n                                  {order.deliveredAt && (\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      {new Date(order.deliveredAt).toLocaleString()}\n                                    </p>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"offline\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <h3 className=\"text-lg font-medium\">Counter Orders</h3>\n\n                      </div>\n                      \n                      {/* Offline Orders List */}\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 border rounded-lg space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <span className=\"font-semibold\">#C001</span>\n                              <Badge className=\"bg-primary\">Counter Order</Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                Student ID: 21CS1234\n                              </span>\n                            </div>\n                            <span className=\"font-bold text-lg\">₹120</span>\n                          </div>\n                          \n                          <div>\n                            <p className=\"text-sm\">2x Veg Meals, 1x Lassi</p>\n                            <p className=\"text-xs text-muted-foreground\">Counter 1 • just now</p>\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\">Process Payment</Button>\n                            <Button size=\"sm\" variant=\"outline\">Print Receipt</Button>\n                          </div>\n                        </div>\n\n                        <div className=\"p-4 border rounded-lg space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <span className=\"font-semibold\">#C002</span>\n                              <Badge className=\"bg-success\">Paid</Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                Cash Payment\n                              </span>\n                            </div>\n                            <span className=\"font-bold text-lg\">₹75</span>\n                          </div>\n                          \n                          <div>\n                            <p className=\"text-sm\">1x Biryani, 1x Raita</p>\n                            <p className=\"text-xs text-muted-foreground\">Counter 2 • 2 min ago</p>\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">Reprint Receipt</Button>\n                          </div>\n                        </div>\n\n                        <div className=\"p-4 border rounded-lg space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <span className=\"font-semibold\">#C003</span>\n                              <Badge className=\"bg-primary\">Counter Order</Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                Faculty Order\n                              </span>\n                            </div>\n                            <span className=\"font-bold text-lg\">₹200</span>\n                          </div>\n                          \n                          <div>\n                            <p className=\"text-sm\">3x Special Thali, 2x Tea</p>\n                            <p className=\"text-xs text-muted-foreground\">Counter 1 • 5 min ago</p>\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\">Process Payment</Button>\n                            <Button size=\"sm\" variant=\"outline\">Print Receipt</Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"scanner\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <ScanLine className=\"w-5 h-5\" />\n                  <span>Barcode Scanner</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Manual Entry Only */}\n                <div className=\"max-w-md mx-auto\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium text-center\">Barcode Entry</h3>\n                    <div className=\"space-y-4 p-6 border rounded-lg\">\n                      <div>\n                        <Label htmlFor=\"manual-barcode\">Enter Order Number</Label>\n                        <p className=\"text-xs text-muted-foreground mb-2\">\n                          Scan or enter the order number from the barcode (e.g., ORD1754332914519)\n                        </p>\n                        <Input\n                          id=\"manual-barcode\"\n                          value={manualBarcode}\n                          onChange={(e) => setManualBarcode(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter' && manualBarcode.trim() && !isProcessing) {\n                              e.preventDefault();\n                              handleBarcodeSubmit(manualBarcode);\n                            }\n                          }}\n                          placeholder=\"ORD1754332914519\"\n                          className=\"mt-1\"\n                          disabled={isProcessing}\n                        />\n                      </div>\n                      <Button \n                        onClick={() => handleBarcodeSubmit(manualBarcode)}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        disabled={!manualBarcode.trim() || isProcessing}\n                      >\n                        {isProcessing ? (\n                          <>Processing...</>\n                        ) : (\n                          <>\n                            <CheckCircle className=\"w-4 h-4 mr-2\" />\n                            Process Delivery\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Results Section */}\n                {(scanError || scanResult) && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Scan Results</h3>\n                    \n                    {scanError && (\n                      <div className=\"p-4 border border-destructive rounded-lg bg-destructive/10\">\n                        <div className=\"flex items-center space-x-2\">\n                          <XCircle className=\"w-5 h-5 text-destructive\" />\n                          <span className=\"text-destructive font-medium\">Error</span>\n                        </div>\n                        <p className=\"mt-2 text-sm\">{scanError}</p>\n                      </div>\n                    )}\n\n                    {scanResult && (\n                      <div className=\"p-4 border border-success rounded-lg bg-success/10\">\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <CheckCircle className=\"w-5 h-5 text-success\" />\n                          <span className=\"text-success font-medium\">Delivery Successful</span>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Order #:</span>\n                            <span className=\"ml-2\">{scanResult.order?.orderNumber}</span>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Customer:</span>\n                            <span className=\"ml-2\">{scanResult.order?.customerName}</span>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Amount:</span>\n                            <span className=\"ml-2\">₹{scanResult.order?.amount}</span>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Status:</span>\n                            <Badge className=\"ml-2 bg-success\">{scanResult.order?.status}</Badge>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Recent Deliveries */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Recent Deliveries</h3>\n                  <div className=\"space-y-2\">\n                    {(orders as any[])\n                      .filter((order: any) => order.status === \"delivered\")\n                      .slice(0, 5)\n                      .map((order: any) => (\n                        <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <CheckCircle className=\"w-4 h-4 text-success\" />\n                            <div>\n                              <span className=\"font-medium\">\n                                #{(() => {\n                                  const formatted = formatOrderIdDisplay(order.orderNumber);\n                                  return (\n                                    <>\n                                      {formatted.prefix}\n                                      <span className=\"bg-primary/20 text-primary font-bold px-1 rounded\">\n                                        {formatted.suffix}\n                                      </span>\n                                    </>\n                                  );\n                                })()}\n                              </span>\n                              <p className=\"text-sm text-muted-foreground\">{order.customerName}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">₹{order.amount}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {order.deliveredAt ? new Date(order.deliveredAt).toLocaleTimeString() : 'Just now'}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"menu\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center space-x-2\">\n                    <ChefHat className=\"w-5 h-5\" />\n                    Menu Management\n                  </span>\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Item\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Add New Menu Item</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"name\">Item Name</Label>\n                          <Input\n                            id=\"name\"\n                            value={newItem.name}\n                            onChange={(e) => setNewItem({...newItem, name: e.target.value})}\n                            placeholder=\"Enter item name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"price\">Price (₹)</Label>\n                          <Input\n                            id=\"price\"\n                            type=\"number\"\n                            value={newItem.price}\n                            onChange={(e) => setNewItem({...newItem, price: e.target.value})}\n                            placeholder=\"Enter price\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"category\">Category</Label>\n                          <div className=\"flex space-x-2\">\n                            <Select value={newItem.category} onValueChange={(value) => setNewItem({...newItem, category: value})}>\n                              <SelectTrigger className=\"flex-1\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {categoriesLoading ? (\n                                  <SelectItem value=\"loading\" disabled>Loading categories...</SelectItem>\n                                ) : (categories as any[]).length === 0 ? (\n                                  <SelectItem value=\"no-categories\" disabled>No categories available</SelectItem>\n                                ) : (\n                                  (categories as any[]).map((category: any) => (\n                                    <SelectItem key={category.id} value={category.name}>\n                                      {category.name}\n                                    </SelectItem>\n                                  ))\n                                )}\n                              </SelectContent>\n                            </Select>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button variant=\"outline\" size=\"icon\">\n                                  <Plus className=\"w-4 h-4\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"sm:max-w-md\">\n                                <DialogHeader>\n                                  <DialogTitle>Manage Categories</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div className=\"flex space-x-2\">\n                                    <Input\n                                      placeholder=\"Enter new category\"\n                                      value={newCategory}\n                                      onChange={(e) => setNewCategory(e.target.value)}\n                                      onKeyDown={(e) => e.key === 'Enter' && handleAddCategory()}\n                                    />\n                                    <Button \n                                      onClick={handleAddCategory}\n                                      disabled={addCategoryMutation.isPending}\n                                    >\n                                      <Plus className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                                    {categoriesLoading ? (\n                                      <div className=\"text-sm text-muted-foreground p-2\">Loading categories...</div>\n                                    ) : (categories as any[]).length === 0 ? (\n                                      <div className=\"text-sm text-muted-foreground p-2\">No categories available</div>\n                                    ) : (\n                                      (categories as any[]).map((category: any) => (\n                                        <div key={category.id} className=\"flex items-center justify-between p-2 border rounded\">\n                                          <span className=\"text-sm\">{category.name}</span>\n                                          <Button\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            onClick={() => handleDeleteCategory(category)}\n                                            className=\"h-6 w-6 p-0\"\n                                          >\n                                            <Trash2 className=\"w-3 h-3\" />\n                                          </Button>\n                                        </div>\n                                      ))\n                                    )}\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"barcode\">Barcode (Optional)</Label>\n                          <div className=\"flex space-x-2\">\n                            <Input\n                              id=\"barcode\"\n                              value={newItem.barcode}\n                              onChange={(e) => setNewItem({...newItem, barcode: e.target.value})}\n                              placeholder=\"Enter or scan barcode\"\n                            />\n                            <Button \n                              type=\"button\"\n                              variant=\"outline\" \n                              size=\"icon\"\n                              onClick={startBarcodeScanner}\n                              disabled={isScannerActive}\n                            >\n                              <ScanLine className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"stock\">Initial Stock</Label>\n                          <Input\n                            id=\"stock\"\n                            type=\"number\"\n                            value={newItem.stock}\n                            onChange={(e) => setNewItem({...newItem, stock: e.target.value})}\n                            placeholder=\"Enter stock quantity\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"description\">Description (Optional)</Label>\n                          <Textarea\n                            id=\"description\"\n                            value={newItem.description}\n                            onChange={(e) => setNewItem({...newItem, description: e.target.value})}\n                            placeholder=\"Enter item description\"\n                            rows={2}\n                          />\n                        </div>\n                        <div>\n                          <Label>Add-ons (Optional)</Label>\n                          <div className=\"space-y-2\">\n                            {newItem.addOns.map((addon, index) => (\n                              <div key={index} className=\"flex space-x-2\">\n                                <Input\n                                  placeholder=\"Add-on name\"\n                                  value={addon.name || ''}\n                                  onChange={(e) => {\n                                    const updatedAddOns = [...newItem.addOns];\n                                    updatedAddOns[index] = { ...updatedAddOns[index], name: e.target.value };\n                                    setNewItem({...newItem, addOns: updatedAddOns});\n                                  }}\n                                />\n                                <Input\n                                  placeholder=\"Price\"\n                                  type=\"number\"\n                                  value={addon.price || ''}\n                                  onChange={(e) => {\n                                    const updatedAddOns = [...newItem.addOns];\n                                    updatedAddOns[index] = { ...updatedAddOns[index], price: parseInt(e.target.value) || 0 };\n                                    setNewItem({...newItem, addOns: updatedAddOns});\n                                  }}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"icon\"\n                                  onClick={() => {\n                                    const updatedAddOns = newItem.addOns.filter((_, i) => i !== index);\n                                    setNewItem({...newItem, addOns: updatedAddOns});\n                                  }}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setNewItem({...newItem, addOns: [...newItem.addOns, { name: '', price: 0 }]});\n                              }}\n                            >\n                              <Plus className=\"w-4 h-4 mr-2\" />\n                              Add Add-on\n                            </Button>\n                          </div>\n                        </div>\n                        <Button onClick={handleAddMenuItem} className=\"w-full\">\n                          Add Menu Item\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {menuItemsLoading && <div className=\"text-center py-4\">Loading menu items...</div>}\n                  {menuItemsError && <div className=\"text-center py-4 text-red-500\">Error loading menu items: {menuItemsError.message}</div>}\n                  {!menuItemsLoading && !menuItemsError && menuItems.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No menu items found. Click \"Add Item\" to create your first menu item!\n                    </div>\n                  )}\n                  {menuItems.map((item: MenuItem) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3\">\n                          <h4 className=\"font-medium\">{item.name}</h4>\n                          <Badge variant=\"secondary\">{categories.find(cat => cat.id === item.categoryId)?.name || \"Unknown\"}</Badge>\n                          {!item.available && <Badge variant=\"destructive\">Out of Stock</Badge>}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Stock: {item.stock} | Price: ₹{item.price}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={item.available}\n                          onCheckedChange={() => toggleItemAvailability(item.id)}\n                        />\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => openEditDialog(item)}>\n                          <Edit3 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\" \n                          onClick={() => handleDeleteMenuItem(item.id)}\n                          disabled={deleteMenuItemMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Sales Analytics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Today's Revenue</span>\n                      <span className=\"font-semibold text-success\">₹{orders.reduce((sum: number, order: Order) => sum + order.amount, 0)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Orders Completed</span>\n                      <span className=\"font-semibold\">{orders.filter((o: Order) => o.status === \"completed\").length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average Order Value</span>\n                      <span className=\"font-semibold\">₹{orders.length > 0 ? Math.round(orders.reduce((sum: number, order: Order) => sum + order.amount, 0) / orders.length) : 0}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Popular Items</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {menuItems.slice(0, 3).map((item: MenuItem, index: number) => (\n                      <div key={item.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"secondary\">#{index + 1}</Badge>\n                          <span className=\"text-sm\">{item.name}</span>\n                        </div>\n                        <span className=\"text-sm font-medium\">₹{item.price}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"inventory\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Package className=\"w-5 h-5\" />\n                  Inventory Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {menuItems.map((item: MenuItem) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">{item.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{categories.find(cat => cat.id === item.categoryId)?.name || \"Unknown\"}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium\">Stock: {item.stock}</p>\n                          {item.stock < 10 && (\n                            <p className=\"text-xs text-destructive flex items-center\">\n                              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                              Low Stock\n                            </p>\n                          )}\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleUpdateStock(item)}\n                        >\n                          Update Stock\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Edit Item Dialog */}\n      {editingItem && (\n        <Dialog open={!!editingItem} onOpenChange={() => setEditingItem(null)}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] flex flex-col\">\n            <DialogHeader>\n              <DialogTitle>Edit Menu Item</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 overflow-y-auto flex-1 pr-2\">\n              <div>\n                <Label htmlFor=\"edit-name\">Item Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={editingItem.name}\n                  onChange={(e) => setEditingItem({...editingItem, name: e.target.value})}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-price\">Price (₹)</Label>\n                <Input\n                  id=\"edit-price\"\n                  type=\"number\"\n                  value={editingItem.price}\n                  onChange={(e) => setEditingItem({...editingItem, price: parseInt(e.target.value)})}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-stock\">Stock</Label>\n                <Input\n                  id=\"edit-stock\"\n                  type=\"number\"\n                  value={editingItem.stock}\n                  onChange={(e) => setEditingItem({...editingItem, stock: parseInt(e.target.value)})}\n                />\n              </div>\n\n              {/* Category */}\n              <div>\n                <Label htmlFor=\"edit-category\">Category</Label>\n                <Select \n                  value={editingItem.categoryId?.toString()} \n                  onValueChange={(value) => setEditingItem({...editingItem, categoryId: parseInt(value)})}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category.id} value={category.id.toString()}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Description */}\n              <div>\n                <Label htmlFor=\"edit-description\">Description</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  value={editingItem.description || \"\"}\n                  onChange={(e) => setEditingItem({...editingItem, description: e.target.value})}\n                  placeholder=\"Item description\"\n                  rows={3}\n                />\n              </div>\n\n              {/* Available */}\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit-available\"\n                  checked={editingItem.available}\n                  onCheckedChange={(checked) => setEditingItem({...editingItem, available: checked})}\n                />\n                <Label htmlFor=\"edit-available\">Available</Label>\n              </div>\n\n              {/* Add-ons Section */}\n              <div className=\"space-y-2 border border-dashed border-gray-300 p-4 rounded-lg bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-semibold\">Add-ons</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addNewEditAddOn}\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Add-on\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {editAddOns.map((addon, index) => (\n                    <div key={index} className=\"flex items-center space-x-2 p-3 border rounded-lg bg-white\">\n                      <Input\n                        placeholder=\"Add-on name\"\n                        value={addon.name}\n                        onChange={(e) => updateEditAddOn(index, \"name\", e.target.value)}\n                        className=\"flex-1\"\n                      />\n                      <Input\n                        placeholder=\"Price\"\n                        type=\"number\"\n                        value={addon.price}\n                        onChange={(e) => updateEditAddOn(index, \"price\", e.target.value)}\n                        className=\"w-24\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeEditAddOn(index)}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                \n                {editAddOns.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground\">No add-ons configured</p>\n                )}\n              </div>\n\n              <Button onClick={handleUpdateMenuItem} className=\"w-full\">\n                Update Item\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Stock Update Dialog */}\n      {stockUpdateItem && (\n        <Dialog open={!!stockUpdateItem} onOpenChange={() => setStockUpdateItem(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Update Stock - {stockUpdateItem.name}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"current-stock\">Current Stock</Label>\n                <Input\n                  id=\"current-stock\"\n                  value={stockUpdateItem.stock}\n                  disabled\n                  className=\"bg-muted\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-stock\">New Stock Amount</Label>\n                <Input\n                  id=\"new-stock\"\n                  type=\"number\"\n                  value={newStockAmount}\n                  onChange={(e) => setNewStockAmount(e.target.value)}\n                  placeholder=\"Enter new stock amount\"\n                  min=\"0\"\n                />\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {parseInt(newStockAmount) === 0 && (\n                  <p className=\"text-destructive\">⚠️ Setting stock to 0 will make this item unavailable</p>\n                )}\n                {parseInt(newStockAmount) < 10 && parseInt(newStockAmount) > 0 && (\n                  <p className=\"text-warning\">⚠️ Low stock warning will be displayed</p>\n                )}\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" onClick={() => setStockUpdateItem(null)} className=\"flex-1\">\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveStockUpdate} className=\"flex-1\">\n                  Update Stock\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Notifications Dialog */}\n      <Dialog open={showNotifications} onOpenChange={setShowNotifications}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              Notifications\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={markAllNotificationsAsRead}\n                  disabled={notifications.filter(n => !n.read).length === 0}\n                >\n                  Mark All Read\n                </Button>\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n            {notifications.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">No notifications</p>\n            ) : (\n              notifications.map((notification) => {\n                const IconComponent = getNotificationIcon(notification.type);\n                return (\n                  <div\n                    key={notification.id}\n                    className={`p-3 rounded-lg border transition-colors ${\n                      notification.read ? 'bg-muted/30' : 'bg-accent/50'\n                    }`}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <IconComponent className=\"w-4 h-4 mt-0.5 text-primary\" />\n                      <div className=\"flex-1 space-y-1\">\n                        <p className=\"text-sm font-medium\">{notification.message}</p>\n                        <p className=\"text-xs text-muted-foreground\">{notification.time}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        {!notification.read && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => markNotificationAsRead(notification.id)}\n                            className=\"h-6 w-6 p-0\"\n                          >\n                            ✓\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteNotification(notification.id)}\n                          className=\"h-6 w-6 p-0 text-muted-foreground hover:text-destructive\"\n                        >\n                          ×\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Settings Dialog */}\n      <Dialog open={showSettings} onOpenChange={setShowSettings}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Canteen Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"canteen-name\">Canteen Name</Label>\n                  <Input\n                    id=\"canteen-name\"\n                    value={settings.canteenName}\n                    onChange={(e) => handleSettingsUpdate('', 'canteenName', e.target.value)}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"open-time\">Opening Time</Label>\n                    <Input\n                      id=\"open-time\"\n                      type=\"time\"\n                      value={settings.workingHours.open}\n                      onChange={(e) => handleSettingsUpdate('workingHours', 'open', e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"close-time\">Closing Time</Label>\n                    <Input\n                      id=\"close-time\"\n                      type=\"time\"\n                      value={settings.workingHours.close}\n                      onChange={(e) => handleSettingsUpdate('workingHours', 'close', e.target.value)}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Notification Preferences */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Notification Preferences</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"new-orders\">New Orders</Label>\n                  <Button\n                    variant={settings.notifications.newOrders ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleSettingsUpdate('notifications', 'newOrders', !settings.notifications.newOrders)}\n                  >\n                    {settings.notifications.newOrders ? \"ON\" : \"OFF\"}\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"low-stock\">Low Stock Alerts</Label>\n                  <Button\n                    variant={settings.notifications.lowStock ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleSettingsUpdate('notifications', 'lowStock', !settings.notifications.lowStock)}\n                  >\n                    {settings.notifications.lowStock ? \"ON\" : \"OFF\"}\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"order-ready\">Order Ready</Label>\n                  <Button\n                    variant={settings.notifications.orderReady ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleSettingsUpdate('notifications', 'orderReady', !settings.notifications.orderReady)}\n                  >\n                    {settings.notifications.orderReady ? \"ON\" : \"OFF\"}\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"daily-reports\">Daily Reports</Label>\n                  <Button\n                    variant={settings.notifications.dailyReports ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleSettingsUpdate('notifications', 'dailyReports', !settings.notifications.dailyReports)}\n                  >\n                    {settings.notifications.dailyReports ? \"ON\" : \"OFF\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Operational Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Operational Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"auto-accept\">Auto Accept Orders</Label>\n                  <Button\n                    variant={settings.operationalSettings.autoAcceptOrders ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleSettingsUpdate('operationalSettings', 'autoAcceptOrders', !settings.operationalSettings.autoAcceptOrders)}\n                  >\n                    {settings.operationalSettings.autoAcceptOrders ? \"ON\" : \"OFF\"}\n                  </Button>\n                </div>\n                <div>\n                  <Label htmlFor=\"max-orders\">Max Orders Per Hour</Label>\n                  <Input\n                    id=\"max-orders\"\n                    type=\"number\"\n                    value={settings.operationalSettings.maxOrdersPerHour}\n                    onChange={(e) => handleSettingsUpdate('operationalSettings', 'maxOrdersPerHour', parseInt(e.target.value))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"prep-time\">Default Preparation Time (minutes)</Label>\n                  <Input\n                    id=\"prep-time\"\n                    type=\"number\"\n                    value={settings.operationalSettings.preparationTime}\n                    onChange={(e) => handleSettingsUpdate('operationalSettings', 'preparationTime', parseInt(e.target.value))}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setShowSettings(false)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":83441},"client/src/components/CartPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { ArrowLeft, Plus, Minus, Trash2, ShoppingCart, Loader2 } from \"lucide-react\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport type { MenuItem } from \"@shared/schema\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface CartItem {\n  menuItem: MenuItem;\n  quantity: number;\n}\n\nexport default function CartPage() {\n  const [, setLocation] = useLocation();\n  const { cart, updateQuantity, removeFromCart, getTotalPrice, getTotalItems, clearCart } = useCart();\n\n  // Fetch menu items in case we need to display them\n  const { data: menuItems = [], isLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    queryFn: async () => {\n      const response = await fetch('/api/menu');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch menu items: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  const handleUpdateQuantity = (itemId: number, newQuantity: number) => {\n    updateQuantity(itemId, newQuantity);\n  };\n\n  const handleRemoveItem = (itemId: number) => {\n    removeFromCart(itemId);\n  };\n\n  const proceedToCheckout = () => {\n    if (cart.length === 0) {\n      return;\n    }\n    setLocation(\"/checkout\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <div className=\"bg-primary px-4 pt-12 pb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/home\")}\n              className=\"text-white hover:bg-white/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">My Cart</h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </div>\n        <BottomNavigation currentPage=\"cart\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/home\")}\n              className=\"text-white hover:bg-white/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">My Cart</h1>\n              <p className=\"text-white/80 text-sm\">\n                {cart.length > 0 ? `${getTotalItems()} items` : \"Your cart is empty\"}\n              </p>\n            </div>\n          </div>\n          {cart.length > 0 && (\n            <Badge variant=\"secondary\" className=\"bg-white/20 text-white\">\n              ₹{getTotalPrice()}\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <div className=\"px-4 space-y-4 -mt-3\">\n        {cart.length === 0 ? (\n          // Empty Cart State\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <ShoppingCart className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Your cart is empty</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Looks like you haven't added any items to your cart yet\n              </p>\n              <Button onClick={() => setLocation(\"/home\")}>\n                Browse Menu\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Cart Items */}\n            <div className=\"space-y-3\">\n              {cart.map((item) => (\n                <Card key={item.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-orange-400 to-red-500 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                        <span className=\"text-white text-lg\">🍽️</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold\">{item.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Delicious food item\n                        </p>\n                        <p className=\"text-lg font-bold\">₹{item.price}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}\n                        >\n                          <Minus className=\"w-4 h-4\" />\n                        </Button>\n                        <span className=\"w-8 text-center font-medium\">{item.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleRemoveItem(item.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal ({getTotalItems()} items)</span>\n                  <span>₹{getTotalPrice()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Delivery Fee</span>\n                  <span>₹0</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Taxes</span>\n                  <span>₹{Math.round(getTotalPrice() * 0.05)}</span>\n                </div>\n                <hr />\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>Total</span>\n                  <span>₹{getTotalPrice() + Math.round(getTotalPrice() * 0.05)}</span>\n                </div>\n                <Button \n                  className=\"w-full mt-4\" \n                  size=\"lg\"\n                  onClick={proceedToCheckout}\n                >\n                  Proceed to Checkout\n                </Button>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n\n      <BottomNavigation currentPage=\"cart\" />\n    </div>\n  );\n}","size_bytes":7732},"client/src/components/CheckoutPage.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Clock, MapPin, CreditCard, Wallet, Timer } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function CheckoutPage() {\n  const [, setLocation] = useLocation();\n  const [paymentMethod, setPaymentMethod] = useState(\"upi\");\n  const [estimatedTime, setEstimatedTime] = useState(\"15-20 mins\");\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(420); // 7 minutes in seconds\n  const [paymentInProgress, setPaymentInProgress] = useState(false);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const paymentValidRef = useRef(false);\n  const queryClient = useQueryClient();\n\n  // Get cart data from localStorage (using the same key as useCart hook)\n  const cartData = JSON.parse(localStorage.getItem('kit-canteen-cart') || '[]');\n  const userData = JSON.parse(localStorage.getItem('user') || '{}');\n  \n  const orderItems = cartData;\n  const subtotal = cartData.reduce((sum: number, item: any) => sum + (item.price * item.quantity), 0);\n  const tax = Math.round(subtotal * 0.05);\n  const total = subtotal + tax;\n\n  // Add fallback for testing - create order without payment if in dev mode\n  const createOrderDirectly = async () => {\n    // Server will generate the orderNumber and barcode using new 12-digit alphanumeric format\n    const orderData = {\n      customerId: userData.id || null,\n      customerName: userData.name || 'Guest User',\n      items: JSON.stringify(cartData),\n      amount: total,\n      status: 'preparing',\n      estimatedTime: 15\n    };\n\n    try {\n      const newOrder = await createOrderMutation.mutateAsync(orderData);\n      \n      toast({\n        title: \"Order Created\",\n        description: \"Your order has been placed successfully!\",\n      });\n      \n      setLocation(`/order-status/${newOrder.orderNumber}`);\n    } catch (error) {\n      // Failed to create order - show error message\n      toast({\n        title: \"Order Creation Failed\",\n        description: \"Unable to create order. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Create order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return apiRequest('/api/orders', {\n        method: 'POST',\n        body: JSON.stringify(orderData),\n      });\n    },\n    onSuccess: () => {\n      // Invalidate orders cache to refresh order lists\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      // Clear cart after successful order (using correct cart key)\n      localStorage.removeItem('kit-canteen-cart');\n    },\n  });\n\n  // Timer effect with proper cleanup\n  useEffect(() => {\n    if (isTimerActive && timeLeft > 0) {\n      timerRef.current = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n    } else if (timeLeft === 0 && isTimerActive) {\n      // Timer expired\n      handleTimerExpiry();\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, [isTimerActive, timeLeft]);\n\n  // Cleanup timer on component unmount\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n\n  const handleTimerExpiry = () => {\n    setIsTimerActive(false);\n    setPaymentInProgress(false);\n    paymentValidRef.current = false;\n    \n    toast({\n      title: \"Payment Session Expired\",\n      description: \"Please try again to complete your order.\",\n      variant: \"destructive\",\n    });\n    \n    setLocation('/retry-payment');\n  };\n\n  const startPaymentTimer = () => {\n    setIsTimerActive(true);\n    setPaymentInProgress(true);\n    paymentValidRef.current = true;\n    setTimeLeft(420); // Reset to 7 minutes\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handlePlaceOrder = () => {\n    // Start the timer\n    startPaymentTimer();\n    \n    const options = {\n      key: \"rzp_test_uKo2E3dcFizVIW\", // Razorpay test key\n      amount: total * 100, // Amount in paise\n      currency: \"INR\",\n      name: \"KIT College Canteen\",\n      description: \"Food Order Payment\",\n      image: \"/favicon.ico\",\n      order_id: \"\", // This should come from your backend\n      handler: async function (response: any) {\n        // Payment successful - stop timer immediately\n        setIsTimerActive(false);\n        setPaymentInProgress(false);\n        \n        // Payment successful - create order in database\n        // Server will generate orderNumber and barcode using new format\n        const orderData = {\n          customerId: userData.id || null,\n          customerName: userData.name || 'Guest User',\n          items: JSON.stringify(cartData),\n          amount: total,\n          status: 'preparing',\n          estimatedTime: 15\n        };\n\n        try {\n          const newOrder = await createOrderMutation.mutateAsync(orderData);\n          \n          toast({\n            title: \"Payment Successful\",\n            description: \"Your order has been confirmed!\",\n          });\n          \n          setLocation(`/order-status/${newOrder.orderNumber}`);\n        } catch (error) {\n          // Failed to create order after payment - critical error\n          toast({\n            title: \"Order Creation Failed\",\n            description: \"Payment successful but order creation failed. Contact support.\",\n            variant: \"destructive\"\n          });\n        }\n      },\n      prefill: {\n        name: \"Student Name\",\n        email: \"student@kit.ac.in\",\n        contact: \"9999999999\"\n      },\n      notes: {\n        address: \"KIT College Campus\"\n      },\n      theme: {\n        color: \"#3B82F6\"\n      },\n      modal: {\n        ondismiss: function() {\n          // Payment cancelled by user\n          setIsTimerActive(false);\n          setPaymentInProgress(false);\n          paymentValidRef.current = false;\n        }\n      }\n    };\n\n    // Check if Razorpay is loaded\n    if (!(window as any).Razorpay) {\n      toast({\n        title: \"Payment Error\",\n        description: \"Payment service is not available. Please try again later.\",\n        variant: \"destructive\"\n      });\n      setIsTimerActive(false);\n      setPaymentInProgress(false);\n      paymentValidRef.current = false;\n      return;\n    }\n\n    try {\n      const rzp = new (window as any).Razorpay(options);\n      rzp.open();\n    } catch (error) {\n      // Razorpay initialization error - show fallback\n      toast({\n        title: \"Payment Error\",\n        description: \"Failed to initialize payment. Please try again.\",\n        variant: \"destructive\"\n      });\n      setIsTimerActive(false);\n      setPaymentInProgress(false);\n      paymentValidRef.current = false;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/cart')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold\">Checkout</h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Payment Timer */}\n        {isTimerActive && (\n          <Card className=\"shadow-card border-destructive\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Timer className=\"w-5 h-5 mr-2 text-destructive\" />\n                  <span className=\"font-semibold text-destructive\">Payment Timer</span>\n                </div>\n                <div className=\"text-2xl font-bold text-destructive\">\n                  {formatTime(timeLeft)}\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Complete your payment within the time limit to confirm your order\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Order Summary */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Order Summary</h3>\n            <div className=\"space-y-3\">\n              {orderItems.map((item: any, index: number) => (\n                <div key={index} className=\"flex justify-between items-center\">\n                  <div>\n                    <span className=\"font-medium\">{item.name}</span>\n                    <span className=\"text-muted-foreground ml-2\">x{item.quantity}</span>\n                  </div>\n                  <span className=\"font-medium\">₹{item.price}</span>\n                </div>\n              ))}\n              <div className=\"border-t pt-3 space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal</span>\n                  <span>₹{subtotal}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Tax (5%)</span>\n                  <span>₹{tax}</span>\n                </div>\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>Total</span>\n                  <span>₹{total}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n\n\n        {/* Payment Options */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4 flex items-center\">\n              <CreditCard className=\"w-5 h-5 mr-2 text-primary\" />\n              Payment Method\n            </h3>\n            <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                  <RadioGroupItem value=\"upi\" id=\"upi\" />\n                  <Label htmlFor=\"upi\" className=\"flex-1 cursor-pointer\">\n                    <div className=\"flex items-center\">\n                      <CreditCard className=\"w-5 h-5 mr-3 text-blue-600\" />\n                      <div>\n                        <p className=\"font-medium\">UPI Payment</p>\n                        <p className=\"text-sm text-muted-foreground\">Google Pay, PhonePe, Paytm</p>\n                      </div>\n                    </div>\n                  </Label>\n                  <span className=\"bg-success text-success-foreground px-2 py-1 rounded text-xs font-medium\">\n                    Recommended\n                  </span>\n                </div>\n              </div>\n            </RadioGroup>\n          </CardContent>\n        </Card>\n\n        {/* Order Instructions */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-3\">\n              <h4 className=\"font-medium text-warning-foreground mb-2\">📋 Order Instructions</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Please bring your student ID for verification</li>\n                <li>• Orders are prepared fresh, slight delays may occur during peak hours</li>\n                <li>• Check order details carefully before leaving the counter</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Place Order Button */}\n      <div className=\"sticky bottom-0 bg-white border-t p-4 space-y-2\">\n        <Button\n          variant=\"food\"\n          size=\"mobile\"\n          className=\"w-full\"\n          onClick={handlePlaceOrder}\n          disabled={paymentInProgress || cartData.length === 0}\n        >\n          {paymentInProgress ? 'Processing...' : `Pay Now • ₹${total}`}\n        </Button>\n        \n        {/* Test mode - Direct order creation */}\n        {process.env.NODE_ENV === 'development' && (\n          <Button\n            variant=\"outline\"\n            size=\"mobile\"\n            className=\"w-full\"\n            onClick={createOrderDirectly}\n            disabled={createOrderMutation.isPending || cartData.length === 0}\n          >\n            {createOrderMutation.isPending ? 'Creating Order...' : 'Skip Payment (Test Mode)'}\n          </Button>\n        )}\n        \n        {cartData.length === 0 && (\n          <p className=\"text-center text-sm text-muted-foreground\">\n            Your cart is empty. Add items to continue.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13033},"client/src/components/DishDetailPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Plus, Minus, Star, Clock } from \"lucide-react\";\nimport type { MenuItem } from \"@shared/schema\";\n\nexport default function DishDetailPage() {\n  const [, setLocation] = useLocation();\n  const { dishId } = useParams();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedAddons, setSelectedAddons] = useState<string[]>([]);\n\n  // Fetch the specific dish from the database\n  const { data: dish, isLoading, error } = useQuery<MenuItem>({\n    queryKey: [`/api/menu/${dishId}`],\n    enabled: !!dishId,\n  });\n\n  // Parse addons from the dish data\n  const addons = dish?.addOns ? (() => {\n    try {\n      return JSON.parse(dish.addOns);\n    } catch {\n      return [];\n    }\n  })() : [];\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dish details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error or not found state\n  if (error || !dish) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <div className=\"relative\">\n          <div className=\"absolute top-4 left-4 z-10\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={() => {\n                if (window.history.length > 1) {\n                  window.history.back();\n                } else {\n                  setLocation('/home');\n                }\n              }}\n              className=\"bg-white/80 backdrop-blur-sm hover:bg-white\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </div>\n          <div className=\"w-full h-80 bg-gradient-to-br from-orange-100 to-orange-200 flex items-center justify-center\">\n            <span className=\"text-8xl\">🍽️</span>\n          </div>\n        </div>\n        <div className=\"px-4 py-6 text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Dish Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">This dish is not available in our menu.</p>\n          <Button onClick={() => setLocation('/home')}>Back to Menu</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const toggleAddon = (addonId: string) => {\n    setSelectedAddons(prev => \n      prev.includes(addonId) \n        ? prev.filter(id => id !== addonId)\n        : [...prev, addonId]\n    );\n  };\n\n  const getAddonPrice = () => {\n    return selectedAddons.reduce((total, addonId) => {\n      const addon = addons.find((a: any) => a.id === addonId);\n      return total + (addon?.price || 0);\n    }, 0);\n  };\n\n  const totalPrice = (dish.price + getAddonPrice()) * quantity;\n\n  const handleAddToCart = () => {\n    // In real app, this would update cart state/context\n    setLocation(\"/cart\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"relative\">\n        <div className=\"absolute top-4 left-4 z-10\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={() => {\n              // Use browser's back functionality, but with fallback\n              if (window.history.length > 1) {\n                window.history.back();\n              } else {\n                setLocation('/home');\n              }\n            }}\n            className=\"bg-white/80 backdrop-blur-sm hover:bg-white\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n        </div>\n        \n        {/* Dish Image */}\n        <div className=\"w-full h-80 bg-gradient-to-br from-orange-100 to-orange-200 flex items-center justify-center\">\n          <span className=\"text-8xl\">🍽️</span>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Dish Info */}\n        <div>\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h1 className=\"text-2xl font-bold\">{dish.name}</h1>\n                <div className={`w-4 h-4 rounded border-2 border-green-600`}>\n                  <div className={`w-2 h-2 rounded-full bg-green-600 m-0.5`}></div>\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-3\">{dish.description || \"No description available\"}</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-2xl font-bold text-primary\">₹{dish.price}</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n              <span className=\"font-medium\">4.5</span>\n              <span className=\"text-muted-foreground\">(0 reviews)</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Clock className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-muted-foreground\">15 min</span>\n            </div>\n            <Badge variant=\"outline\">250 cal</Badge>\n          </div>\n        </div>\n\n        {/* Add-ons */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Add-ons</h3>\n            <div className=\"space-y-3\">\n              {addons.map((addon: any) => (\n                <div key={addon.id} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedAddons.includes(addon.id)}\n                      onChange={() => toggleAddon(addon.id)}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <span>{addon.name}</span>\n                  </div>\n                  <span className=\"font-medium\">+₹{addon.price}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quantity and Add to Cart */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-semibold mb-1\">Quantity</p>\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  >\n                    <Minus className=\"w-4 h-4\" />\n                  </Button>\n                  <span className=\"font-semibold text-lg min-w-[30px] text-center\">{quantity}</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(quantity + 1)}\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Total</p>\n                <p className=\"text-xl font-bold text-primary\">₹{totalPrice}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fixed Add to Cart Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t p-4\">\n        <Button\n          variant=\"food\"\n          size=\"mobile\"\n          className=\"w-full\"\n          onClick={handleAddToCart}\n        >\n          Add to Cart • ₹{totalPrice}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":8152},"client/src/components/EditAdminAccessPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowLeft, Save, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function EditAdminAccessPage() {\n  const [, setLocation] = useLocation();\n  const { userId } = useParams();\n  const { toast } = useToast();\n\n  // Mock data - in real app, this would come from API based on userId\n  const [adminUser, setAdminUser] = useState({\n    id: userId || \"1\",\n    name: \"John Doe\",\n    email: \"john.doe@canteen.com\",\n    role: \"Manager\",\n    permissions: [\"Orders\", \"Menu\"]\n  });\n\n  const availablePermissions = [\"All Access\", \"Orders\", \"Menu\", \"Analytics\", \"User Management\", \"Settings\"];\n  const availableRoles = [\"Super Admin\", \"Manager\", \"Staff\", \"Viewer\"];\n\n  const handleSave = () => {\n    // In real app, save to API\n    toast({\n      title: \"Success\",\n      description: \"Admin access updated successfully\",\n    });\n    setLocation(\"/admin/admin-access\");\n  };\n\n  const handleDelete = () => {\n    // In real app, delete from API\n    toast({\n      title: \"Success\", \n      description: \"Admin user deleted successfully\",\n    });\n    setLocation(\"/admin/admin-access\");\n  };\n\n  const togglePermission = (permission: string) => {\n    setAdminUser(prev => ({\n      ...prev,\n      permissions: prev.permissions.includes(permission)\n        ? prev.permissions.filter(p => p !== permission)\n        : [...prev.permissions, permission]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/admin-access\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Edit Admin Access</h1>\n              <p className=\"text-sm text-muted-foreground\">Modify user permissions and role</p>\n            </div>\n          </div>\n          <Button \n            variant=\"destructive\" \n            size=\"sm\"\n            onClick={handleDelete}\n            className=\"flex items-center space-x-2\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n            <span>Delete User</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"p-6 max-w-2xl mx-auto\">\n        <Card>\n          <CardContent className=\"p-6 space-y-6\">\n            {/* Role Selection */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-base font-medium\">Role</Label>\n              <Select\n                value={adminUser.role}\n                onValueChange={(value) => setAdminUser(prev => ({ ...prev, role: value }))}\n              >\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-background border\">\n                  {availableRoles.map((role) => (\n                    <SelectItem key={role} value={role}>\n                      {role}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Permissions */}\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Permissions</Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {availablePermissions.map((permission) => (\n                  <div key={permission} className=\"flex items-center space-x-3 p-2\">\n                    <Checkbox\n                      id={permission}\n                      checked={adminUser.permissions.includes(permission)}\n                      onCheckedChange={() => togglePermission(permission)}\n                      className=\"data-[state=checked]:bg-primary data-[state=checked]:border-primary\"\n                    />\n                    <Label \n                      htmlFor={permission} \n                      className=\"text-sm font-normal cursor-pointer select-none\"\n                    >\n                      {permission}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4 pt-6\">\n              <Button \n                variant=\"food\" \n                onClick={handleSave}\n                className=\"flex items-center space-x-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                <span>Save Changes</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation(\"/admin/admin-access\")}\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5483},"client/src/components/FavoritesPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Heart, Star, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FavoritesPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  // Show empty favorites since no favorites system is implemented yet\n  const [favorites, setFavorites] = useState([]);\n\n  const removeFavorite = (itemId: number) => {\n    setFavorites(prev => prev.filter(item => item.id !== itemId));\n    toast({\n      title: \"Removed from Favorites\",\n      description: \"Item has been removed from your favorites\",\n    });\n  };\n\n  const addToCart = (item: any) => {\n    toast({\n      title: \"Added to Cart\",\n      description: `${item.name} added to your cart`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-primary-foreground px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <Heart className=\"w-5 h-5 text-white\" />\n            <h1 className=\"text-xl font-semibold\">My Favorites</h1>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {favorites.length > 0 ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              {favorites.length} item{favorites.length !== 1 ? 's' : ''} in your favorites\n            </p>\n            \n            <div className=\"space-y-3\">\n              {favorites.map((item) => (\n                <Card key={item.id} className=\"shadow-card\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-16 h-16 bg-muted rounded-lg flex-shrink-0\"></div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h3 className=\"font-semibold\">{item.name}</h3>\n                          {item.isVeg && (\n                            <div className=\"w-4 h-4 border-2 border-green-500 flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            </div>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{item.category}</p>\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm\">{item.rating}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right space-y-2\">\n                        <p className=\"font-bold text-lg\">₹{item.price}</p>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => removeFavorite(item.id)}\n                            className=\"p-2\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => addToCart(item)}\n                            className=\"flex items-center space-x-1\"\n                          >\n                            <ShoppingCart className=\"w-4 h-4\" />\n                            <span>Add</span>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <Card className=\"mt-6\">\n              <CardContent className=\"p-4 text-center\">\n                <h3 className=\"font-semibold mb-2\">Quick Order</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Add all favorites to cart with one click\n                </p>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => {\n                    favorites.forEach(item => addToCart(item));\n                    toast({\n                      title: \"All favorites added!\",\n                      description: `${favorites.length} items added to your cart`,\n                    });\n                  }}\n                >\n                  Add All to Cart\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Heart className=\"w-20 h-20 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">No favorites yet</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Start adding items to your favorites by tapping the heart icon on any dish\n            </p>\n            <Button onClick={() => setLocation('/home')}>\n              Browse Menu\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5595},"client/src/components/FeedbackPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Star, MessageSquare, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FeedbackPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [rating, setRating] = useState(0);\n  const [feedback, setFeedback] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [hoveredStar, setHoveredStar] = useState(0);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (rating === 0) {\n      toast({\n        title: \"Rating Required\",\n        description: \"Please provide a rating before submitting\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    toast({\n      title: \"Feedback Submitted\",\n      description: \"Thank you for your valuable feedback!\",\n    });\n\n    // Reset form\n    setRating(0);\n    setFeedback(\"\");\n    setName(\"\");\n    setEmail(\"\");\n  };\n\n  const feedbackCategories = [\n    { name: \"Food Quality\", emoji: \"🍽️\" },\n    { name: \"Service\", emoji: \"👥\" },\n    { name: \"Hygiene\", emoji: \"🧼\" },\n    { name: \"Delivery Time\", emoji: \"⏰\" },\n    { name: \"App Experience\", emoji: \"📱\" },\n    { name: \"Pricing\", emoji: \"💰\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-primary-foreground px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"w-5 h-5 text-white\" />\n            <h1 className=\"text-xl font-semibold\">Feedback</h1>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Header Message */}\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <MessageSquare className=\"w-12 h-12 text-primary mx-auto mb-3\" />\n            <h2 className=\"text-lg font-semibold mb-2\">We Value Your Opinion</h2>\n            <p className=\"text-muted-foreground text-sm\">\n              Help us improve by sharing your experience with KIT Canteen\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Feedback Categories */}\n        <div>\n          <h3 className=\"font-semibold mb-3\">What would you like to feedback about?</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {feedbackCategories.map((category, index) => (\n              <Card key={index} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl mb-2\">{category.emoji}</div>\n                  <p className=\"text-sm font-medium\">{category.name}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Feedback Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Share Your Experience</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Rating */}\n              <div>\n                <Label className=\"text-sm font-medium\">Overall Rating</Label>\n                <div className=\"flex items-center space-x-1 mt-2\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <Star\n                      key={star}\n                      className={`w-8 h-8 cursor-pointer transition-colors ${\n                        star <= (hoveredStar || rating)\n                          ? \"fill-yellow-400 text-yellow-400\"\n                          : \"text-gray-300\"\n                      }`}\n                      onClick={() => setRating(star)}\n                      onMouseEnter={() => setHoveredStar(star)}\n                      onMouseLeave={() => setHoveredStar(0)}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              {/* Name */}\n              <div>\n                <Label htmlFor=\"name\">Name (Optional)</Label>\n                <Input\n                  id=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  placeholder=\"Your name\"\n                />\n              </div>\n\n              {/* Email */}\n              <div>\n                <Label htmlFor=\"email\">Email (Optional)</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n\n              {/* Feedback */}\n              <div>\n                <Label htmlFor=\"feedback\">Your Feedback</Label>\n                <Textarea\n                  id=\"feedback\"\n                  value={feedback}\n                  onChange={(e) => setFeedback(e.target.value)}\n                  placeholder=\"Tell us about your experience...\"\n                  rows={4}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full flex items-center space-x-2\">\n                <Send className=\"w-4 h-4\" />\n                <span>Submit Feedback</span>\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Contact Info */}\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              Need immediate assistance?\n            </p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setLocation('/help-support')}\n            >\n              Contact Support\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6337},"client/src/components/HelpSupportPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Phone, Mail, MessageCircle, HelpCircle, Clock, MapPin } from \"lucide-react\";\n\nexport default function HelpSupportPage() {\n  const [, setLocation] = useLocation();\n\n  const faqItems = [\n    {\n      question: \"How do I place an order?\",\n      answer: \"Browse our menu, add items to cart, and proceed to checkout. You can pay online or choose cash on delivery.\"\n    },\n    {\n      question: \"What are the delivery charges?\",\n      answer: \"Delivery is free for orders above ₹100. Below that, we charge a nominal fee of ₹20.\"\n    },\n    {\n      question: \"How long does delivery take?\",\n      answer: \"Most orders are delivered within 15-25 minutes during peak hours and 10-15 minutes during off-peak hours.\"\n    },\n    {\n      question: \"Can I cancel my order?\",\n      answer: \"You can cancel your order within 2 minutes of placing it. After that, please contact our support team.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-primary-foreground px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\">Help & Support</h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Contact Options */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-3\">Get in Touch</h2>\n          <div className=\"grid grid-cols-1 gap-3\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                  <Phone className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Call Us</h3>\n                  <p className=\"text-sm text-muted-foreground\">+91 9876543210</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center\">\n                  <Mail className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Email Us</h3>\n                  <p className=\"text-sm text-muted-foreground\">support@kitcanteen.com</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center\">\n                  <MessageCircle className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Live Chat</h3>\n                  <p className=\"text-sm text-muted-foreground\">Available 9 AM - 9 PM</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Operating Hours */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"w-5 h-5\" />\n              <span>Operating Hours</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Monday - Friday</span>\n                <span className=\"font-medium\">7:00 AM - 9:00 PM</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Saturday</span>\n                <span className=\"font-medium\">8:00 AM - 8:00 PM</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Sunday</span>\n                <span className=\"font-medium\">8:00 AM - 6:00 PM</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Location */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-5 h-5\" />\n              <span>Our Location</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              KIT College Main Campus<br />\n              Main Canteen Building<br />\n              Ground Floor<br />\n              Kalinga Institute of Technology<br />\n              Bhubaneswar, Odisha 751024\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* FAQ */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-3 flex items-center space-x-2\">\n            <HelpCircle className=\"w-5 h-5\" />\n            <span>Frequently Asked Questions</span>\n          </h2>\n          <div className=\"space-y-3\">\n            {faqItems.map((item, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-medium mb-2\">{item.question}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{item.answer}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5797},"client/src/components/HomeScreen.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { Search, MapPin, Filter, Utensils, Coffee, Cookie, Pizza, Star, Clock, Flame, ThumbsUp, Users, Zap, ChefHat, Heart, Loader2 } from \"lucide-react\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport type { MenuItem, Category } from \"@shared/schema\";\n\nexport default function HomeScreen() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuthSync();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  // Show loading while checking authentication\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n  const [activeTab, setActiveTab] = useState(\"delivery\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { addToCart, getCartQuantity } = useCart();\n\n  // Enhanced queries with real-time synchronization\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch categories: ${response.status}`);\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 10, // 10 minutes for categories\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n  });\n\n  const { data: menuItems = [], isLoading: menuItemsLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    queryFn: async () => {\n      const response = await fetch('/api/menu');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch menu items: ${response.status}`);\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes for menu items\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const isLoading = categoriesLoading || menuItemsLoading;\n\n  // Get trending items from database\n  const trendingItems = menuItems\n    .filter(item => item.available)\n    .slice(0, 3)\n    .map(item => ({\n      id: item.id.toString(),\n      name: item.name,\n      price: item.price\n    }));\n\n  // Get quick picks from database\n  const quickPickItems = menuItems\n    .filter(item => item.available)\n    .slice(3, 6)\n    .map(item => ({\n      id: item.id.toString(),\n      name: item.name,\n      price: item.price\n    }));\n\n  // Map database categories to UI categories\n  const displayCategories = categories.map(category => ({\n    name: category.name,\n    icon: Utensils, // Default icon, can be customized per category\n    color: \"bg-primary\",\n    route: `/menu/${category.name.toLowerCase()}`\n  }));\n\n  // Reviews will come from feedback system when implemented\n  const reviews: any[] = [];\n\n  // Stats calculated from actual database data\n  const quickStats = [\n    { icon: Clock, label: \"Available\", sublabel: \"Order now\" },\n    { icon: Users, label: \"0\", sublabel: \"Active orders\" },\n    { icon: ChefHat, label: menuItems.length.toString(), sublabel: \"Menu items\" },\n    { icon: Star, label: categories.length.toString(), sublabel: \"Categories\" }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <div className=\"bg-primary px-4 pt-12 pb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-5 h-5 text-white\" />\n              <div>\n                <p className=\"text-white font-medium\">KIT College</p>\n                <p className=\"text-white/80 text-sm\">Main Canteen</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </div>\n        <BottomNavigation currentPage=\"home\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <MapPin className=\"w-5 h-5 text-white\" />\n            <div>\n              <p className=\"text-white font-medium\">KIT College</p>\n              <p className=\"text-white/80 text-sm\">Main Canteen</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n            <Filter className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60 w-5 h-5\" />\n          <Input\n            placeholder=\"Search for food...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/60\"\n          />\n        </div>\n      </div>\n\n      <div className=\"px-4 space-y-6 -mt-3\">\n        {/* Quick Stats */}\n        <Card className=\"bg-white shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-4 gap-4\">\n              {quickStats.map((stat, index) => {\n                const IconComponent = stat.icon;\n                return (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <IconComponent className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <p className=\"text-sm font-semibold\">{stat.label}</p>\n                    <p className=\"text-xs text-muted-foreground\">{stat.sublabel}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Categories */}\n        {displayCategories.length > 0 && (\n          <div>\n            <h2 className=\"text-xl font-bold mb-4\">Categories</h2>\n            <div className=\"grid grid-cols-4 gap-4\">\n              {displayCategories.map((category, index) => {\n                const IconComponent = category.icon;\n                return (\n                  <Card\n                    key={index}\n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => setLocation(category.route)}\n                  >\n                    <CardContent className=\"p-4 text-center\">\n                      <div className={`w-12 h-12 ${category.color} rounded-lg flex items-center justify-center mx-auto mb-2`}>\n                        <IconComponent className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <p className=\"text-sm font-medium\">{category.name}</p>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Trending Now */}\n        {trendingItems.length > 0 && (\n          <div className=\"animate-fade-in\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-bold flex items-center\">\n                <Flame className=\"w-5 h-5 mr-2 text-orange-500\" />\n                Trending Now\n              </h2>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\" onClick={() => setLocation(\"/trending\")}>\n                View all\n              </Button>\n            </div>\n            <div className=\"space-y-3\">\n              {trendingItems.map((item, index) => (\n                <Card key={item.id} className=\"shadow-card hover-scale transition-all duration-300 cursor-pointer\" onClick={() => setLocation(`/dish/${item.id}`)}>\n                  <CardContent className=\"p-4 flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-orange-400 to-red-500 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                      <Zap className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold\">{item.name}</h3>\n                        <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700\">\n                          🔥 Trending\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-sm text-muted-foreground\">Available now</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold\">₹{item.price}</p>\n                      <Button\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addToCart({\n                            id: parseInt(item.id),\n                            name: item.name,\n                            price: item.price\n                          });\n                        }}\n                      >\n                        {getCartQuantity(parseInt(item.id)) > 0 \n                          ? `ADD (${getCartQuantity(parseInt(item.id))})` \n                          : 'ADD'\n                        }\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Quick Picks */}\n        {quickPickItems.length > 0 && (\n          <div className=\"animate-slide-up\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-bold\">Quick Picks</h2>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\" onClick={() => setLocation(\"/quick-picks\")}>\n                View all\n              </Button>\n            </div>\n            <div className=\"space-y-3\">\n              {quickPickItems.map((item, index) => (\n                <Card key={item.id} className=\"shadow-card hover-scale transition-all duration-300 cursor-pointer\" onClick={() => setLocation(`/dish/${item.id}`)}>\n                  <CardContent className=\"p-4 flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-green-400 to-blue-500 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                      <Utensils className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold mb-1\">{item.name}</h3>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"ml-1 text-sm text-muted-foreground\">Quick pick</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold\">₹{item.price}</p>\n                      <Button\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addToCart({\n                            id: parseInt(item.id),\n                            name: item.name,\n                            price: item.price\n                          });\n                        }}\n                      >\n                        {getCartQuantity(parseInt(item.id)) > 0 \n                          ? `ADD (${getCartQuantity(parseInt(item.id))})` \n                          : 'ADD'\n                        }\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Empty State */}\n        {menuItems.length === 0 && (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ChefHat className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No Menu Items Available</h3>\n            <p className=\"text-muted-foreground mb-4\">Check back later for delicious food options!</p>\n          </div>\n        )}\n\n        {/* Customer Reviews */}\n        <div>\n          <h2 className=\"text-xl font-bold mb-4 flex items-center\">\n            <Heart className=\"w-5 h-5 mr-2 text-red-500\" />\n            What Our Customers Say\n          </h2>\n          <div className=\"space-y-3\">\n            {reviews.map((review, index) => (\n              <Card key={index} className=\"shadow-sm\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"text-2xl\">{review.avatar}</div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-medium\">{review.name}</h4>\n                        <div className=\"flex\">\n                          {[...Array(review.rating)].map((_, i) => (\n                            <Star key={i} className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                          ))}\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}","size_bytes":14589},"client/src/components/LoginPageClean.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, Lock, Mail, Loader2, ChefHat } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { signInWithGoogle, handleGoogleRedirect } from \"@/lib/firebase\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    role: \"student\" as const\n  });\n\n  // Handle Firebase redirect result on component mount\n  useEffect(() => {\n    handleGoogleRedirect()\n      .then((result) => {\n        if (result) {\n          toast({ title: \"Google sign-in successful!\" });\n          // Store user data and redirect\n          localStorage.setItem('user', JSON.stringify({\n            id: result.user.uid,\n            name: result.user.displayName,\n            email: result.user.email,\n            role: 'student'\n          }));\n          setLocation('/home');\n        }\n      })\n      .catch((error) => {\n        toast({ \n          title: \"Google sign-in failed\", \n          description: error.errorMessage,\n          variant: \"destructive\" \n        });\n      });\n  }, []);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      return apiRequest('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: (data) => {\n      toast({ title: \"Login successful!\" });\n      // Store user data in localStorage or context\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setLocation('/home');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Login failed\", \n        description: error.message || \"Please check your credentials\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string; name: string; role: string }) => {\n      return apiRequest('/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n    },\n    onSuccess: (data) => {\n      toast({ title: \"Registration successful!\" });\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setLocation('/home');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Registration failed\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isLogin) {\n      if (!formData.email || !formData.password) {\n        toast({ \n          title: \"Please fill all fields\", \n          variant: \"destructive\" \n        });\n        return;\n      }\n      loginMutation.mutate({\n        email: formData.email,\n        password: formData.password\n      });\n    } else {\n      if (!formData.email || !formData.password || !formData.name) {\n        toast({ \n          title: \"Please fill all fields\", \n          variant: \"destructive\" \n        });\n        return;\n      }\n      registerMutation.mutate(formData);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      const result = await signInWithGoogle();\n      \n      if (result?.user) {\n        toast({ title: \"Google sign-in successful!\" });\n        // Store user data and redirect\n        localStorage.setItem('user', JSON.stringify({\n          id: result.user.uid,\n          name: result.user.displayName,\n          email: result.user.email,\n          role: 'student'\n        }));\n        setLocation('/home');\n      }\n    } catch (error: any) {\n      // Google sign-in error - show user-friendly message\n      toast({ \n        title: \"Google sign-in failed\", \n        description: error.message || \"Please try again. Make sure popups are enabled.\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const isLoading = loginMutation.isPending || registerMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <ChefHat className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">\n            {isLogin ? \"Welcome Back\" : \"Join KIT Canteen\"}\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            {isLogin \n              ? \"Sign in to your account to continue\" \n              : \"Create your account to get started\"\n            }\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"pl-10\"\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                  className=\"pl-10\"\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  className=\"pl-10\"\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">Role</Label>\n                <select\n                  id=\"role\"\n                  value={formData.role}\n                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value as any }))}\n                  className=\"w-full px-3 py-2 border rounded-md\"\n                  disabled={isLoading}\n                >\n                  <option value=\"student\">Student</option>\n                  <option value=\"faculty\">Faculty</option>\n                  <option value=\"staff\">Staff</option>\n                </select>\n              </div>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  {isLogin ? \"Signing in...\" : \"Creating account...\"}\n                </>\n              ) : (\n                isLogin ? \"Sign In\" : \"Create Account\"\n              )}\n            </Button>\n          </form>\n\n          {/* Google Sign In */}\n          <div className=\"mt-6\">\n            <Separator className=\"mb-4\" />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={handleGoogleSignIn}\n              disabled={isLoading}\n            >\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Continue with Google\n            </Button>\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}\n              <button\n                type=\"button\"\n                onClick={() => setIsLogin(!isLogin)}\n                className=\"ml-1 text-primary hover:underline font-medium\"\n                disabled={isLoading}\n              >\n                {isLogin ? \"Sign up\" : \"Sign in\"}\n              </button>\n            </p>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation('/home')}\n              disabled={isLoading}\n            >\n              Continue as Guest\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10619},"client/src/components/LoginScreen.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { signInWithGoogle, signInWithGoogleRedirect, handleGoogleRedirect } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect, useState } from \"react\";\n\nexport default function LoginScreen() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Enhanced authentication with user creation and role sync\n  useEffect(() => {\n    handleGoogleRedirect()\n      .then(async (result) => {\n        if (result) {\n          toast({ title: \"Google sign-in successful!\" });\n          \n          // Check if user exists and get role, create if doesn't exist\n          try {\n            let response = await fetch(`/api/users/by-username/${result.user.email}`);\n            let userRole = 'student';\n            let userId = result.user.uid;\n            \n            if (response.ok) {\n              const userData = await response.json();\n              userRole = userData.role;\n              userId = userData.id;\n            } else if (response.status === 404) {\n              // User doesn't exist, create new user\n              \n              // Determine role based on email for special accounts\n              if (result.user.email === 'kitcanteen1@gmail.com') {\n                userRole = 'super_admin';\n              } else if (result.user.email === 'kitcanteenowner@gmail.com') {\n                userRole = 'canteen_owner';\n              }\n              \n              const createResponse = await fetch('/api/users', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  username: result.user.email,\n                  password: 'oauth_user', // Placeholder for OAuth users\n                  role: userRole\n                })\n              });\n              \n              if (createResponse.ok) {\n                const newUser = await createResponse.json();\n                userId = newUser.id;\n              }\n            }\n            \n            // Store user data with actual role from database\n            localStorage.setItem('user', JSON.stringify({\n              id: userId,\n              name: result.user.displayName,\n              email: result.user.email,\n              role: userRole\n            }));\n            \n            // Redirect based on role with enhanced messaging\n            if (userRole === 'super_admin') {\n              toast({ title: \"Welcome Super Admin!\", description: \"Access to all system controls\" });\n              setLocation('/admin');\n            } else if (userRole === 'canteen_owner') {\n              toast({ title: \"Welcome Canteen Owner!\", description: \"Manage your canteen operations\" });\n              setLocation('/canteen-owner-dashboard');\n            } else {\n              toast({ title: \"Welcome Student!\", description: \"Explore delicious menu options\" });\n              setLocation('/home');\n            }\n          } catch (error) {\n            // Error in authentication flow - default to student role if API fails\n            localStorage.setItem('user', JSON.stringify({\n              id: result.user.uid,\n              name: result.user.displayName,\n              email: result.user.email,\n              role: 'student'\n            }));\n            setLocation('/home');\n          }\n        }\n      })\n      .catch((error) => {\n        toast({ \n          title: \"Google sign-in failed\", \n          description: error.errorMessage || \"Authentication failed\",\n          variant: \"destructive\" \n        });\n      });\n  }, []);\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    try {\n      const result = await signInWithGoogle();\n      \n      if (result.user) {\n        toast({ title: \"Successfully signed in!\" });\n        \n        // Enhanced user authentication and role management (same as above)\n        try {\n          let response = await fetch(`/api/users/by-username/${result.user.email}`);\n          let userRole = 'student';\n          let userId = result.user.uid;\n          \n          if (response.ok) {\n            const userData = await response.json();\n            userRole = userData.role;\n            userId = userData.id;\n          } else if (response.status === 404) {\n            // User doesn't exist, create new user\n            \n            // Determine role based on email for special accounts\n            if (result.user.email === 'kitcanteen1@gmail.com') {\n              userRole = 'super_admin';\n            } else if (result.user.email === 'kitcanteenowner@gmail.com') {\n              userRole = 'canteen_owner';\n            }\n            \n            const createResponse = await fetch('/api/users', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                username: result.user.email,\n                password: 'oauth_user',\n                role: userRole\n              })\n            });\n            \n            if (createResponse.ok) {\n              const newUser = await createResponse.json();\n              userId = newUser.id;\n            }\n          }\n          \n          // Store user data with actual role from database\n          localStorage.setItem('user', JSON.stringify({\n            id: userId,\n            name: result.user.displayName,\n            email: result.user.email,\n            role: userRole\n          }));\n          \n          // Redirect based on role\n          if (userRole === 'super_admin') {\n            toast({ title: \"Welcome Super Admin!\", description: \"Access to all system controls\" });\n            setLocation(\"/admin\");\n          } else if (userRole === 'canteen_owner') {\n            toast({ title: \"Welcome Canteen Owner!\", description: \"Manage your canteen operations\" });\n            setLocation(\"/canteen-owner-dashboard\");\n          } else {\n            toast({ title: \"Welcome Student!\", description: \"Explore delicious menu options\" });\n            setLocation(\"/home\");\n          }\n        } catch (error) {\n          // Error in authentication flow - default to student role if API fails\n          localStorage.setItem('user', JSON.stringify({\n            id: result.user.uid,\n            name: result.user.displayName,\n            email: result.user.email,\n            role: 'student'\n          }));\n          setLocation(\"/home\");\n        }\n      }\n    } catch (error: any) {\n      // Google sign-in error - handle specific error cases\n      \n      if (error.code === 'auth/unauthorized-domain') {\n        toast({ \n          title: \"Domain Authorization Required\", \n          description: \"Please add this domain to Firebase Console authorized domains\",\n          variant: \"destructive\" \n        });\n      } else if (error.code === 'auth/popup-blocked') {\n        toast({ \n          title: \"Popup blocked\", \n          description: \"Redirecting to Google sign-in page...\",\n        });\n        try {\n          await signInWithGoogleRedirect();\n        } catch (redirectError) {\n          // Redirect error - show user-friendly message\n          toast({ \n            title: \"Authentication failed\", \n            description: \"Unable to sign in with Google\",\n            variant: \"destructive\" \n          });\n        }\n      } else if (error.code === 'auth/popup-closed-by-user') {\n        toast({ \n          title: \"Sign-in cancelled\", \n          description: \"You closed the sign-in window\",\n        });\n      } else {\n        toast({ \n          title: \"Sign-in failed\", \n          description: error.message || \"Unable to sign in with Google\",\n          variant: \"destructive\" \n        });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-center items-center p-4\">\n        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n          <span className=\"text-primary text-lg font-bold\">KIT</span>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 px-6 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n            Welcome to KIT-Canteen\n          </h1>\n          <p className=\"text-muted-foreground mb-8\">\n            Sign in to order your favorite food\n          </p>\n\n          {/* Email login */}\n          <Card className=\"shadow-card\">\n            <CardContent className=\"p-6\">\n              <Button\n                onClick={handleGoogleSignIn}\n                variant=\"food\"\n                size=\"mobile\"\n                className=\"w-full\"\n                disabled={isLoading}\n              >\n                <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n{isLoading ? \"Signing in...\" : \"Continue with College Email\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-6 text-center\">\n        <p className=\"text-xs text-muted-foreground\">\n          By continuing, you agree to our{\" \"}\n          <span className=\"text-primary underline\">Terms of Service</span> and{\" \"}\n          <span className=\"text-primary underline\">Privacy Policy</span>\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":10213},"client/src/components/MenuListingPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Filter, Star, Plus, Loader2 } from \"lucide-react\";\nimport { useCart } from \"@/hooks/useCart\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport type { MenuItem, Category } from \"@shared/schema\";\n\nexport default function MenuListingPage() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/menu/:category\");\n  const category = params?.category;\n  const [filter, setFilter] = useState<\"all\" | \"veg\" | \"non-veg\">(\"all\");\n  const { addToCart, getCartQuantity, decreaseQuantity } = useCart();\n\n  // Fetch categories and menu items from database with optimized caching\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    staleTime: 1000 * 60 * 10, // 10 minutes for categories\n  });\n\n  const { data: menuItems = [], isLoading: menuItemsLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    staleTime: 1000 * 60 * 5, // 5 minutes for menu items\n  });\n\n  const isLoading = categoriesLoading || menuItemsLoading;\n\n  // Filter items by category if specified\n  const getCategoryItems = () => {\n    if (category === \"all\") return menuItems;\n    \n    const categoryData = categories.find(cat => \n      cat.name.toLowerCase() === category?.toLowerCase()\n    );\n    \n    if (!categoryData) return [];\n    \n    return menuItems.filter(item => item.categoryId === categoryData.id);\n  };\n\n  const items = getCategoryItems();\n  const filteredItems = items.filter(item => {\n    if (filter === \"all\") return true;\n    // Note: For now treating all items as veg since we don't have isVeg field in schema\n    // This can be extended when the schema includes vegetarian/non-vegetarian classification\n    return true;\n  });\n\n  const handleAddToCart = (item: typeof items[0]) => {\n    addToCart({\n      id: item.id,\n      name: item.name,\n      price: item.price\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/home')}>\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <h1 className=\"text-xl font-bold capitalize\">{category}</h1>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\">\n            <Filter className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex space-x-2 mt-4\">\n          {[\n            { id: \"all\", label: \"All\" },\n            { id: \"veg\", label: \"Veg\" },\n            { id: \"non-veg\", label: \"Non-Veg\" }\n          ].map((filterOption) => (\n            <Button\n              key={filterOption.id}\n              variant={filter === filterOption.id ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(filterOption.id as any)}\n            >\n              {filterOption.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </div>\n      )}\n\n      {/* Menu Items */}\n      {!isLoading && (\n        <div className=\"p-4 space-y-4\">\n          {filteredItems.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No items found in this category</p>\n            </div>\n          ) : (\n            filteredItems.map((item) => (\n              <Card key={item.id} className=\"shadow-card cursor-pointer hover:shadow-lg transition-shadow\" onClick={() => setLocation(`/dish/${item.id}`, { state: { from: `/menu/${category}` } })}>\n                <CardContent className=\"p-0\">\n                  <div className=\"flex\">\n                    {/* Image */}\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-orange-100 to-orange-200 flex-shrink-0 rounded-l-lg flex items-center justify-center text-3xl\">\n                      🍽️\n                    </div>\n                    \n                    {/* Content */}\n                    <div className=\"flex-1 p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className=\"font-semibold\">{item.name}</h3>\n                            <div className=\"w-3 h-3 rounded border-2 border-green-600\">\n                              <div className=\"w-1.5 h-1.5 rounded-full bg-green-600 m-0.5\"></div>\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">{item.description || \"Delicious item from our menu\"}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-lg\">₹{item.price}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center\">\n                            <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                            <span className=\"text-sm ml-1\">4.5</span>\n                          </div>\n                          {!item.available && (\n                            <Badge variant=\"destructive\">Not Available</Badge>\n                          )}\n                          {item.stock <= 5 && item.stock > 0 && (\n                            <Badge variant=\"outline\">Limited Stock</Badge>\n                          )}\n                          {item.stock === 0 && (\n                            <Badge variant=\"destructive\">Out of Stock</Badge>\n                          )}\n                        </div>\n                        \n                        {getCartQuantity(item.id) > 0 ? (\n                          <div className=\"flex items-center space-x-2\" onClick={(e) => e.stopPropagation()}>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                decreaseQuantity(item.id);\n                              }}\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              -\n                            </Button>\n                            <span className=\"font-semibold w-8 text-center\">{getCartQuantity(item.id)}</span>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleAddToCart(item);\n                              }}\n                              className=\"w-8 h-8 p-0\"\n                            >\n                              +\n                            </Button>\n                          </div>\n                        ) : (\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            disabled={!item.available || item.stock === 0}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleAddToCart(item);\n                            }}\n                          >\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                            ADD\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n\n      <BottomNavigation currentPage=\"menu\" />\n    </div>\n  );\n}","size_bytes":8490},"client/src/components/NotificationsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ArrowLeft, Bell, Smartphone, Mail, Clock } from \"lucide-react\";\n\nexport default function NotificationsPage() {\n  const [, setLocation] = useLocation();\n  const [notifications, setNotifications] = useState({\n    orderUpdates: true,\n    promotions: false,\n    pushNotifications: true,\n    emailNotifications: true,\n    smsNotifications: false,\n    soundEnabled: true,\n    vibration: true\n  });\n\n  const updateNotification = (key: keyof typeof notifications) => {\n    setNotifications(prev => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-white\">Notifications</h1>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Order Notifications */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Bell className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Order Updates</h3>\n                <p className=\"text-sm text-muted-foreground\">Get notified about your order status</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Order Status Updates</p>\n                  <p className=\"text-sm text-muted-foreground\">When your order is being prepared, ready, etc.</p>\n                </div>\n                <Switch \n                  checked={notifications.orderUpdates}\n                  onCheckedChange={() => updateNotification('orderUpdates')}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Promotional Notifications */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-warning/10 rounded-lg flex items-center justify-center\">\n                <Clock className=\"w-5 h-5 text-warning\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Promotions & Offers</h3>\n                <p className=\"text-sm text-muted-foreground\">Special deals and discounts</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Special Offers</p>\n                  <p className=\"text-sm text-muted-foreground\">Get notified about new deals and discounts</p>\n                </div>\n                <Switch \n                  checked={notifications.promotions}\n                  onCheckedChange={() => updateNotification('promotions')}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Delivery Methods */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Delivery Methods</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Smartphone className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"font-medium\">Push Notifications</p>\n                    <p className=\"text-sm text-muted-foreground\">Instant notifications on your device</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={notifications.pushNotifications}\n                  onCheckedChange={() => updateNotification('pushNotifications')}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"font-medium\">Email Notifications</p>\n                    <p className=\"text-sm text-muted-foreground\">Receive updates via email</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={notifications.emailNotifications}\n                  onCheckedChange={() => updateNotification('emailNotifications')}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Smartphone className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"font-medium\">SMS Notifications</p>\n                    <p className=\"text-sm text-muted-foreground\">Get text messages for important updates</p>\n                  </div>\n                </div>\n                <Switch \n                  checked={notifications.smsNotifications}\n                  onCheckedChange={() => updateNotification('smsNotifications')}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* App Settings */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">App Settings</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Sound</p>\n                  <p className=\"text-sm text-muted-foreground\">Play sound for notifications</p>\n                </div>\n                <Switch \n                  checked={notifications.soundEnabled}\n                  onCheckedChange={() => updateNotification('soundEnabled')}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Vibration</p>\n                  <p className=\"text-sm text-muted-foreground\">Vibrate for notifications</p>\n                </div>\n                <Switch \n                  checked={notifications.vibration}\n                  onCheckedChange={() => updateNotification('vibration')}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Test Notification */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3\">Test Notifications</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Send a test notification to make sure everything is working properly\n            </p>\n            <Button variant=\"outline\" className=\"w-full\">\n              Send Test Notification\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7610},"client/src/components/OrderDetailPage.tsx":{"content":"import { useLocation, useParams } from \"wouter\";\nimport { useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  MapPin, \n  Clock, \n  Receipt, \n  Star,\n  User,\n  Phone,\n  CreditCard,\n  Package\n} from \"lucide-react\";\nimport JsBarcode from 'jsbarcode';\n\n// Real Barcode Generator Component using JsBarcode library\nconst BarcodeGenerator = ({ orderId }: { orderId: string }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      try {\n        // Generate a proper Code 128 barcode\n        JsBarcode(canvasRef.current, orderId, {\n          format: \"CODE128\",\n          width: 2,\n          height: 60,\n          displayValue: true,\n          background: \"#ffffff\",\n          lineColor: \"#000000\",\n          margin: 10,\n          fontSize: 14,\n          textAlign: \"center\",\n          textPosition: \"bottom\"\n        });\n      } catch (error) {\n        // Barcode generation failed - using fallback display\n        // Fallback: display order ID as text\n        const canvas = canvasRef.current;\n        const ctx = canvas?.getContext('2d');\n        if (ctx && canvas) {\n          canvas.width = 250;\n          canvas.height = 80;\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          ctx.fillStyle = '#000000';\n          ctx.font = '16px monospace';\n          ctx.textAlign = 'center';\n          ctx.fillText(`Order: ${orderId}`, canvas.width/2, canvas.height/2);\n        }\n      }\n    }\n  }, [orderId]);\n\n  return (\n    <canvas \n      ref={canvasRef}\n      className=\"mx-auto\"\n      style={{ maxWidth: '100%', height: 'auto' }}\n    />\n  );\n};\n\nexport default function OrderDetailPage() {\n  const [, setLocation] = useLocation();\n  const { orderId } = useParams();\n\n  // Mock order data - in real app, fetch based on orderId\n  const orderDetails = {\n    id: orderId || \"A1B2C3D4E5F6\", // Use 12-digit alphanumeric format\n    status: \"completed\",\n    placedAt: \"Yesterday, 1:15 PM\",\n    deliveredAt: \"Yesterday, 1:35 PM\",\n    total: 60,\n    subtotal: 55,\n    tax: 3,\n    deliveryFee: 2,\n    items: [\n      {\n        id: 1,\n        name: \"Samosa\",\n        quantity: 2,\n        price: 20,\n        total: 40,\n        image: \"🥟\",\n        isVeg: true\n      },\n      {\n        id: 2,\n        name: \"Filter Coffee\",\n        quantity: 1,\n        price: 20,\n        total: 20,\n        image: \"☕\",\n        isVeg: true\n      }\n    ],\n    restaurant: {\n      name: \"Main Canteen\",\n      address: \"Ground Floor, Academic Block\"\n    },\n    customer: {\n      name: \"Rahul Kumar\",\n      phone: \"+91 98765 43210\"\n    },\n    payment: {\n      method: \"UPI\",\n      transactionId: \"TXN123456789\"\n    },\n    rating: 4.5,\n    feedback: \"Great food and quick service!\"\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"preparing\": return \"bg-warning text-warning-foreground\";\n      case \"ready\": return \"bg-success text-success-foreground\";\n      case \"completed\": return \"bg-muted text-muted-foreground\";\n      case \"delivered\": return \"bg-success text-success-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => {\n            // Use browser's back functionality, but with fallback\n            if (window.history.length > 1) {\n              window.history.back();\n            } else {\n              setLocation('/orders');\n            }\n          }}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-xl font-bold\">Order Details</h1>\n            <p className=\"text-sm text-muted-foreground\">Order #{orderDetails.id}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Order Status */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={getStatusColor(orderDetails.status)}>\n                  {orderDetails.status.charAt(0).toUpperCase() + orderDetails.status.slice(1)}\n                </Badge>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-bold text-xl\">₹{orderDetails.total}</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                <span>Placed: {orderDetails.placedAt}</span>\n              </div>\n              {orderDetails.deliveredAt && (\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <Clock className=\"w-4 h-4 text-success\" />\n                  <span>Delivered: {orderDetails.deliveredAt}</span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Barcode */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <Package className=\"w-5 h-5 mr-2 text-primary\" />\n              Order Barcode\n            </h3>\n            <div className=\"bg-accent/50 rounded-lg p-4 text-center\">\n              {/* Real Code 128 Barcode using JsBarcode library */}\n              <div className=\"bg-white p-4 rounded-lg inline-block mb-3 border-2 border-gray-200\">\n                <BarcodeGenerator orderId={orderDetails.id} />\n              </div>\n              <p className=\"font-bold text-lg mb-1\">Order ID: {orderDetails.id}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Scannable Code 128 barcode for quick order verification\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Items */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <Receipt className=\"w-5 h-5 mr-2\" />\n              Order Items\n            </h2>\n            \n            <div className=\"space-y-4\">\n              {orderDetails.items.map((item) => (\n                <div key={item.id} className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-orange-100 to-orange-200 rounded-lg flex items-center justify-center text-lg\">\n                    {item.image}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"font-medium\">{item.name}</h3>\n                      <div className={`w-3 h-3 rounded border-2 ${item.isVeg ? 'border-green-600' : 'border-red-600'}`}>\n                        <div className={`w-1.5 h-1.5 rounded-full ${item.isVeg ? 'bg-green-600' : 'bg-red-600'} m-0.5`}></div>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">₹{item.price} x {item.quantity}</p>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">₹{item.total}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bill Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4\">Bill Details</h2>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Subtotal</span>\n                <span>₹{orderDetails.subtotal}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Taxes & Charges</span>\n                <span>₹{orderDetails.tax}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Delivery Fee</span>\n                <span>₹{orderDetails.deliveryFee}</span>\n              </div>\n              \n              <Separator className=\"my-2\" />\n              \n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total</span>\n                <span>₹{orderDetails.total}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Restaurant Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <MapPin className=\"w-5 h-5 mr-2\" />\n              Restaurant Details\n            </h2>\n            \n            <div>\n              <h3 className=\"font-medium\">{orderDetails.restaurant.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{orderDetails.restaurant.address}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customer Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Customer Details\n            </h2>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"w-4 h-4 text-muted-foreground\" />\n                <span>{orderDetails.customer.name}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                <span>{orderDetails.customer.phone}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-4 flex items-center\">\n              <CreditCard className=\"w-5 h-5 mr-2\" />\n              Payment Details\n            </h2>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Payment Method</span>\n                <span className=\"font-medium\">{orderDetails.payment.method}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Transaction ID</span>\n                <span className=\"text-sm text-muted-foreground\">{orderDetails.payment.transactionId}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Rating & Feedback */}\n        {orderDetails.status === \"completed\" && orderDetails.rating && (\n          <Card className=\"shadow-card\">\n            <CardContent className=\"p-4\">\n              <h2 className=\"font-semibold mb-4 flex items-center\">\n                <Star className=\"w-5 h-5 mr-2\" />\n                Your Rating & Feedback\n              </h2>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`w-5 h-5 ${\n                          star <= orderDetails.rating\n                            ? \"text-yellow-500 fill-current\"\n                            : \"text-gray-300\"\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"font-medium\">{orderDetails.rating}/5</span>\n                </div>\n                {orderDetails.feedback && (\n                  <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded-lg\">\n                    \"{orderDetails.feedback}\"\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 pb-6\">\n          <Button \n            variant=\"food\"\n            size=\"mobile\"\n            className=\"w-full\"\n            onClick={() => setLocation(`/reorder?orderId=${orderDetails.id}`)}\n          >\n            Reorder\n          </Button>\n          \n          {orderDetails.status === \"completed\" && !orderDetails.rating && (\n            <Button \n              variant=\"outline\"\n              size=\"mobile\"\n              className=\"w-full\"\n              onClick={() => setLocation(`/rate-review?orderId=${orderDetails.id}`)}\n            >\n              Rate & Review\n            </Button>\n          )}\n          \n          <Button \n            variant=\"outline\"\n            size=\"mobile\"\n            className=\"w-full\"\n            onClick={() => setLocation('/help-support')}\n          >\n            Get Help\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13402},"client/src/components/OrderStatusPage.tsx":{"content":"import { useState, useEffect, useRef, useMemo } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, Clock, ChefHat, Package, Phone, ArrowLeft } from \"lucide-react\";\nimport JsBarcode from 'jsbarcode';\nimport { formatOrderIdDisplay } from \"@shared/utils\";\nimport type { Order } from '@shared/schema';\n\n// Real Barcode Generator Component using JsBarcode library\nconst BarcodeGenerator = ({ orderId }: { orderId: string }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      try {\n        // Generate a proper Code 128 barcode\n        JsBarcode(canvasRef.current, orderId, {\n          format: \"CODE128\",\n          width: 2,\n          height: 60,\n          displayValue: true,\n          background: \"#ffffff\",\n          lineColor: \"#000000\",\n          margin: 10,\n          fontSize: 14,\n          textAlign: \"center\",\n          textPosition: \"bottom\"\n        });\n      } catch (error) {\n        // Barcode generation failed - fallback to text display\n        const canvas = canvasRef.current;\n        const ctx = canvas?.getContext('2d');\n        if (ctx && canvas) {\n          canvas.width = 250;\n          canvas.height = 80;\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          ctx.fillStyle = '#000000';\n          ctx.font = '16px monospace';\n          ctx.textAlign = 'center';\n          ctx.fillText(`Order: ${orderId}`, canvas.width/2, canvas.height/2);\n        }\n      }\n    }\n  }, [orderId]);\n\n  return (\n    <canvas \n      ref={canvasRef}\n      className=\"mx-auto\"\n      style={{ maxWidth: '100%', height: 'auto' }}\n    />\n  );\n};\n\nexport default function OrderStatusPage() {\n  const [, setLocation] = useLocation();\n  const { orderId } = useParams();\n\n  // Fetch real order data from API with short cache time for real-time updates\n  const { data: orders = [], isLoading, refetch } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    staleTime: 0, // Always fetch fresh data\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n\n  // Find the specific order by ID, order number, or barcode (supporting both old and new formats)\n  const order = orders.find(o => \n    o.id.toString() === orderId || \n    o.orderNumber === orderId ||\n    o.barcode === orderId\n  );\n\n  const orderStatus = order?.status as \"preparing\" | \"ready\" | \"completed\" | \"delivered\" || \"preparing\";\n  \n  // Calculate progress based on order status - memoized to prevent infinite loops\n  const progress = useMemo(() => {\n    switch (orderStatus) {\n      case \"preparing\": return 33;\n      case \"ready\": return 66;\n      case \"completed\": return 100;\n      case \"delivered\": return 100;\n      default: return 33;\n    }\n  }, [orderStatus]);\n\n  const orderDetails = order ? {\n    id: order.barcode, // Use barcode as the primary ID for consistency\n    orderNumber: order.orderNumber, // Keep order number for reference\n    items: JSON.parse(order.items || '[]') as Array<{id: number, name: string, price: number, quantity: number}>,\n    total: order.amount,\n    estimatedTime: `${order.estimatedTime || 15} mins`,\n    actualTime: orderStatus === \"ready\" ? `${order.estimatedTime || 15} mins` : `${order.estimatedTime || 15} mins`,\n    pickupLocation: \"KIT College Main Canteen, Ground Floor\"\n  } : null;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center py-8\">Loading order details...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!order || !orderDetails) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center py-8\">Order not found</div>\n          <Button onClick={() => setLocation(\"/orders\")} className=\"w-full\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Orders\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n\n  const statusSteps = [\n    {\n      status: \"placed\",\n      label: \"Order Placed\",\n      icon: CheckCircle,\n      completed: true,\n      time: order ? new Date(order.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : \"\"\n    },\n    {\n      status: \"preparing\",\n      label: \"Preparing\",\n      icon: ChefHat,\n      completed: orderStatus === \"preparing\" || orderStatus === \"ready\" || orderStatus === \"completed\" || orderStatus === \"delivered\",\n      time: orderStatus === \"preparing\" || orderStatus === \"ready\" || orderStatus === \"completed\" || orderStatus === \"delivered\" ? \n        order ? new Date(new Date(order.createdAt).getTime() + 3 * 60000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : \"\" : \"\"\n    },\n    {\n      status: \"ready\",\n      label: \"Ready for Pickup\",\n      icon: Package,\n      completed: orderStatus === \"ready\" || orderStatus === \"completed\" || orderStatus === \"delivered\",\n      time: orderStatus === \"ready\" || orderStatus === \"completed\" || orderStatus === \"delivered\" ? \n        order ? new Date(new Date(order.createdAt).getTime() + (order.estimatedTime || 15) * 60000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : \"\" : \"\"\n    },\n    {\n      status: \"delivered\",\n      label: \"Order Delivered\",\n      icon: CheckCircle,\n      completed: orderStatus === \"delivered\",\n      time: orderStatus === \"delivered\" && order?.deliveredAt ? \n        new Date(order.deliveredAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : \"\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"text-white hover:bg-white/20\"\n            onClick={() => {\n              // Use browser's back functionality, but with fallback\n              if (window.history.length > 1) {\n                window.history.back();\n              } else {\n                setLocation('/orders');\n              }\n            }}\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n        </div>\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-2\">Order Status</h1>\n          <p className=\"text-white/80\">Order #{orderDetails.orderNumber}</p>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Order Barcode */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <Package className=\"w-5 h-5 mr-2 text-primary\" />\n              Order Barcode\n            </h3>\n            <div className=\"bg-accent/50 rounded-lg p-4 text-center\">\n              {/* Real Code 128 Barcode using JsBarcode library */}\n              <div className=\"bg-white p-4 rounded-lg inline-block mb-3 border-2 border-gray-200\">\n                <BarcodeGenerator orderId={orderDetails.id} />\n              </div>\n              <p className=\"font-bold text-lg mb-1\">Order ID: {orderDetails.id}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Scannable Code 128 barcode for quick order verification\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Status */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              {orderStatus === \"preparing\" && <ChefHat className=\"w-10 h-10 text-warning\" />}\n              {orderStatus === \"ready\" && <Package className=\"w-10 h-10 text-success\" />}\n              {orderStatus === \"completed\" && <CheckCircle className=\"w-10 h-10 text-success\" />}\n            </div>\n            \n            <h2 className=\"text-xl font-bold mb-2\">\n              {orderStatus === \"preparing\" && \"Preparing Your Order\"}\n              {orderStatus === \"ready\" && \"Ready for Pickup!\"}\n              {orderStatus === \"completed\" && \"Order Completed!\"}\n            </h2>\n            \n            <p className=\"text-muted-foreground mb-4\">\n              {orderStatus === \"preparing\" && \"Our chef is preparing your delicious meal\"}\n              {orderStatus === \"ready\" && \"Your order is ready! Please collect from the canteen counter\"}\n              {orderStatus === \"completed\" && \"Your order has been completed. Thank you for your visit!\"}\n            </p>\n\n\n\n            <Progress value={progress} className=\"w-full\" />\n          </CardContent>\n        </Card>\n\n\n        {/* Status Timeline */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Order Timeline</h3>\n            <div className=\"space-y-4\">\n              {statusSteps.map((step, index) => (\n                <div key={step.status} className=\"flex items-center space-x-4\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    step.completed \n                      ? \"bg-success text-success-foreground\" \n                      : \"bg-muted text-muted-foreground\"\n                  }`}>\n                    <step.icon className=\"w-5 h-5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className={`font-medium ${step.completed ? \"text-foreground\" : \"text-muted-foreground\"}`}>\n                      {step.label}\n                    </p>\n                    {step.time && (\n                      <p className=\"text-sm text-muted-foreground\">{step.time}</p>\n                    )}\n                  </div>\n                  {step.completed && (\n                    <CheckCircle className=\"w-5 h-5 text-success\" />\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Details */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Order Details</h3>\n            <div className=\"space-y-3\">\n              {orderDetails.items.map((item, index) => (\n                <div key={index} className=\"flex justify-between\">\n                  <span>{item.name} x{item.quantity}</span>\n                  <span>₹{item.price}</span>\n                </div>\n              ))}\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between font-bold\">\n                  <span>Total</span>\n                  <span>₹{orderDetails.total}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pickup Location */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <Package className=\"w-5 h-5 mr-2 text-primary\" />\n              Pickup Location\n            </h3>\n            <div className=\"bg-accent/50 rounded-lg p-3\">\n              <p className=\"font-medium\">{orderDetails.pickupLocation}</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Present the barcode above for quick order verification\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold\">Need Help?</h3>\n                <p className=\"text-sm text-muted-foreground\">Contact canteen staff</p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Call\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"sticky bottom-0 bg-white border-t p-4 space-y-3\">\n        {orderStatus === \"delivered\" ? (\n          <Button\n            variant=\"food\"\n            size=\"mobile\"\n            className=\"w-full\"\n            onClick={() => setLocation(\"/home\")}\n          >\n            Order Delivered - Browse Menu\n          </Button>\n        ) : orderStatus === \"ready\" ? (\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"mobile\"\n              className=\"flex-1\"\n              onClick={() => setLocation(\"/home\")}\n            >\n              Browse Menu\n            </Button>\n            <Button\n              variant=\"food\"\n              size=\"mobile\"\n              className=\"flex-1\"\n              disabled\n            >\n              Ready for Pickup\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"mobile\"\n              className=\"flex-1\"\n              onClick={() => setLocation(\"/home\")}\n            >\n              Browse Menu\n            </Button>\n            <Button\n              variant=\"food\"\n              size=\"mobile\"\n              className=\"flex-1\"\n              onClick={() => refetch()}\n            >\n              Refresh Status\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13702},"client/src/components/OrdersPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { toast } from \"sonner\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Search, Clock, CheckCircle, Package, Loader2, Receipt } from \"lucide-react\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function OrdersPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const { isAuthenticated } = useAuthSync();\n\n  // Enhanced security check for authenticated users only\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast(\"Please log in to view your orders.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, setLocation]);\n\n  // Get current user from localStorage\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n    }\n  }, []);\n\n  // Fetch real orders from database\n  const { data: allOrders = [], isLoading, error } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    enabled: true, // Explicitly enable the query\n    refetchOnWindowFocus: false,\n    retry: 3,\n  });\n\n\n\n  // Filter orders to show only current user's orders\n  const userOrders = allOrders.filter((order: Order) => {\n    if (!currentUser) return false;\n    \n    // Primary match: customer ID\n    if (order.customerId === currentUser.id) {\n      return true;\n    }\n    \n    // Secondary match: customer name matches user name from profile\n    if (currentUser.name && order.customerName === currentUser.name) {\n      return true;\n    }\n    \n    // Tertiary match: partial name matching (case insensitive)\n    if (currentUser.name && order.customerName?.toLowerCase().includes(currentUser.name.toLowerCase())) {\n      return true;\n    }\n    \n    return false;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'preparing': return 'bg-blue-100 text-blue-800';\n      case 'ready': return 'bg-green-100 text-green-800';\n      case 'delivered': return 'bg-gray-100 text-gray-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return <Clock className=\"w-4 h-4\" />;\n      case 'preparing': return <Package className=\"w-4 h-4\" />;\n      case 'ready': \n      case 'delivered': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredOrders = userOrders.filter(order => {\n    const matchesSearch = (order.orderNumber || order.id.toString()).toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === \"all\" || order.status?.toLowerCase() === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <div className=\"bg-primary px-4 pt-12 pb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/home\")}\n              className=\"text-white hover:bg-white/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">My Orders</h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </div>\n        <BottomNavigation currentPage=\"orders\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/home\")}\n              className=\"text-white hover:bg-white/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">My Orders</h1>\n              <p className=\"text-white/80 text-sm\">\n                {userOrders.length > 0 ? `${userOrders.length} orders found` : \"No orders yet\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 space-y-4 -mt-3\">\n        {/* Search and Filter */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search by order ID...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                className=\"px-3 py-2 border rounded-md\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"preparing\">Preparing</option>\n                <option value=\"ready\">Ready</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders List */}\n        {filteredOrders.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Receipt className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">\n                {userOrders.length === 0 ? \"No orders yet\" : \"No orders found\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {userOrders.length === 0 \n                  ? \"Start ordering delicious food from our menu!\"\n                  : \"Try adjusting your search or filter criteria\"\n                }\n              </p>\n              <Button onClick={() => setLocation(\"/home\")}>\n                Browse Menu\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {filteredOrders.map((order) => (\n              <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold\">Order #{order.orderNumber || order.id}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(order.createdAt).toLocaleDateString()} at{' '}\n                        {new Date(order.createdAt).toLocaleTimeString()}\n                      </p>\n                    </div>\n                    <Badge className={getStatusColor(order.status || 'pending')}>\n                      <div className=\"flex items-center space-x-1\">\n                        {getStatusIcon(order.status || 'pending')}\n                        <span className=\"capitalize\">{order.status || 'Pending'}</span>\n                      </div>\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-lg font-bold\">₹{order.amount}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Payment: Pending\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setLocation(`/order-status/${order.id}`)}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <BottomNavigation currentPage=\"orders\" />\n    </div>\n  );\n}","size_bytes":9144},"client/src/components/PaymentMethodsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ArrowLeft, CreditCard, Smartphone, Wallet, Plus, Trash2 } from \"lucide-react\";\n\nexport default function PaymentMethodsPage() {\n  const [, setLocation] = useLocation();\n  const [selectedMethod, setSelectedMethod] = useState(\"cash\");\n  const [savedCards, setSavedCards] = useState([\n    {\n      id: 1,\n      type: \"visa\",\n      last4: \"4567\",\n      expiryMonth: \"12\",\n      expiryYear: \"26\",\n      holderName: \"Rahul Kumar\"\n    }\n  ]);\n\n  const paymentMethods = [\n    {\n      id: \"cash\",\n      name: \"Cash on Pickup\",\n      description: \"Pay when you collect your order\",\n      icon: Wallet,\n      enabled: true\n    },\n    {\n      id: \"upi\",\n      name: \"UPI Payment\",\n      description: \"PhonePe, Google Pay, Paytm, etc.\",\n      icon: Smartphone,\n      enabled: true\n    },\n    {\n      id: \"card\",\n      name: \"Credit/Debit Card\",\n      description: \"Visa, Mastercard, RuPay\",\n      icon: CreditCard,\n      enabled: true\n    }\n  ];\n\n  const removeCard = (cardId: number) => {\n    setSavedCards(prev => prev.filter(card => card.id !== cardId));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/profile')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-white\">Payment Methods</h1>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Available Payment Methods */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Available Payment Methods</h3>\n            <div className=\"space-y-3\">\n              {paymentMethods.map((method) => (\n                <div\n                  key={method.id}\n                  className={`flex items-center space-x-4 p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedMethod === method.id \n                      ? \"border-primary bg-primary/5\" \n                      : \"border-border hover:bg-accent/50\"\n                  }`}\n                  onClick={() => setSelectedMethod(method.id)}\n                >\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                    selectedMethod === method.id ? \"bg-primary text-white\" : \"bg-muted\"\n                  }`}>\n                    <method.icon className=\"w-5 h-5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{method.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{method.description}</p>\n                  </div>\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    selectedMethod === method.id \n                      ? \"border-primary bg-primary\" \n                      : \"border-muted-foreground\"\n                  }`}>\n                    {selectedMethod === method.id && (\n                      <div className=\"w-2 h-2 bg-white rounded-full m-0.5\"></div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Saved Cards */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"font-semibold\">Saved Cards</h3>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Card\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Card</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4 pt-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Card Number</label>\n                      <Input placeholder=\"1234 5678 9012 3456\" className=\"mt-1\" />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Expiry Date</label>\n                        <Input placeholder=\"MM/YY\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">CVV</label>\n                        <Input placeholder=\"123\" className=\"mt-1\" />\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Cardholder Name</label>\n                      <Input placeholder=\"John Doe\" className=\"mt-1\" />\n                    </div>\n                    <Button variant=\"food\" className=\"w-full\">\n                      Add Card\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {savedCards.length > 0 ? (\n              <div className=\"space-y-3\">\n                {savedCards.map((card) => (\n                  <div key={card.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <CreditCard className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">**** **** **** {card.last4}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Expires {card.expiryMonth}/{card.expiryYear} • {card.holderName}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeCard(card.id)}\n                      className=\"text-destructive hover:text-destructive\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <CreditCard className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No saved cards</p>\n                <p className=\"text-sm text-muted-foreground\">Add a card for faster checkout</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Digital Wallets */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Digital Wallets</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-blue-500 font-bold text-sm\">GPay</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Google Pay</p>\n                    <p className=\"text-sm text-success\">Connected</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  Disconnect\n                </Button>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-purple-500 font-bold text-sm\">PE</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">PhonePe</p>\n                    <p className=\"text-sm text-muted-foreground\">Not connected</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  Connect\n                </Button>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-cyan-500/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-cyan-500 font-bold text-sm\">Pay</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Paytm</p>\n                    <p className=\"text-sm text-muted-foreground\">Not connected</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  Connect\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Note */}\n        <Card className=\"shadow-card border-warning\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-warning mb-2\">Security Information</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Your payment information is encrypted and stored securely. KIT-Canteen never stores your full card details.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10053},"client/src/components/PrivacyPolicyPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Shield, Eye, Database, Lock } from \"lucide-react\";\n\nexport default function PrivacyPolicyPage() {\n  const [, setLocation] = useLocation();\n\n  const sections = [\n    {\n      icon: Database,\n      title: \"Information We Collect\",\n      content: [\n        \"Personal information you provide when creating an account (name, email, phone number, student ID)\",\n        \"Order history and preferences to improve your experience\",\n        \"Payment information (processed securely through encrypted channels)\",\n        \"Device information and app usage data for analytics and improvements\"\n      ]\n    },\n    {\n      icon: Eye,\n      title: \"How We Use Your Information\",\n      content: [\n        \"Process and fulfill your food orders\",\n        \"Send order updates and notifications\",\n        \"Improve our services and app functionality\",\n        \"Provide customer support and resolve issues\",\n        \"Analyze usage patterns to enhance user experience\"\n      ]\n    },\n    {\n      icon: Shield,\n      title: \"Information Sharing\",\n      content: [\n        \"We DO NOT sell your personal information to third parties\",\n        \"Order details are shared with canteen staff only to fulfill your orders\",\n        \"Anonymous usage data may be used for app improvements\",\n        \"Information may be shared if required by law or to protect our rights\"\n      ]\n    },\n    {\n      icon: Lock,\n      title: \"Data Security\",\n      content: [\n        \"All data is encrypted in transit and at rest\",\n        \"Payment information is processed through secure, PCI-compliant systems\",\n        \"Regular security audits and updates to protect your information\",\n        \"Access to your data is limited to authorized personnel only\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/profile')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-white\">Privacy Policy</h1>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Introduction */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-bold mb-4\">Your Privacy Matters</h2>\n            <p className=\"text-muted-foreground leading-relaxed\">\n              At KIT-Canteen, we are committed to protecting your privacy and personal information. \n              This Privacy Policy explains how we collect, use, and safeguard your data when you use our application.\n            </p>\n            <div className=\"mt-4 p-3 bg-accent/50 rounded-lg\">\n              <p className=\"text-sm font-medium\">Last Updated: January 2024</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Privacy Sections */}\n        {sections.map((section, index) => (\n          <Card key={index} className=\"shadow-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <section.icon className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold\">{section.title}</h3>\n              </div>\n              <ul className=\"space-y-2\">\n                {section.content.map((item, itemIndex) => (\n                  <li key={itemIndex} className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">{item}</p>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* Your Rights */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Your Rights</h3>\n            <div className=\"space-y-4\">\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Access Your Data</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  You can request a copy of all personal data we have about you.\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Correct Information</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Update or correct any inaccurate personal information.\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Delete Your Account</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Request deletion of your account and associated data.\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Data Portability</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Export your data in a machine-readable format.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Contact Us</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              If you have any questions about this Privacy Policy or how we handle your data, please contact us:\n            </p>\n            <div className=\"space-y-2 text-sm\">\n              <p><span className=\"font-medium\">Email:</span> privacy@kit.edu</p>\n              <p><span className=\"font-medium\">Phone:</span> +91 80 1234 5678</p>\n              <p><span className=\"font-medium\">Address:</span> KIT College, Tiptur, Karnataka, India</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Updates */}\n        <Card className=\"shadow-card border-warning\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-warning mb-2\">Policy Updates</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              We may update this Privacy Policy from time to time. We will notify you of any significant changes \n              through the app or via email. Your continued use of the app after such modifications will constitute \n              your acknowledgment of the modified Privacy Policy.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6997},"client/src/components/ProfilePage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { toast } from \"sonner\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, Edit, Clock, Star, LogOut, ChevronRight } from \"lucide-react\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function ProfilePage() {\n  const [, setLocation] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const { isAuthenticated } = useAuthSync();\n\n  // Enhanced security check for authenticated users only\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast.error(\"Please log in to view your profile.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, setLocation]);\n  const [userInfo, setUserInfo] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    studentId: \"\",\n    course: \"\",\n    role: \"\"\n  });\n\n  // Get user data from localStorage\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      const user = JSON.parse(userData);\n      setUserInfo({\n        name: user.name || \"User\",\n        email: user.email || \"\",\n        phone: user.phone || \"\",\n        studentId: user.studentId || \"\",\n        course: user.course || \"\",\n        role: user.role || \"student\"\n      });\n    }\n  }, []);\n\n  // Fetch user's orders to calculate stats\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/orders'],\n    enabled: !!userInfo.email, // Only fetch when we have user email\n  });\n\n  // Calculate user statistics from orders - filter by current user\n  const userOrders = (orders as any[]).filter((order: any) => {\n    const currentUserId = userInfo.email ? JSON.parse(localStorage.getItem('user') || '{}').id : null;\n    return order.customerId === currentUserId || \n           order.customerName === userInfo.name ||\n           order.customerName?.toLowerCase().includes(userInfo.name?.toLowerCase() || '');\n  });\n\n  const stats = {\n    totalOrders: userOrders.length,\n    totalSpent: userOrders.reduce((total: number, order: any) => total + (order.amount || 0), 0),\n    favoriteItem: \"None\", // Could be calculated from order items\n    avgRating: 0\n  };\n\n  // Use userOrders as orderHistory for displaying recent orders\n  const orderHistory = userOrders.slice(0, 3).map((order: any) => ({\n    id: order.orderNumber || order.id,\n    date: new Date(order.createdAt || Date.now()).toLocaleDateString(),\n    total: order.amount || 0,\n    status: order.status || 'completed'\n  }));\n\n  const handleSave = () => {\n    setIsEditing(false);\n    // In real app, this would save to backend\n  };\n\n  const handleLogout = () => {\n    // Clear user data from localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('isAuthenticated');\n    \n    // Clear React Query cache\n    queryClient.clear();\n    \n    // Redirect to login\n    setLocation(\"/login\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-white\">Profile</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"text-white\"\n            onClick={() => setIsEditing(!isEditing)}\n          >\n            <Edit className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Profile Header */}\n        <div className=\"flex items-center space-x-4 mt-6\">\n          <Avatar className=\"w-20 h-20\">\n            <AvatarFallback className=\"bg-white text-primary text-2xl font-bold\">\n              {userInfo.name ? userInfo.name.split(' ').map(n => n[0]).join('') : 'U'}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"text-white\">\n            <h2 className=\"text-xl font-bold\">{userInfo.name || \"User\"}</h2>\n            <p className=\"text-white/80 capitalize\">{userInfo.role ? userInfo.role.replace('_', ' ') : 'Student'}</p>\n            <p className=\"text-white/80 text-sm\">{userInfo.email}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* User Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"shadow-card\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-primary\">{stats.totalOrders}</p>\n              <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n            </CardContent>\n          </Card>\n          <Card className=\"shadow-card\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-primary\">₹{stats.totalSpent}</p>\n              <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Personal Information */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Personal Information</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm text-muted-foreground\">Name</label>\n                {isEditing ? (\n                  <Input\n                    value={userInfo.name}\n                    onChange={(e) => setUserInfo({...userInfo, name: e.target.value})}\n                    className=\"mt-1\"\n                  />\n                ) : (\n                  <p className=\"font-medium\">{userInfo.name}</p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"text-sm text-muted-foreground\">Email</label>\n                {isEditing ? (\n                  <Input\n                    value={userInfo.email}\n                    onChange={(e) => setUserInfo({...userInfo, email: e.target.value})}\n                    className=\"mt-1\"\n                  />\n                ) : (\n                  <p className=\"font-medium\">{userInfo.email}</p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"text-sm text-muted-foreground\">Phone</label>\n                {isEditing ? (\n                  <Input\n                    value={userInfo.phone}\n                    onChange={(e) => setUserInfo({...userInfo, phone: e.target.value})}\n                    className=\"mt-1\"\n                  />\n                ) : (\n                  <p className=\"font-medium\">{userInfo.phone}</p>\n                )}\n              </div>\n\n              {isEditing && (\n                <div className=\"flex space-x-3 pt-2\">\n                  <Button variant=\"food\" onClick={handleSave} className=\"flex-1\">\n                    Save Changes\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setIsEditing(false)} className=\"flex-1\">\n                    Cancel\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Favorites */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Your Favorites</h3>\n            <div className=\"flex items-center justify-between p-3 bg-accent/50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                <div>\n                  <p className=\"font-medium\">{stats.favoriteItem}</p>\n                  <p className=\"text-sm text-muted-foreground\">Most ordered item</p>\n                </div>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order History */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"font-semibold\">Recent Orders</h3>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\">\n                View All\n              </Button>\n            </div>\n            <div className=\"space-y-3\">\n              {orderHistory.slice(0, 3).map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Clock className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Order #{order.id}</p>\n                      <p className=\"text-sm text-muted-foreground\">{order.date}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">₹{order.total}</p>\n                    <p className=\"text-sm text-success\">{order.status}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Settings */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Settings</h3>\n            <div className=\"space-y-3\">\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/favorites\")}\n              >\n                <span>My Favorites</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/notifications\")}\n              >\n                <span>Notifications</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/help-support\")}\n              >\n                <span>Help & Support</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/feedback\")}\n              >\n                <span>Feedback</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/about\")}\n              >\n                <span>About</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/privacy-policy\")}\n              >\n                <span>Privacy Policy</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n              <button \n                className=\"w-full flex items-center justify-between p-3 text-left hover:bg-accent/50 rounded-lg transition-colors\"\n                onClick={() => setLocation(\"/terms-conditions\")}\n              >\n                <span>Terms of Service</span>\n                <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logout */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-4\">\n            <Button\n              variant=\"destructive\"\n              className=\"w-full\"\n              onClick={handleLogout}\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation currentPage=\"profile\" />\n    </div>\n  );\n}","size_bytes":12956},"client/src/components/RateReviewPage.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft, Star, Camera, Send } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst RateReviewPage = () => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Get orderId from URL search params\n  const urlParams = new URLSearchParams(window.location.search);\n  const orderId = urlParams.get('orderId');\n\n  // Mock order data\n  const orderData = {\n    id: orderId || 'ORD001',\n    items: [\n      {\n        id: 1,\n        name: 'Grilled Chicken Burger',\n        image: '/placeholder.svg'\n      },\n      {\n        id: 2,\n        name: 'Crispy French Fries',\n        image: '/placeholder.svg'\n      },\n      {\n        id: 3,\n        name: 'Chocolate Milkshake',\n        image: '/placeholder.svg'\n      }\n    ]\n  };\n\n  const [reviews, setReviews] = useState(\n    orderData.items.map(item => ({\n      itemId: item.id,\n      rating: 0,\n      comment: '',\n      photos: []\n    }))\n  );\n  \n  const [overallRating, setOverallRating] = useState(0);\n  const [overallComment, setOverallComment] = useState('');\n\n  const updateItemRating = (itemId: number, rating: number) => {\n    setReviews(reviews.map(review =>\n      review.itemId === itemId ? { ...review, rating } : review\n    ));\n  };\n\n  const updateItemComment = (itemId: number, comment: string) => {\n    setReviews(reviews.map(review =>\n      review.itemId === itemId ? { ...review, comment } : review\n    ));\n  };\n\n  const renderStars = (rating: number, onStarClick: (star: number) => void, size = \"h-6 w-6\") => {\n    return (\n      <div className=\"flex gap-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <button\n            key={star}\n            onClick={() => onStarClick(star)}\n            className=\"transition-colors\"\n          >\n            <Star\n              className={`${size} ${\n                star <= rating\n                  ? 'fill-yellow-400 text-yellow-400'\n                  : 'text-gray-300'\n              }`}\n            />\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const handleSubmit = () => {\n    const hasAllRatings = reviews.every(review => review.rating > 0) && overallRating > 0;\n    \n    if (!hasAllRatings) {\n      toast({\n        title: \"Please rate all items\",\n        description: \"Please provide ratings for all items and overall experience.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    toast({\n      title: \"Thank you for your review!\",\n      description: \"Your feedback helps us improve our service.\",\n    });\n    \n    setLocation('/orders');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-50 bg-background border-b px-4 py-3\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/orders')}\n            className=\"shrink-0\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold\">Rate & Review</h1>\n            <p className=\"text-sm text-muted-foreground\">Order #{orderData.id}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-6\">\n        {/* Overall Rating */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-3\">Overall Experience</h2>\n            <div className=\"text-center space-y-3\">\n              {renderStars(overallRating, setOverallRating, \"h-8 w-8\")}\n              <p className=\"text-sm text-muted-foreground\">\n                {overallRating === 0 && \"Tap to rate\"}\n                {overallRating === 1 && \"Poor\"}\n                {overallRating === 2 && \"Fair\"}\n                {overallRating === 3 && \"Good\"}\n                {overallRating === 4 && \"Very Good\"}\n                {overallRating === 5 && \"Excellent\"}\n              </p>\n            </div>\n            <Textarea\n              placeholder=\"Share your overall experience...\"\n              value={overallComment}\n              onChange={(e) => setOverallComment(e.target.value)}\n              className=\"mt-3\"\n              rows={3}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Individual Items */}\n        <div className=\"space-y-4\">\n          <h2 className=\"font-semibold\">Rate Individual Items</h2>\n          \n          {orderData.items.map((item) => {\n            const review = reviews.find(r => r.itemId === item.id);\n            \n            return (\n              <Card key={item.id}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex gap-3 mb-3\">\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className=\"w-12 h-12 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\">{item.name}</h3>\n                      <div className=\"mt-1\">\n                        {renderStars(\n                          review?.rating || 0,\n                          (rating) => updateItemRating(item.id, rating)\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Textarea\n                    placeholder={`What did you think of the ${item.name}?`}\n                    value={review?.comment || ''}\n                    onChange={(e) => updateItemComment(item.id, e.target.value)}\n                    rows={2}\n                    className=\"mb-3\"\n                  />\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full\"\n                    onClick={() => {\n                      toast({\n                        title: \"Photo upload\",\n                        description: \"Photo upload feature coming soon!\",\n                      });\n                    }}\n                  >\n                    <Camera className=\"h-4 w-4 mr-2\" />\n                    Add Photos (Optional)\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Tips Section */}\n        <Card className=\"bg-accent/50\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Help others decide</h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Share what you liked or didn't like</li>\n              <li>• Mention food quality, taste, and portion size</li>\n              <li>• Add photos to show how your food looked</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bottom Action */}\n      <div className=\"sticky bottom-0 bg-background border-t p-4\">\n        <Button\n          onClick={handleSubmit}\n          className=\"w-full\"\n          variant=\"food\"\n          size=\"mobile\"\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          Submit Review\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default RateReviewPage;","size_bytes":7392},"client/src/components/ReorderPage.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation, useSearch } from 'wouter';\nimport { ArrowLeft, Plus, Minus, ShoppingCart } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst ReorderPage = () => {\n  const [, setLocation] = useLocation();\n  const searchParams = new URLSearchParams(useSearch());\n  const orderId = searchParams.get('orderId');\n  const { toast } = useToast();\n\n  // Mock order data\n  const orderData = {\n    id: orderId || 'ORD001',\n    items: [\n      {\n        id: 1,\n        name: 'Grilled Chicken Burger',\n        price: 12.99,\n        image: '/placeholder.svg',\n        quantity: 1,\n        customizations: ['No onions', 'Extra cheese']\n      },\n      {\n        id: 2,\n        name: 'Crispy French Fries',\n        price: 4.99,\n        image: '/placeholder.svg',\n        quantity: 2,\n        customizations: []\n      },\n      {\n        id: 3,\n        name: 'Chocolate Milkshake',\n        price: 5.99,\n        image: '/placeholder.svg',\n        quantity: 1,\n        customizations: ['Extra chocolate']\n      }\n    ]\n  };\n\n  const [items, setItems] = useState(orderData.items.map(item => ({\n    ...item,\n    reorderQuantity: item.quantity\n  })));\n\n  const updateQuantity = (itemId: number, change: number) => {\n    setItems(items.map(item => \n      item.id === itemId \n        ? { ...item, reorderQuantity: Math.max(0, item.reorderQuantity + change) }\n        : item\n    ));\n  };\n\n  const getTotalPrice = () => {\n    return items.reduce((total, item) => total + (item.price * item.reorderQuantity), 0);\n  };\n\n  const getSelectedItemsCount = () => {\n    return items.reduce((count, item) => count + item.reorderQuantity, 0);\n  };\n\n  const handleReorder = () => {\n    const selectedItems = items.filter(item => item.reorderQuantity > 0);\n    if (selectedItems.length === 0) {\n      toast({\n        title: \"No items selected\",\n        description: \"Please select at least one item to reorder.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    toast({\n      title: \"Added to cart!\",\n      description: `${getSelectedItemsCount()} items added to your cart.`,\n    });\n    \n    // Navigate to cart or home\n    setLocation('/cart');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-50 bg-background border-b px-4 py-3\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => window.history.back()}\n            className=\"shrink-0\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold\">Reorder</h1>\n            <p className=\"text-sm text-muted-foreground\">Order #{orderData.id}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-4\">\n        <div className=\"text-center py-2\">\n          <p className=\"text-muted-foreground\">\n            Adjust quantities and tap \"Add to Cart\" to reorder\n          </p>\n        </div>\n\n        {/* Items List */}\n        <div className=\"space-y-3\">\n          {items.map((item) => (\n            <Card key={item.id} className=\"overflow-hidden\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex gap-3\">\n                  <img\n                    src={item.image}\n                    alt={item.name}\n                    className=\"w-16 h-16 rounded-lg object-cover\"\n                  />\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-medium text-sm leading-tight\">{item.name}</h3>\n                    <p className=\"text-primary font-semibold mt-1\">${item.price}</p>\n                    \n                    {item.customizations.length > 0 && (\n                      <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {item.customizations.map((custom, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {custom}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"flex items-center gap-2 bg-accent rounded-lg p-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => updateQuantity(item.id, -1)}\n                        disabled={item.reorderQuantity === 0}\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      <span className=\"w-8 text-center font-medium\">\n                        {item.reorderQuantity}\n                      </span>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => updateQuantity(item.id, 1)}\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      Originally: {item.quantity}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Bottom Action */}\n      <div className=\"sticky bottom-0 bg-background border-t p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div>\n            <p className=\"font-semibold\">Total: ${getTotalPrice().toFixed(2)}</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {getSelectedItemsCount()} items selected\n            </p>\n          </div>\n        </div>\n        \n        <Button \n          onClick={handleReorder}\n          className=\"w-full\"\n          variant=\"food\"\n          size=\"mobile\"\n        >\n          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n          Add to Cart\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReorderPage;","size_bytes":6537},"client/src/components/RetryPaymentPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, AlertCircle, RefreshCw, ShoppingCart } from \"lucide-react\";\n\nexport default function RetryPaymentPage() {\n  const [, setLocation] = useLocation();\n\n  const handleRetryPayment = () => {\n    setLocation('/checkout');\n  };\n\n  const handleReturnToCart = () => {\n    setLocation('/cart');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/cart')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold\">Payment Failed</h1>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Failed Payment Card */}\n        <Card className=\"shadow-card border-destructive\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"mb-4\">\n              <AlertCircle className=\"w-16 h-16 text-destructive mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-destructive mb-2\">\n                Payment Session Expired\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Payment session expired or failed. Please try again to complete your order.\n              </p>\n            </div>\n\n            <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4 mb-6\">\n              <h4 className=\"font-medium text-destructive-foreground mb-2\">What happened?</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1 text-left\">\n                <li>• Payment session timed out after 7 minutes</li>\n                <li>• Payment was cancelled or interrupted</li>\n                <li>• Network connection issues during payment</li>\n              </ul>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"food\"\n                size=\"mobile\"\n                className=\"w-full\"\n                onClick={handleRetryPayment}\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Retry Payment\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"mobile\"\n                className=\"w-full\"\n                onClick={handleReturnToCart}\n              >\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                Return to Cart\n              </Button>\n            </div>\n\n            <p className=\"text-xs text-muted-foreground mt-4\">\n              Your cart items are still saved. You can modify your order or try payment again.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Tips Card */}\n        <Card className=\"shadow-card mt-6\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3\">💡 Tips for Successful Payment</h3>\n            <ul className=\"text-sm text-muted-foreground space-y-2\">\n              <li>• Ensure stable internet connection</li>\n              <li>• Complete payment within 7 minutes</li>\n              <li>• Don't close the payment window</li>\n              <li>• Have your UPI app ready</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3493},"client/src/components/SearchPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Search, Star } from \"lucide-react\";\n\nexport default function SearchPage() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const allItems = [\n    { id: 1, name: \"Veg Thali\", price: 85, rating: 4.5, category: \"Main Course\", isVeg: true },\n    { id: 2, name: \"Masala Dosa\", price: 60, rating: 4.3, category: \"South Indian\", isVeg: true },\n    { id: 3, name: \"Chole Bhature\", price: 70, rating: 4.6, category: \"North Indian\", isVeg: true },\n    { id: 4, name: \"Samosa\", price: 20, rating: 4.2, category: \"Snacks\", isVeg: true },\n    { id: 5, name: \"Masala Tea\", price: 15, rating: 4.5, category: \"Beverages\", isVeg: true },\n    { id: 6, name: \"Sandwich\", price: 40, rating: 4.0, category: \"Snacks\", isVeg: true },\n    { id: 7, name: \"Coffee\", price: 20, rating: 4.2, category: \"Beverages\", isVeg: true },\n    { id: 8, name: \"Pakora\", price: 30, rating: 4.4, category: \"Snacks\", isVeg: true }\n  ];\n\n  const filteredItems = allItems.filter(item =>\n    item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const popularSearches = [\"Thali\", \"Dosa\", \"Tea\", \"Snacks\", \"South Indian\"];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-primary-foreground px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/home')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              className=\"w-full pl-10 bg-white text-foreground\"\n              placeholder=\"Search for food items...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              autoFocus\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Popular Searches */}\n        {!searchQuery && (\n          <div>\n            <h3 className=\"font-semibold mb-3\">Popular Searches</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {popularSearches.map((term) => (\n                <Badge\n                  key={term}\n                  variant=\"secondary\"\n                  className=\"cursor-pointer\"\n                  onClick={() => setSearchQuery(term)}\n                >\n                  {term}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Search Results */}\n        {searchQuery && (\n          <div>\n            <h3 className=\"font-semibold mb-3\">\n              {filteredItems.length} results for \"{searchQuery}\"\n            </h3>\n            <div className=\"space-y-3\">\n              {filteredItems.map((item) => (\n                <Card\n                  key={item.id}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setLocation(`/dish/${item.id}`)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className=\"font-medium\">{item.name}</h4>\n                          {item.isVeg && (\n                            <div className=\"w-4 h-4 border-2 border-green-500 flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            </div>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{item.category}</p>\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm\">{item.rating}</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-lg\">₹{item.price}</p>\n                        <Button size=\"sm\" className=\"mt-2\">\n                          Add\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* No Results */}\n        {searchQuery && filteredItems.length === 0 && (\n          <div className=\"text-center py-8\">\n            <Search className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No items found</h3>\n            <p className=\"text-muted-foreground\">\n              Try searching for something else or browse our menu\n            </p>\n            <Button className=\"mt-4\" onClick={() => setLocation(\"/home\")}>\n              Browse Menu\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5554},"client/src/components/SplashScreen.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function SplashScreen() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLocation(\"/login\");\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-primary flex flex-col items-center justify-center relative overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary-light/20 to-primary-dark/20\"></div>\n      <div className=\"absolute top-20 left-10 w-32 h-32 bg-white/10 rounded-full animate-pulse\"></div>\n      <div className=\"absolute bottom-40 right-8 w-24 h-24 bg-white/5 rounded-full animate-pulse delay-1000\"></div>\n      \n      {/* Main content */}\n      <div className=\"relative z-10 flex flex-col items-center animate-fade-in\">\n        {/* KIT Logo placeholder */}\n        <div className=\"w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mb-8 shadow-lg\">\n          <span className=\"text-white text-3xl font-bold\">KIT</span>\n        </div>\n        \n        {/* App Title */}\n        <h1 className=\"text-4xl font-bold text-white mb-4 tracking-wide\">\n          KIT-Canteen\n        </h1>\n        \n        {/* Subtitle */}\n        <p className=\"text-white/80 text-lg font-medium\">\n          Powered by KIT College\n        </p>\n        \n        {/* Loading indicator */}\n        <div className=\"mt-12 flex space-x-2\">\n          <div className=\"w-2 h-2 bg-white/60 rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-white/60 rounded-full animate-bounce delay-100\"></div>\n          <div className=\"w-2 h-2 bg-white/60 rounded-full animate-bounce delay-200\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1839},"client/src/components/TermsConditionsPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, FileText, Users, CreditCard, AlertTriangle } from \"lucide-react\";\n\nexport default function TermsConditionsPage() {\n  const [, setLocation] = useLocation();\n\n  const sections = [\n    {\n      icon: Users,\n      title: \"User Accounts\",\n      content: [\n        \"You must be a current student, faculty, or staff member of KIT College to use this service\",\n        \"You are responsible for maintaining the confidentiality of your account credentials\",\n        \"You must provide accurate and up-to-date information when creating your account\",\n        \"One account per person - sharing accounts is prohibited\",\n        \"KIT-Canteen reserves the right to suspend or terminate accounts that violate these terms\"\n      ]\n    },\n    {\n      icon: CreditCard,\n      title: \"Orders and Payments\",\n      content: [\n        \"All orders are subject to availability and canteen operating hours\",\n        \"Payment must be completed before order processing begins\",\n        \"Order modifications or cancellations must be made within 5 minutes of placement\",\n        \"Refunds will be processed within 3-5 business days for eligible cancellations\",\n        \"KIT-Canteen is not responsible for delays due to high demand or unforeseen circumstances\"\n      ]\n    },\n    {\n      icon: FileText,\n      title: \"Service Usage\",\n      content: [\n        \"The app is for personal, non-commercial use only\",\n        \"You may not use the service to place fraudulent or fake orders\",\n        \"Bulk ordering for events requires prior approval from canteen management\",\n        \"Screenshots or recordings of other users' information is strictly prohibited\",\n        \"Any attempt to manipulate the app or exploit vulnerabilities will result in account termination\"\n      ]\n    },\n    {\n      icon: AlertTriangle,\n      title: \"Limitations and Liability\",\n      content: [\n        \"KIT-Canteen provides the service 'as is' without warranties of any kind\",\n        \"We are not liable for any damages arising from service interruptions or errors\",\n        \"Food allergies and dietary restrictions are the user's responsibility to communicate\",\n        \"Maximum liability is limited to the amount paid for the specific order in question\",\n        \"Service availability may be affected by technical issues, holidays, or college events\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" onClick={() => setLocation('/profile')}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-white\">Terms & Conditions</h1>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Introduction */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-bold mb-4\">Terms of Service</h2>\n            <p className=\"text-muted-foreground leading-relaxed mb-4\">\n              Welcome to KIT-Canteen! By using our mobile application and services, you agree to be bound by these Terms and Conditions. \n              Please read them carefully before using our service.\n            </p>\n            <div className=\"p-3 bg-accent/50 rounded-lg\">\n              <p className=\"text-sm font-medium\">Effective Date: January 2024</p>\n              <p className=\"text-sm text-muted-foreground\">Last Updated: January 15, 2024</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Terms Sections */}\n        {sections.map((section, index) => (\n          <Card key={index} className=\"shadow-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <section.icon className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold\">{section.title}</h3>\n              </div>\n              <ul className=\"space-y-2\">\n                {section.content.map((item, itemIndex) => (\n                  <li key={itemIndex} className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">{item}</p>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* Canteen Policies */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Canteen Specific Policies</h3>\n            <div className=\"space-y-4\">\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Operating Hours</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Monday to Saturday: 7:00 AM - 8:00 PM<br />\n                  Sunday: 8:00 AM - 6:00 PM<br />\n                  Closed on public holidays and college breaks\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Order Pickup</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Orders must be collected within 30 minutes of notification. Uncollected orders will be disposed of without refund.\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Food Safety</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  All food is prepared following FSSAI guidelines. Report any food safety concerns immediately to canteen staff.\n                </p>\n              </div>\n              <div className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium mb-1\">Special Dietary Requirements</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Please inform us about allergies or dietary restrictions when placing orders. We cannot guarantee complete allergen-free preparation.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Intellectual Property */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Intellectual Property</h3>\n            <p className=\"text-muted-foreground text-sm leading-relaxed mb-3\">\n              The KIT-Canteen app, including its design, functionality, and content, is owned by KIT College. \n              You may not copy, modify, distribute, or reverse engineer any part of the application.\n            </p>\n            <p className=\"text-muted-foreground text-sm leading-relaxed\">\n              All trademarks, logos, and brand names are the property of their respective owners.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Modifications */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Modifications to Terms</h3>\n            <p className=\"text-muted-foreground text-sm leading-relaxed mb-3\">\n              KIT-Canteen reserves the right to modify these terms at any time. We will notify users of significant changes \n              through the app or email notifications.\n            </p>\n            <p className=\"text-muted-foreground text-sm leading-relaxed\">\n              Continued use of the service after modifications constitutes acceptance of the updated terms.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Contact Information</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              For questions about these Terms and Conditions, please contact us:\n            </p>\n            <div className=\"space-y-2 text-sm\">\n              <p><span className=\"font-medium\">Email:</span> support@kit.edu</p>\n              <p><span className=\"font-medium\">Phone:</span> +91 80 1234 5678</p>\n              <p><span className=\"font-medium\">Office:</span> Administration Building, KIT College</p>\n              <p><span className=\"font-medium\">Hours:</span> Monday to Friday, 9:00 AM - 5:00 PM</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Acceptance */}\n        <Card className=\"shadow-card border-success\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-success mb-2\">Acceptance of Terms</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              By using the KIT-Canteen application, you acknowledge that you have read, understood, and agree to be bound by these Terms and Conditions. \n              If you do not agree with any part of these terms, please discontinue use of the service.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9472},"client/src/components/ViewAllQuickPicksPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { ArrowLeft, Search, Star, Clock, Plus, Loader2, ChefHat, Filter } from \"lucide-react\";\nimport BottomNavigation from \"./BottomNavigation\";\nimport type { MenuItem, Category } from \"@shared/schema\";\n\nexport default function ViewAllQuickPicksPage() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { addToCart, getCartQuantity } = useCart();\n\n  // Fetch real data from database\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch categories: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  const { data: menuItems = [], isLoading: menuItemsLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    queryFn: async () => {\n      const response = await fetch('/api/menu');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch menu items: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  const isLoading = categoriesLoading || menuItemsLoading;\n\n  // Transform menu items to quick picks format\n  const quickPickItems = menuItems\n    .filter(item => item.available)\n    .map(item => ({\n      id: item.id.toString(),\n      name: item.name,\n      price: item.price,\n      category: categories.find(cat => cat.id === item.categoryId)?.name || \"General\"\n    }));\n\n  const filteredItems = quickPickItems.filter(item =>\n    item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddToCart = (item: typeof quickPickItems[0]) => {\n    addToCart({\n      id: parseInt(item.id),\n      name: item.name,\n      price: item.price\n    });\n  };\n\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <div className=\"bg-primary px-4 pt-12 pb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={() => setLocation(\"/home\")}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">Quick Picks</h1>\n                <p className=\"text-white/80 text-sm\">Fast & delicious options</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </div>\n        <BottomNavigation currentPage=\"home\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <div className=\"bg-primary px-4 pt-12 pb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/home\")}\n              className=\"text-white hover:bg-white/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">Quick Picks</h1>\n              <p className=\"text-white/80 text-sm\">Fast & delicious options</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n            <Filter className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Search bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search for food...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/60\"\n          />\n        </div>\n      </div>\n\n      <div className=\"px-4 space-y-4 -mt-3\">\n        {/* Results header */}\n        <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredItems.length} items available\n            </p>\n            <Button \n              size=\"sm\" \n              onClick={() => setLocation(\"/cart\")}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              View Cart\n            </Button>\n          </div>\n        </div>\n\n        {/* Menu items */}\n        {filteredItems.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ChefHat className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {menuItems.length === 0 ? \"No Menu Items Available\" : \"No items found\"}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {menuItems.length === 0 \n                ? \"Check back later for delicious food options!\" \n                : \"Try searching for something else\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid gap-4\">\n            {filteredItems.map((item) => (\n              <Card key={item.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-orange-400 to-red-500 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                      <span className=\"text-white text-lg\">🍽️</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h3 className=\"font-semibold\">{item.name}</h3>\n                        <p className=\"text-lg font-bold\">₹{item.price}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                        <span className=\"bg-muted px-2 py-1 rounded text-xs\">\n                          {item.category}\n                        </span>\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          Available now\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Available now\n                        </span>\n                        <div className=\"flex items-center space-x-2\">\n                          {getCartQuantity(parseInt(item.id)) > 0 && (\n                            <span className=\"text-sm font-medium\">\n                              {getCartQuantity(parseInt(item.id))} in cart\n                            </span>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleAddToCart(item)}\n                            className=\"bg-primary hover:bg-primary/90\"\n                          >\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                            {getCartQuantity(parseInt(item.id)) > 0 \n                              ? `ADD (${getCartQuantity(parseInt(item.id))})` \n                              : 'ADD'\n                            }\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}","size_bytes":8573},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    \n    // Set initial value\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    \n    mql.addEventListener(\"change\", onChange)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return isMobile\n}\n","size_bytes":582},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Load user from localStorage on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        // Error parsing stored user data - clear invalid data\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const updateUser = (updates: Partial<User>) => {\n    if (user) {\n      const updatedUser = { ...user, ...updates };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n\n  const isAdmin = () => {\n    return user?.role === 'admin' || user?.role === 'super_admin';\n  };\n\n  const isSuperAdmin = () => {\n    return user?.role === 'super_admin';\n  };\n\n  const isCanteenOwner = () => {\n    return user?.role === 'canteen_owner';\n  };\n\n  const hasRole = (role: string) => {\n    return user?.role === role;\n  };\n\n  return {\n    user,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n    isAdmin,\n    isSuperAdmin,\n    isCanteenOwner,\n    hasRole,\n    isAuthenticated: !!user\n  };\n}","size_bytes":1580},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, getRedirectResult, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\n// Validate required Firebase environment variables\nconst requiredEnvVars = [\n  'VITE_FIREBASE_API_KEY',\n  'VITE_FIREBASE_PROJECT_ID', \n  'VITE_FIREBASE_APP_ID'\n];\n\nfor (const envVar of requiredEnvVars) {\n  if (!import.meta.env[envVar]) {\n    console.error(`Missing required Firebase environment variable: ${envVar}`);\n  }\n}\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: \"791289037177\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  measurementId: \"G-8H76MCENZT\"\n};\n\n// Firebase configuration is loaded from environment variables\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\n\n// Sign in with Google popup (better for development)\nexport const signInWithGoogle = () => {\n  try {\n    return signInWithPopup(auth, googleProvider);\n  } catch (error) {\n    // Error during Google sign-in\n    throw error;\n  }\n};\n\n// Alternative redirect method\nexport const signInWithGoogleRedirect = () => {\n  try {\n    return signInWithRedirect(auth, googleProvider);\n  } catch (error) {\n    // Error during Google sign-in redirect\n    throw error;\n  }\n};\n\n// Handle redirect result\nexport const handleGoogleRedirect = () => {\n  return getRedirectResult(auth)\n    .then((result: any) => {\n      if (result) {\n        // This gives you a Google Access Token. You can use it to access Google APIs.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential?.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        return { user, token };\n      }\n      return null;\n    })\n    .catch((error: any) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData?.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      throw { errorCode, errorMessage, email, credential };\n    });\n};\n\nexport { auth };","size_bytes":2527},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\n// Configure the default query client for real-time synchronization\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes - balanced performance\n      gcTime: 1000 * 60 * 10, // 10 minutes\n      retry: 1,\n      refetchOnWindowFocus: true, // Refetch when switching between dashboards\n      refetchOnMount: true, // Always refetch on component mount\n      refetchInterval: false, // Disable automatic refetch for better performance\n      queryFn: async ({ queryKey }) => {\n        const [url] = queryKey as [string];\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        return response.json();\n      },\n    },\n    mutations: {\n      retry: 1,\n    },\n  },\n});\n\n// Default fetcher function for API requests\nconst apiRequest = async (url: string, options?: RequestInit): Promise<any> => {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n};\n\n// Enhanced mutation helper with automatic cache invalidation\nexport const createMutationWithSync = (\n  url: string, \n  method: 'POST' | 'PUT' | 'DELETE' = 'POST',\n  invalidateKeys: string[] = []\n) => {\n  return {\n    mutationFn: async (data?: any) => {\n      const options: RequestInit = {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n      };\n      \n      if (data && method !== 'DELETE') {\n        options.body = JSON.stringify(data);\n      }\n      \n      return apiRequest(url, options);\n    },\n    onSuccess: () => {\n      // Invalidate only relevant queries to avoid unnecessary refetches\n      if (invalidateKeys.length > 0) {\n        invalidateKeys.forEach(key => {\n          queryClient.invalidateQueries({ queryKey: [key] });\n        });\n      } else {\n        // Only invalidate the specific endpoint that was modified\n        const baseUrl = url.split('/').slice(0, -1).join('/');\n        queryClient.invalidateQueries({ queryKey: [baseUrl] });\n      }\n    }\n  };\n};\n\nexport { apiRequest };","size_bytes":2335},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Index.tsx":{"content":"const Index = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">KIT Canteen</h1>\n        <p className=\"text-xl text-muted-foreground\">Welcome to the canteen ordering system</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":367},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst NotFound = () => {\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    // 404 Error: User attempted to access non-existent route\n    // Location tracking for analytics purposes\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4 text-foreground\">404</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">Oops! Page not found</p>\n        <Button \n          onClick={() => setLocation(\"/\")}\n          variant=\"default\"\n        >\n          Return to Home\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":831},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        // Food app specific variants\n        food: \"gradient-primary text-primary-foreground hover:opacity-90 shadow-button font-semibold\",\n        cart: \"bg-success text-success-foreground hover:bg-success/90 font-semibold\",\n        offer: \"bg-warning text-warning-foreground hover:bg-warning/90 font-medium\",\n        minimal: \"bg-accent text-accent-foreground hover:bg-accent/80 border border-border\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n        // Food app specific sizes\n        hero: \"h-12 px-6 text-base\",\n        mobile: \"h-11 px-4 text-base rounded-lg\"\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2426},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10467},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayName = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-[100] max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5635},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"client/src/components/user-management/AddLoyaltyPointsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowLeft, Gift, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AddLoyaltyPointsPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [pointsData, setPointsData] = useState({\n    userGroup: \"all\",\n    points: \"\",\n    reason: \"\",\n    expiryDays: \"365\"\n  });\n\n  const userGroups = [\n    { value: \"all\", label: \"All Users\" },\n    { value: \"students\", label: \"Students Only\" },\n    { value: \"faculty\", label: \"Faculty Only\" },\n    { value: \"staff\", label: \"Staff Only\" },\n    { value: \"top-spenders\", label: \"Top Spenders\" },\n    { value: \"frequent-users\", label: \"Frequent Users\" }\n  ];\n\n  const handleAddPoints = () => {\n    toast({\n      title: \"Loyalty Points Added\",\n      description: `${pointsData.points} points added to ${userGroups.find(g => g.value === pointsData.userGroup)?.label}`,\n    });\n    setLocation(\"/admin/user-management\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Add Loyalty Points</h1>\n              <p className=\"text-sm text-muted-foreground\">Reward users with loyalty points</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Gift className=\"w-5 h-5\" />\n                <span>Points Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"userGroup\">Select User Group</Label>\n                <Select value={pointsData.userGroup} onValueChange={(value) => setPointsData(prev => ({ ...prev, userGroup: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose user group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {userGroups.map((group) => (\n                      <SelectItem key={group.value} value={group.value}>\n                        {group.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"points\">Points to Add</Label>\n                <Input\n                  id=\"points\"\n                  type=\"number\"\n                  placeholder=\"Enter points amount\"\n                  value={pointsData.points}\n                  onChange={(e) => setPointsData(prev => ({ ...prev, points: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"reason\">Reason for Points</Label>\n                <Textarea\n                  id=\"reason\"\n                  placeholder=\"Enter reason for awarding points...\"\n                  value={pointsData.reason}\n                  onChange={(e) => setPointsData(prev => ({ ...prev, reason: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"expiryDays\">Points Expiry (Days)</Label>\n                <Select value={pointsData.expiryDays} onValueChange={(value) => setPointsData(prev => ({ ...prev, expiryDays: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select expiry period\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">30 Days</SelectItem>\n                    <SelectItem value=\"90\">90 Days</SelectItem>\n                    <SelectItem value=\"180\">6 Months</SelectItem>\n                    <SelectItem value=\"365\">1 Year</SelectItem>\n                    <SelectItem value=\"never\">Never Expire</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Points Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Target Group:</span>\n                  <div className=\"font-medium\">{userGroups.find(g => g.value === pointsData.userGroup)?.label}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Points Per User:</span>\n                  <div className=\"font-medium\">{pointsData.points || \"0\"}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Expiry:</span>\n                  <div className=\"font-medium\">\n                    {pointsData.expiryDays === \"never\" ? \"Never\" : `${pointsData.expiryDays} days`}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Estimated Users:</span>\n                  <div className=\"font-medium\">~150 users</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"default\" \n              onClick={handleAddPoints}\n              disabled={!pointsData.points || !pointsData.reason}\n              className=\"flex items-center space-x-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Add Points</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6638},"client/src/components/user-management/ApplyDiscountPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ArrowLeft, Percent, Tag } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ApplyDiscountPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [discountData, setDiscountData] = useState({\n    userGroup: \"all\",\n    discountType: \"percentage\",\n    discountValue: \"\",\n    validDays: \"30\",\n    minOrderAmount: \"\",\n    maxDiscountAmount: \"\",\n    description: \"\",\n    isActive: true\n  });\n\n  const userGroups = [\n    { value: \"all\", label: \"All Users\" },\n    { value: \"students\", label: \"Students Only\" },\n    { value: \"faculty\", label: \"Faculty Only\" },\n    { value: \"staff\", label: \"Staff Only\" },\n    { value: \"new-users\", label: \"New Users\" },\n    { value: \"loyal-customers\", label: \"Loyal Customers\" }\n  ];\n\n  const handleApplyDiscount = () => {\n    toast({\n      title: \"Discount Applied\",\n      description: `${discountData.discountValue}${discountData.discountType === 'percentage' ? '%' : '₹'} discount applied to ${userGroups.find(g => g.value === discountData.userGroup)?.label}`,\n    });\n    setLocation(\"/admin/user-management\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Apply Discount</h1>\n              <p className=\"text-sm text-muted-foreground\">Create discount offers for users</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Tag className=\"w-5 h-5\" />\n                <span>Discount Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"userGroup\">Select User Group</Label>\n                  <Select value={discountData.userGroup} onValueChange={(value) => setDiscountData(prev => ({ ...prev, userGroup: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose user group\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {userGroups.map((group) => (\n                        <SelectItem key={group.value} value={group.value}>\n                          {group.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"discountType\">Discount Type</Label>\n                  <Select value={discountData.discountType} onValueChange={(value) => setDiscountData(prev => ({ ...prev, discountType: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select discount type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"percentage\">Percentage (%)</SelectItem>\n                      <SelectItem value=\"fixed\">Fixed Amount (₹)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"discountValue\">\n                    Discount Value {discountData.discountType === 'percentage' ? '(%)' : '(₹)'}\n                  </Label>\n                  <Input\n                    id=\"discountValue\"\n                    type=\"number\"\n                    placeholder={discountData.discountType === 'percentage' ? \"e.g., 10\" : \"e.g., 50\"}\n                    value={discountData.discountValue}\n                    onChange={(e) => setDiscountData(prev => ({ ...prev, discountValue: e.target.value }))}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"validDays\">Valid For (Days)</Label>\n                  <Select value={discountData.validDays} onValueChange={(value) => setDiscountData(prev => ({ ...prev, validDays: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select validity period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"7\">7 Days</SelectItem>\n                      <SelectItem value=\"15\">15 Days</SelectItem>\n                      <SelectItem value=\"30\">30 Days</SelectItem>\n                      <SelectItem value=\"60\">60 Days</SelectItem>\n                      <SelectItem value=\"90\">90 Days</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"minOrderAmount\">Minimum Order Amount (₹)</Label>\n                  <Input\n                    id=\"minOrderAmount\"\n                    type=\"number\"\n                    placeholder=\"e.g., 100\"\n                    value={discountData.minOrderAmount}\n                    onChange={(e) => setDiscountData(prev => ({ ...prev, minOrderAmount: e.target.value }))}\n                  />\n                </div>\n\n                {discountData.discountType === 'percentage' && (\n                  <div>\n                    <Label htmlFor=\"maxDiscountAmount\">Maximum Discount Amount (₹)</Label>\n                    <Input\n                      id=\"maxDiscountAmount\"\n                      type=\"number\"\n                      placeholder=\"e.g., 200\"\n                      value={discountData.maxDiscountAmount}\n                      onChange={(e) => setDiscountData(prev => ({ ...prev, maxDiscountAmount: e.target.value }))}\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Discount Description</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Enter discount description for users...\"\n                  value={discountData.description}\n                  onChange={(e) => setDiscountData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isActive\"\n                  checked={discountData.isActive}\n                  onCheckedChange={(checked) => setDiscountData(prev => ({ ...prev, isActive: checked }))}\n                />\n                <Label htmlFor=\"isActive\">Activate discount immediately</Label>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Percent className=\"w-5 h-5\" />\n                <span>Discount Preview</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Target Group:</span>\n                  <div className=\"font-medium\">{userGroups.find(g => g.value === discountData.userGroup)?.label}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Discount:</span>\n                  <div className=\"font-medium\">\n                    {discountData.discountValue || \"0\"}{discountData.discountType === 'percentage' ? '%' : '₹'} OFF\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Validity:</span>\n                  <div className=\"font-medium\">{discountData.validDays} days</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Min Order:</span>\n                  <div className=\"font-medium\">₹{discountData.minOrderAmount || \"0\"}</div>\n                </div>\n                {discountData.discountType === 'percentage' && discountData.maxDiscountAmount && (\n                  <div>\n                    <span className=\"text-muted-foreground\">Max Discount:</span>\n                    <div className=\"font-medium\">₹{discountData.maxDiscountAmount}</div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"default\" \n              onClick={handleApplyDiscount}\n              disabled={!discountData.discountValue}\n              className=\"flex items-center space-x-2\"\n            >\n              <Tag className=\"w-4 h-4\" />\n              <span>Create Discount</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10000},"client/src/components/user-management/ExportUserDataPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Download, FileText, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ExportUserDataPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [exportConfig, setExportConfig] = useState({\n    userGroup: \"all\",\n    format: \"csv\",\n    dateRange: \"all-time\",\n    fields: [] as string[]\n  });\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportProgress, setExportProgress] = useState(0);\n\n  const userGroups = [\n    { value: \"all\", label: \"All Users\" },\n    { value: \"active\", label: \"Active Users\" },\n    { value: \"inactive\", label: \"Inactive Users\" },\n    { value: \"students\", label: \"Students Only\" },\n    { value: \"faculty\", label: \"Faculty Only\" },\n    { value: \"staff\", label: \"Staff Only\" }\n  ];\n\n  const exportFormats = [\n    { value: \"csv\", label: \"CSV (Comma Separated)\" },\n    { value: \"excel\", label: \"Excel (XLSX)\" },\n    { value: \"json\", label: \"JSON\" },\n    { value: \"pdf\", label: \"PDF Report\" }\n  ];\n\n  const dateRanges = [\n    { value: \"all-time\", label: \"All Time\" },\n    { value: \"last-30\", label: \"Last 30 Days\" },\n    { value: \"last-90\", label: \"Last 90 Days\" },\n    { value: \"this-year\", label: \"This Year\" },\n    { value: \"last-year\", label: \"Last Year\" }\n  ];\n\n  const availableFields = [\n    { id: \"basic\", label: \"Basic Info (Name, Email, Phone)\" },\n    { id: \"profile\", label: \"Profile Details\" },\n    { id: \"orders\", label: \"Order History\" },\n    { id: \"payments\", label: \"Payment Information\" },\n    { id: \"preferences\", label: \"User Preferences\" },\n    { id: \"activity\", label: \"Activity Logs\" },\n    { id: \"feedback\", label: \"Feedback & Reviews\" },\n    { id: \"loyalty\", label: \"Loyalty Points\" }\n  ];\n\n  const handleFieldChange = (fieldId: string, checked: boolean) => {\n    setExportConfig(prev => ({\n      ...prev,\n      fields: checked \n        ? [...prev.fields, fieldId]\n        : prev.fields.filter(f => f !== fieldId)\n    }));\n  };\n\n  const handleExport = () => {\n    setIsExporting(true);\n    setExportProgress(0);\n\n    const interval = setInterval(() => {\n      setExportProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsExporting(false);\n          toast({\n            title: \"Export Completed\",\n            description: `User data exported successfully as ${exportConfig.format.toUpperCase()}`,\n          });\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Export User Data</h1>\n              <p className=\"text-sm text-muted-foreground\">Download user information and analytics</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5\" />\n                <span>Export Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"userGroup\">User Group</Label>\n                  <Select value={exportConfig.userGroup} onValueChange={(value) => setExportConfig(prev => ({ ...prev, userGroup: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select users\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {userGroups.map((group) => (\n                        <SelectItem key={group.value} value={group.value}>\n                          {group.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"format\">Export Format</Label>\n                  <Select value={exportConfig.format} onValueChange={(value) => setExportConfig(prev => ({ ...prev, format: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select format\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {exportFormats.map((format) => (\n                        <SelectItem key={format.value} value={format.value}>\n                          {format.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dateRange\">Date Range</Label>\n                  <Select value={exportConfig.dateRange} onValueChange={(value) => setExportConfig(prev => ({ ...prev, dateRange: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select range\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {dateRanges.map((range) => (\n                        <SelectItem key={range.value} value={range.value}>\n                          {range.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Data Fields</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {availableFields.map((field) => (\n                  <div key={field.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={field.id}\n                      checked={exportConfig.fields.includes(field.id)}\n                      onCheckedChange={(checked) => handleFieldChange(field.id, checked as boolean)}\n                    />\n                    <Label htmlFor={field.id} className=\"text-sm\">{field.label}</Label>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Export Summary</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Target Users:</span>\n                  <div className=\"font-medium\">{userGroups.find(g => g.value === exportConfig.userGroup)?.label}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Export Format:</span>\n                  <div className=\"font-medium\">{exportFormats.find(f => f.value === exportConfig.format)?.label}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Time Period:</span>\n                  <div className=\"font-medium\">{dateRanges.find(r => r.value === exportConfig.dateRange)?.label}</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Data Fields:</span>\n                  <div className=\"font-medium\">{exportConfig.fields.length} selected</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Estimated Records:</span>\n                  <div className=\"font-medium\">~1,245 users</div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">File Size:</span>\n                  <div className=\"font-medium\">~2.3 MB</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {isExporting && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Export in Progress</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Exporting data...</span>\n                    <span>{exportProgress}%</span>\n                  </div>\n                  <Progress value={exportProgress} className=\"w-full\" />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"default\" \n              onClick={handleExport}\n              disabled={exportConfig.fields.length === 0 || isExporting}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>{isExporting ? \"Exporting...\" : \"Export Data\"}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10088},"client/src/components/user-management/ImportUsersPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Upload, FileText, CheckCircle, AlertTriangle, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ImportUsersPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [importConfig, setImportConfig] = useState({\n    fileFormat: \"csv\",\n    duplicateHandling: \"skip\",\n    defaultRole: \"student\"\n  });\n  const [file, setFile] = useState<File | null>(null);\n  const [isImporting, setIsImporting] = useState(false);\n  const [importProgress, setImportProgress] = useState(0);\n  const [importResults, setImportResults] = useState<any>(null);\n\n  const fileFormats = [\n    { value: \"csv\", label: \"CSV File\" },\n    { value: \"excel\", label: \"Excel (XLSX)\" },\n    { value: \"json\", label: \"JSON File\" }\n  ];\n\n  const duplicateOptions = [\n    { value: \"skip\", label: \"Skip duplicates\" },\n    { value: \"update\", label: \"Update existing\" },\n    { value: \"create\", label: \"Create new entries\" }\n  ];\n\n  const roleOptions = [\n    { value: \"student\", label: \"Student\" },\n    { value: \"faculty\", label: \"Faculty\" },\n    { value: \"staff\", label: \"Staff\" }\n  ];\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n    }\n  };\n\n  const handleImport = () => {\n    if (!file) return;\n    \n    setIsImporting(true);\n    setImportProgress(0);\n\n    const interval = setInterval(() => {\n      setImportProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsImporting(false);\n          setImportResults({\n            total: 150,\n            successful: 145,\n            skipped: 3,\n            failed: 2,\n            errors: [\n              \"Row 15: Invalid email format\",\n              \"Row 23: Phone number already exists\"\n            ]\n          });\n          toast({\n            title: \"Import Completed\",\n            description: \"145 users imported successfully\",\n          });\n          return 100;\n        }\n        return prev + 5;\n      });\n    }, 150);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Import Users</h1>\n              <p className=\"text-sm text-muted-foreground\">Bulk import users from file</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Upload className=\"w-5 h-5\" />\n                <span>Import Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"fileFormat\">File Format</Label>\n                  <Select value={importConfig.fileFormat} onValueChange={(value) => setImportConfig(prev => ({ ...prev, fileFormat: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select format\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {fileFormats.map((format) => (\n                        <SelectItem key={format.value} value={format.value}>\n                          {format.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"duplicateHandling\">Duplicate Handling</Label>\n                  <Select value={importConfig.duplicateHandling} onValueChange={(value) => setImportConfig(prev => ({ ...prev, duplicateHandling: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Handle duplicates\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {duplicateOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"defaultRole\">Default Role</Label>\n                  <Select value={importConfig.defaultRole} onValueChange={(value) => setImportConfig(prev => ({ ...prev, defaultRole: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select default role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {roleOptions.map((role) => (\n                        <SelectItem key={role.value} value={role.value}>\n                          {role.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5\" />\n                <span>File Upload</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"file\">Select File</Label>\n                <Input\n                  id=\"file\"\n                  type=\"file\"\n                  accept=\".csv,.xlsx,.json\"\n                  onChange={handleFileChange}\n                  className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/80\"\n                />\n              </div>\n\n              {file && (\n                <div className=\"border rounded-lg p-4 bg-muted/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{file.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {(file.size / 1024).toFixed(2)} KB • {importConfig.fileFormat.toUpperCase()}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => setFile(null)}>\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"p-4 border rounded-lg bg-blue-50 dark:bg-blue-950/20\">\n                <h4 className=\"font-medium mb-2\">Required Fields</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your file should contain the following columns: <strong>name</strong>, <strong>email</strong>, <strong>phone</strong> (optional), <strong>role</strong> (optional)\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {isImporting && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Import in Progress</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Processing users...</span>\n                    <span>{importProgress}%</span>\n                  </div>\n                  <Progress value={importProgress} className=\"w-full\" />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {importResults && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-success\" />\n                  <span>Import Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{importResults.total}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Processed</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-success\">{importResults.successful}</div>\n                    <div className=\"text-sm text-muted-foreground\">Successful</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-warning\">{importResults.skipped}</div>\n                    <div className=\"text-sm text-muted-foreground\">Skipped</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-destructive\">{importResults.failed}</div>\n                    <div className=\"text-sm text-muted-foreground\">Failed</div>\n                  </div>\n                </div>\n\n                {importResults.errors.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2 flex items-center space-x-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-warning\" />\n                      <span>Errors</span>\n                    </h4>\n                    <div className=\"space-y-1\">\n                      {importResults.errors.map((error: string, index: number) => (\n                        <div key={index} className=\"text-sm text-muted-foreground p-2 bg-muted rounded\">\n                          {error}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              {importResults ? \"Done\" : \"Cancel\"}\n            </Button>\n            {!importResults && (\n              <Button \n                variant=\"default\" \n                onClick={handleImport}\n                disabled={!file || isImporting}\n                className=\"flex items-center space-x-2\"\n              >\n                <Upload className=\"w-4 h-4\" />\n                <span>{isImporting ? \"Importing...\" : \"Import Users\"}</span>\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11521},"client/src/components/user-management/SendEmailPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Mail, Send, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SendEmailPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [emailData, setEmailData] = useState({\n    subject: \"\",\n    message: \"\",\n    userGroup: \"all\"\n  });\n\n  const userGroups = [\n    { value: \"all\", label: \"All Users\" },\n    { value: \"students\", label: \"Students Only\" },\n    { value: \"faculty\", label: \"Faculty Only\" },\n    { value: \"staff\", label: \"Staff Only\" },\n    { value: \"active\", label: \"Active Users\" },\n    { value: \"inactive\", label: \"Inactive Users\" }\n  ];\n\n  const handleSendEmail = () => {\n    toast({\n      title: \"Email Sent Successfully\",\n      description: `Email sent to ${emailData.userGroup} group`,\n    });\n    setLocation(\"/admin/user-management\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Send Bulk Email</h1>\n              <p className=\"text-sm text-muted-foreground\">Send notifications to users</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Mail className=\"w-5 h-5\" />\n                <span>Email Details</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"userGroup\">Select User Group</Label>\n                <Select value={emailData.userGroup} onValueChange={(value) => setEmailData(prev => ({ ...prev, userGroup: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose user group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {userGroups.map((group) => (\n                      <SelectItem key={group.value} value={group.value}>\n                        {group.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"subject\">Email Subject</Label>\n                <Input\n                  id=\"subject\"\n                  placeholder=\"Enter email subject\"\n                  value={emailData.subject}\n                  onChange={(e) => setEmailData(prev => ({ ...prev, subject: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"message\">Email Message</Label>\n                <Textarea\n                  id=\"message\"\n                  placeholder=\"Enter your message here...\"\n                  className=\"min-h-32\"\n                  value={emailData.message}\n                  onChange={(e) => setEmailData(prev => ({ ...prev, message: e.target.value }))}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>Email Preview</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <div className=\"mb-4\">\n                  <strong>To:</strong> {userGroups.find(g => g.value === emailData.userGroup)?.label}\n                </div>\n                <div className=\"mb-4\">\n                  <strong>Subject:</strong> {emailData.subject || \"No subject\"}\n                </div>\n                <div>\n                  <strong>Message:</strong>\n                  <div className=\"mt-2 whitespace-pre-wrap\">\n                    {emailData.message || \"No message content\"}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"default\" \n              onClick={handleSendEmail}\n              disabled={!emailData.subject || !emailData.message}\n              className=\"flex items-center space-x-2\"\n            >\n              <Send className=\"w-4 h-4\" />\n              <span>Send Email</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5579},"client/src/components/user-management/SendWarningPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, AlertTriangle, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SendWarningPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [warningData, setWarningData] = useState({\n    userGroup: \"individual\",\n    selectedUser: \"\",\n    warningType: \"general\",\n    subject: \"\",\n    message: \"\",\n    severity: \"low\"\n  });\n\n  const warningTypes = [\n    { value: \"general\", label: \"General Warning\" },\n    { value: \"payment\", label: \"Payment Issues\" },\n    { value: \"behavior\", label: \"Behavioral Warning\" },\n    { value: \"policy\", label: \"Policy Violation\" },\n    { value: \"spam\", label: \"Spam/Abuse\" },\n    { value: \"account\", label: \"Account Security\" }\n  ];\n\n  const severityLevels = [\n    { value: \"low\", label: \"Low\", color: \"secondary\" },\n    { value: \"medium\", label: \"Medium\", color: \"warning\" },\n    { value: \"high\", label: \"High\", color: \"destructive\" }\n  ];\n\n  const mockUsers: any[] = []; // Will be populated from actual user data when user management system is implemented\n\n  const handleSendWarning = () => {\n    toast({\n      title: \"Warning Sent\",\n      description: `Warning sent successfully with ${warningData.severity} severity`,\n    });\n    setLocation(\"/admin/user-management\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/admin/user-management\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Send Warning</h1>\n              <p className=\"text-sm text-muted-foreground\">Issue warnings to users</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                <span>Warning Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"userGroup\">Target</Label>\n                  <Select value={warningData.userGroup} onValueChange={(value) => setWarningData(prev => ({ ...prev, userGroup: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select target\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"individual\">Individual User</SelectItem>\n                      <SelectItem value=\"multiple\">Multiple Users</SelectItem>\n                      <SelectItem value=\"all\">All Users</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {warningData.userGroup === \"individual\" && (\n                  <div>\n                    <Label htmlFor=\"selectedUser\">Select User</Label>\n                    <Select value={warningData.selectedUser} onValueChange={(value) => setWarningData(prev => ({ ...prev, selectedUser: value }))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Choose user\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {mockUsers.map((user) => (\n                          <SelectItem key={user.id} value={user.id.toString()}>\n                            {user.name} ({user.email})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"warningType\">Warning Type</Label>\n                  <Select value={warningData.warningType} onValueChange={(value) => setWarningData(prev => ({ ...prev, warningType: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select warning type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {warningTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"severity\">Severity Level</Label>\n                  <Select value={warningData.severity} onValueChange={(value) => setWarningData(prev => ({ ...prev, severity: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select severity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {severityLevels.map((level) => (\n                        <SelectItem key={level.value} value={level.value}>\n                          {level.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"subject\">Warning Subject</Label>\n                <Input\n                  id=\"subject\"\n                  placeholder=\"Enter warning subject\"\n                  value={warningData.subject}\n                  onChange={(e) => setWarningData(prev => ({ ...prev, subject: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"message\">Warning Message</Label>\n                <Textarea\n                  id=\"message\"\n                  placeholder=\"Enter detailed warning message...\"\n                  className=\"min-h-32\"\n                  value={warningData.message}\n                  onChange={(e) => setWarningData(prev => ({ ...prev, message: e.target.value }))}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Warning Preview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <AlertTriangle className=\"w-5 h-5 text-warning\" />\n                    <strong>Official Warning</strong>\n                  </div>\n                  <Badge variant={severityLevels.find(s => s.value === warningData.severity)?.color as any}>\n                    {severityLevels.find(s => s.value === warningData.severity)?.label} Priority\n                  </Badge>\n                </div>\n                \n                <div className=\"mb-4\">\n                  <strong>Type:</strong> {warningTypes.find(t => t.value === warningData.warningType)?.label}\n                </div>\n                \n                <div className=\"mb-4\">\n                  <strong>Subject:</strong> {warningData.subject || \"No subject\"}\n                </div>\n                \n                <div>\n                  <strong>Message:</strong>\n                  <div className=\"mt-2 whitespace-pre-wrap\">\n                    {warningData.message || \"No message content\"}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/admin/user-management\")}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"destructive\" \n              onClick={handleSendWarning}\n              disabled={!warningData.subject || !warningData.message}\n              className=\"flex items-center space-x-2\"\n            >\n              <Send className=\"w-4 h-4\" />\n              <span>Send Warning</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8954},"client/src/components/SyncStatus.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Wifi, WifiOff, RefreshCw } from \"lucide-react\";\nimport { useDataSync } from \"@/hooks/useDataSync\";\n\n/**\n * Component to show real-time synchronization status\n * Displays across all dashboards to confirm data consistency\n */\nexport default function SyncStatus() {\n  const { isLoading, hasError, stats, queries } = useDataSync();\n\n  const getSyncStatus = () => {\n    // Check for critical errors only (not analytics)\n    const criticalError = queries.categories.error || queries.menuItems.error || queries.orders.error;\n    \n    if (criticalError) return { icon: WifiOff, text: \"Sync Error\", variant: \"destructive\" as const };\n    if (isLoading) return { icon: RefreshCw, text: \"Syncing...\", variant: \"secondary\" as const };\n    return { icon: Wifi, text: \"Synced\", variant: \"default\" as const };\n  };\n\n  const status = getSyncStatus();\n  const Icon = status.icon;\n\n  return (\n    <div className=\"flex items-center space-x-2 text-xs\">\n      <Badge variant={status.variant} className=\"flex items-center space-x-1\">\n        <Icon className={`w-3 h-3 ${isLoading ? 'animate-spin' : ''}`} />\n        <span>{status.text}</span>\n      </Badge>\n      \n      {status.variant !== \"destructive\" && !isLoading && (\n        <div className=\"flex items-center space-x-1 text-muted-foreground\">\n          <span>{stats.totalMenuItems} items</span>\n          <span>•</span>\n          <span>{stats.totalCategories} categories</span>\n          <span>•</span>\n          <span>{stats.totalOrders} orders</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":1589},"client/src/hooks/useCart.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface CartItem {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n}\n\nexport function useCart() {\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const { toast } = useToast();\n\n  // Load cart from localStorage on component mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('kit-canteen-cart');\n    if (savedCart) {\n      try {\n        setCart(JSON.parse(savedCart));\n      } catch (error) {\n        // Failed to parse cart from localStorage - clear corrupted data\n        localStorage.removeItem('kit-canteen-cart');\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever cart changes\n  useEffect(() => {\n    localStorage.setItem('kit-canteen-cart', JSON.stringify(cart));\n  }, [cart]);\n\n  const addToCart = (item: { id: number; name: string; price: number }) => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(cartItem => cartItem.id === item.id);\n      \n      if (existingItem) {\n        // Update quantity if item already exists\n        return prevCart.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem\n        );\n      } else {\n        // Add new item to cart\n        return [...prevCart, { ...item, quantity: 1 }];\n      }\n    });\n\n    toast({\n      title: \"Added to Cart\",\n      description: `${item.name} added to your cart`,\n    });\n  };\n\n  const removeFromCart = (itemId: number) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== itemId));\n    toast({\n      title: \"Item Removed\",\n      description: \"Item has been removed from your cart\",\n    });\n  };\n\n  const updateQuantity = (itemId: number, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.id === itemId\n          ? { ...item, quantity: newQuantity }\n          : item\n      )\n    );\n  };\n\n  const decreaseQuantity = (itemId: number) => {\n    const item = cart.find(cartItem => cartItem.id === itemId);\n    if (item) {\n      if (item.quantity > 1) {\n        updateQuantity(itemId, item.quantity - 1);\n      } else {\n        removeFromCart(itemId);\n      }\n    }\n  };\n\n  const getCartQuantity = (itemId: number) => {\n    const item = cart.find(cartItem => cartItem.id === itemId);\n    return item ? item.quantity : 0;\n  };\n\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    localStorage.removeItem('kit-canteen-cart');\n    toast({\n      title: \"Cart Cleared\",\n      description: \"All items have been removed from your cart\",\n    });\n  };\n\n  return {\n    cart,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    decreaseQuantity,\n    getCartQuantity,\n    getTotalItems,\n    getTotalPrice,\n    clearCart,\n  };\n}","size_bytes":3100},"client/src/hooks/useDataSync.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { MenuItem, Category, Order, User } from \"@shared/schema\";\n\n/**\n * Custom hook for synchronized data fetching across all dashboards\n * Ensures real-time data consistency between admin, canteen owner, and student views\n */\nexport function useDataSync() {\n  // Categories query - optimized refresh\n  const categoriesQuery = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    staleTime: 1000 * 60 * 10, // 10 minutes (categories change infrequently)\n    refetchOnMount: true,\n    refetchOnWindowFocus: false, // Categories don't need frequent refetch\n  });\n\n  // Menu items query - balanced refresh\n  const menuItemsQuery = useQuery<MenuItem[]>({\n    queryKey: ['/api/menu'],\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Orders query - more frequent for real-time updates\n  const ordersQuery = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    staleTime: 1000 * 60, // 1 minute for orders\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Analytics query - least frequent\n  const analyticsQuery = useQuery({\n    queryKey: ['/api/admin/analytics'],\n    staleTime: 1000 * 60 * 15, // 15 minutes for analytics\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n    retry: false, // Don't retry analytics failures\n    retryOnMount: false,\n  });\n\n  // Computed values for dashboard consistency\n  const stats = {\n    totalCategories: categoriesQuery.data?.length || 0,\n    totalMenuItems: menuItemsQuery.data?.length || 0,\n    availableItems: menuItemsQuery.data?.filter(item => item.available).length || 0,\n    totalOrders: ordersQuery.data?.length || 0,\n    pendingOrders: ordersQuery.data?.filter(order => order.status === 'preparing').length || 0,\n    completedOrders: ordersQuery.data?.filter(order => order.status === 'completed').length || 0,\n    totalRevenue: ordersQuery.data?.reduce((sum, order) => sum + order.amount, 0) || 0,\n  };\n\n  // Combined loading state\n  const isLoading = categoriesQuery.isLoading || menuItemsQuery.isLoading || ordersQuery.isLoading;\n\n  // Combined error state (excluding analytics errors as they're optional)\n  const hasError = categoriesQuery.error || menuItemsQuery.error || ordersQuery.error;\n\n  return {\n    // Raw data\n    categories: categoriesQuery.data || [],\n    menuItems: menuItemsQuery.data || [],\n    orders: ordersQuery.data || [],\n    analytics: analyticsQuery.data,\n    \n    // Computed stats\n    stats,\n    \n    // Loading and error states\n    isLoading,\n    hasError,\n    \n    // Refetch functions for manual sync\n    refetch: {\n      categories: categoriesQuery.refetch,\n      menuItems: menuItemsQuery.refetch,\n      orders: ordersQuery.refetch,\n      analytics: analyticsQuery.refetch,\n      all: () => {\n        categoriesQuery.refetch();\n        menuItemsQuery.refetch();\n        ordersQuery.refetch();\n        analyticsQuery.refetch();\n      }\n    },\n    \n    // Individual query states for granular control\n    queries: {\n      categories: categoriesQuery,\n      menuItems: menuItemsQuery,\n      orders: ordersQuery,\n      analytics: analyticsQuery,\n    }\n  };\n}\n\n/**\n * Hook specifically for authentication state synchronization\n */\nexport function useAuthSync() {\n  const user = JSON.parse(localStorage.getItem('user') || 'null');\n  \n  // Debug logging for authentication state\n  console.log(\"useAuthSync Debug:\", {\n    localStorage_user: localStorage.getItem('user'),\n    parsed_user: user,\n    isAuthenticated: !!user,\n    userRole: user?.role\n  });\n  \n  return {\n    user,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === 'admin' || user?.role === 'super_admin',\n    isSuperAdmin: user?.role === 'super_admin',\n    isCanteenOwner: user?.role === 'canteen_owner',\n    isStudent: user?.role === 'student' || !user?.role,\n    hasRole: (role: string) => user?.role === role,\n  };\n}","size_bytes":3919},"client/src/components/BarcodeDisplay.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport JsBarcode from 'jsbarcode';\n\ninterface BarcodeDisplayProps {\n  value: string;\n  width?: number;\n  height?: number;\n  displayValue?: boolean;\n  className?: string;\n}\n\nexport default function BarcodeDisplay({ \n  value, \n  width = 2, \n  height = 100, \n  displayValue = true,\n  className = \"\" \n}: BarcodeDisplayProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current && value) {\n      try {\n        JsBarcode(canvasRef.current, value, {\n          format: \"CODE128\",\n          width: width,\n          height: height,\n          displayValue: displayValue,\n          fontSize: 14,\n          textAlign: \"center\",\n          textPosition: \"bottom\",\n          background: \"#ffffff\",\n          lineColor: \"#000000\",\n          margin: 10\n        });\n      } catch (error) {\n        console.error('Error generating barcode:', error);\n      }\n    }\n  }, [value, width, height, displayValue]);\n\n  if (!value) {\n    return (\n      <div className={`flex items-center justify-center p-4 border rounded ${className}`}>\n        <span className=\"text-muted-foreground\">No barcode available</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex flex-col items-center space-y-2 ${className}`}>\n      <canvas ref={canvasRef} className=\"border rounded\" />\n      {displayValue && (\n        <span className=\"text-xs text-muted-foreground font-mono\">{value}</span>\n      )}\n    </div>\n  );\n}","size_bytes":1480},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthSync } from \"@/hooks/useDataSync\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: string;\n  requiredRoles?: string[];\n  requireAuth?: boolean;\n}\n\nexport default function ProtectedRoute({ \n  children, \n  requiredRole, \n  requiredRoles = [], \n  requireAuth = true \n}: ProtectedRouteProps) {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, hasRole } = useAuthSync();\n\n  // Authentication and role checking logic\n\n  useEffect(() => {\n    // Check if authentication is required\n    if (requireAuth && !isAuthenticated) {\n      toast(\"Please log in to access this page.\");\n      setLocation(\"/login\");\n      return;\n    }\n\n    // Check specific role requirements\n    if (requiredRole && !hasRole(requiredRole)) {\n      toast(\"Access denied. Insufficient permissions.\");\n      setLocation(\"/login\");\n      return;\n    }\n\n    // Check multiple role requirements\n    if (requiredRoles.length > 0 && !requiredRoles.some(role => hasRole(role))) {\n      toast(\"Access denied. Insufficient permissions.\");\n      setLocation(\"/login\");\n      return;\n    }\n  }, [isAuthenticated, user, requiredRole, requiredRoles, requireAuth, hasRole, setLocation]);\n\n  // Return access denied screen immediately if not authorized\n  if (requireAuth && !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Authentication Required</h2>\n          <p className=\"text-muted-foreground mb-4\">Please log in to access this page</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (requiredRole && !hasRole(requiredRole)) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (requiredRoles.length > 0 && !requiredRoles.some(role => hasRole(role))) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-4\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page</p>\n          <Button onClick={() => setLocation(\"/login\")}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":2901},"client/src/components/TestLogoutButton.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LogOut } from \"lucide-react\";\n\nexport default function TestLogoutButton() {\n  const handleLogout = () => {\n    localStorage.clear();\n    window.location.href = '/login';\n  };\n\n  return (\n    <Button \n      onClick={handleLogout}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"fixed top-4 right-4 z-50\"\n    >\n      <LogOut className=\"w-4 h-4 mr-2\" />\n      Test Logout\n    </Button>\n  );\n}","size_bytes":456},"BARCODE_GUIDE.md":{"content":"# Barcode Scanner Guide for KIT Canteen\n\n## How the Barcode System Works\n\n### Order Process\n1. **Customer places order** → Order gets a unique order number (e.g., `ORD1754331701447`)\n2. **System generates delivery barcode** → Unique barcode for pickup verification (e.g., `KC701981PP1KSG`)\n3. **Customer receives order confirmation** → Contains both order number and delivery barcode\n4. **Canteen staff scan delivery barcode** → For order fulfillment verification\n\n### Two Types of Codes\n\n#### Order Number (ORD format)\n- **Format**: `ORD1754331701447`\n- **Purpose**: Order tracking and identification\n- **Used for**: Customer reference, order management, status checking\n\n#### Delivery Barcode (Order Number)\n- **Format**: `ORD1754331477327`\n- **Purpose**: Order pickup verification and delivery confirmation\n- **Used for**: Barcode scanning at pickup counter\n\n### Scanner Usage Instructions\n\n#### For Canteen Staff:\n1. **Access Scanner**: Click the \"Scanner\" tab in your dashboard\n2. **Start Camera Scanner**: Click \"Start Camera Scanner\" button\n3. **Allow Camera Permission**: Grant camera access when prompted\n4. **Scan Delivery Barcode**: Point camera at the delivery barcode (not order number)\n5. **Verify Delivery**: System automatically processes and marks order as delivered\n\n#### What Happens When You Scan:\n- ✅ **Valid unused barcode**: Order marked as delivered, customer notified\n- ❌ **Already used barcode**: \"Order has already been delivered\" message\n- ❌ **Invalid barcode**: \"Invalid barcode. No order found\" message\n- ❌ **Order not ready**: \"Order is not ready for pickup\" message\n\n### Troubleshooting\n\n#### If scanning fails:\n1. Use **Manual Entry**: Type the barcode in the input field\n2. Check **Camera Permissions**: Ensure browser has camera access\n3. Try **Better Lighting**: Ensure good lighting for camera scanning\n4. Use **Correct Barcode**: Scan the delivery barcode, not the order number\n\n#### Common Issues:\n- **Scanning Order Number**: Remember to scan the delivery barcode (alphanumeric), not the order number (ORD format)\n- **Poor Camera Quality**: Use manual entry as backup\n- **Permission Denied**: Enable camera permissions in browser settings\n\n### System Status\n✅ Database connected and working\n✅ Barcode scanner interface functional\n✅ Camera permissions and scanning working\n✅ Order delivery verification working\n✅ Real-time order status updates working\n\n### Test Examples\n#### Example 1:\n- Order Number: `ORD1754331701447`\n- Delivery Barcode: `KC701981PP1KSG`\n- Status: Successfully delivered ✅\n\n#### Example 2:\n- Order Number: `ORD1754332914519`\n- Delivery Barcode: `KC9150595KMUNH`\n- Status: Successfully delivered ✅\n\n### Important Note:\n**Now you can use the order number (ORD format) directly as the barcode!**\n\nThe system is fully operational and ready for use!","size_bytes":2834},"shared/utils.ts":{"content":"/**\n * Generates a unique 12-digit numeric order ID\n * Format: 123456789012 (12 digits total)\n * Uses only numbers for better compatibility and easier identification\n */\nexport function generateOrderId(): string {\n  // Generate 8 random digits\n  let result = '';\n  for (let i = 0; i < 8; i++) {\n    result += Math.floor(Math.random() * 10).toString();\n  }\n  \n  // Add 4 digits from timestamp for uniqueness\n  const timestamp = Date.now();\n  const timestampPart = (timestamp % 10000).toString().padStart(4, '0');\n  \n  return result + timestampPart;\n}\n\n/**\n * Validates if a string is a valid 12-digit numeric order ID\n */\nexport function isValidOrderId(orderId: string): boolean {\n  const pattern = /^[0-9]{12}$/;\n  return pattern.test(orderId);\n}\n\n/**\n * Formats order ID with highlighted last 4 digits for display\n * Returns object with formatted parts for UI highlighting\n */\nexport function formatOrderIdDisplay(orderId: string): { \n  prefix: string; \n  suffix: string; \n  full: string \n} {\n  if (!orderId || orderId.length !== 12) {\n    return { prefix: orderId || '', suffix: '', full: orderId || '' };\n  }\n  \n  return {\n    prefix: orderId.slice(0, 8),\n    suffix: orderId.slice(8, 12),\n    full: orderId\n  };\n}","size_bytes":1217}}}